// Copyright Â© 2015-2017 winapi-rs developers
// Licensed under the Apache License, Version 2.0
// <LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your option.
// All files in the project carrying such notice may not be copied, modified, or distributed
// except according to those terms.
//! This is the include file that defines constants and types for interfacing with network drivers
use ctypes::c_int;
use shared::basetsd::{UINT16, UINT32, UINT64, UINT8, ULONG64, ULONG_PTR};
use shared::guiddef::GUID;
use shared::ifdef::{
    IF_COUNTED_STRING, IF_MAX_PHYS_ADDRESS_LENGTH, IF_MAX_STRING_SIZE, IF_PHYSICAL_ADDRESS,
    NET_IFINDEX, NET_IF_DIRECTION_TYPE, NET_IF_MEDIA_CONNECT_STATE, NET_IF_MEDIA_DUPLEX_STATE,
    NET_IF_OBJECT_ID, NET_IF_OPER_STATUS, NET_LUID,
};
use shared::in6addr::IN6_ADDR;
use shared::inaddr::IN_ADDR;
use shared::minwindef::{UCHAR, UINT, ULONG, USHORT};
use shared::ndkinfo::{NDK_ADAPTER_INFO, NDK_VERSION};
use shared::ws2ipdef::SOCKADDR_INET;
use um::winioctl::{
    DEVICE_TYPE, FILE_ANY_ACCESS, FILE_DEVICE_PHYSICAL_NETCARD, FILE_WRITE_ACCESS, METHOD_BUFFERED,
    METHOD_OUT_DIRECT,
};
use um::winnt::{
    BOOLEAN, CHAR, GROUP_AFFINITY, HANDLE, LARGE_INTEGER, LONG, LUID, PROCESSOR_NUMBER, PVOID,
    SHORT, ULONGLONG, WCHAR,
};
pub const DD_NDIS_DEVICE_NAME: &'static str = "\\Device\\NDIS";
macro_rules! _NDIS_CONTROL_CODE {
    ($request:expr, $method:expr) => {
        CTL_CODE!(FILE_DEVICE_PHYSICAL_NETCARD, $request, $method, FILE_ANY_ACCESS)
    }
}
pub const IOCTL_NDIS_QUERY_GLOBAL_STATS: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0, METHOD_OUT_DIRECT);
pub const IOCTL_NDIS_QUERY_ALL_STATS: DEVICE_TYPE = _NDIS_CONTROL_CODE!(1, METHOD_OUT_DIRECT);
pub const IOCTL_NDIS_DO_PNP_OPERATION: DEVICE_TYPE = _NDIS_CONTROL_CODE!(2, METHOD_BUFFERED);
pub const IOCTL_NDIS_QUERY_SELECTED_STATS: DEVICE_TYPE = _NDIS_CONTROL_CODE!(3, METHOD_OUT_DIRECT);
pub const IOCTL_NDIS_ENUMERATE_INTERFACES: DEVICE_TYPE = _NDIS_CONTROL_CODE!(4, METHOD_BUFFERED);
pub const IOCTL_NDIS_ADD_TDI_DEVICE: DEVICE_TYPE = _NDIS_CONTROL_CODE!(5, METHOD_BUFFERED);
pub const IOCTL_NDIS_GET_LOG_DATA: DEVICE_TYPE = _NDIS_CONTROL_CODE!(7, METHOD_OUT_DIRECT);
pub const IOCTL_NDIS_GET_VERSION: DEVICE_TYPE = _NDIS_CONTROL_CODE!(8, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED1: DEVICE_TYPE = _NDIS_CONTROL_CODE!(9, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED2: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0xA, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED3: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0xB, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED4: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0xC, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED5: DEVICE_TYPE =
    CTL_CODE!(FILE_DEVICE_PHYSICAL_NETCARD, 0xD, METHOD_BUFFERED, FILE_ANY_ACCESS);
pub const IOCTL_NDIS_RESERVED6: DEVICE_TYPE =
    CTL_CODE!(FILE_DEVICE_PHYSICAL_NETCARD, 0xE, METHOD_BUFFERED, FILE_WRITE_ACCESS);
pub const IOCTL_NDIS_RESERVED7: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0xF, METHOD_OUT_DIRECT);
pub const IOCTL_NDIS_RESERVED8: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x10, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED9: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x11, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED10: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x12, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED11: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x13, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED12: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x14, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED13: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x15, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED14: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x16, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED15: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x17, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED16: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x18, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED17: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x19, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED18: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x1A, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED19: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x1B, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED20: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x1C, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED21: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x1D, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED22: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x1E, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED23: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x1F, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED24: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x20, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED25: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x21, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED26: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x22, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED27: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x23, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED28: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x24, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED29: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x25, METHOD_BUFFERED);
pub const IOCTL_NDIS_RESERVED30: DEVICE_TYPE = _NDIS_CONTROL_CODE!(0x26, METHOD_BUFFERED);
pub type NDIS_OID = ULONG;
pub type PNDIS_OID = *mut ULONG;
STRUCT!{struct NDIS_STATISTICS_VALUE {
    Oid: NDIS_OID,
    DataLength: ULONG,
    Data: [UCHAR; 1],
}}
pub type PNDIS_STATISTICS_VALUE = *mut NDIS_STATISTICS_VALUE;
STRUCT!{struct NDIS_STATISTICS_VALUE_EX {
    Oid: NDIS_OID,
    DataLength: ULONG,
    Length: ULONG,
    Data: [UCHAR; 1],
}}
pub type PNDIS_STATISTICS_VALUE_EX = *mut NDIS_STATISTICS_VALUE_EX;
STRUCT!{struct NDIS_VAR_DATA_DESC {
    Length: USHORT,
    MaximumLength: USHORT,
    Offset: ULONG_PTR,
}}
pub type PNDIS_VAR_DATA_DESC = *mut NDIS_VAR_DATA_DESC;
pub const NDIS_OBJECT_TYPE_DEFAULT: UCHAR = 0x80;
pub const NDIS_OBJECT_TYPE_MINIPORT_INIT_PARAMETERS: UCHAR = 0x81;
pub const NDIS_OBJECT_TYPE_SG_DMA_DESCRIPTION: UCHAR = 0x83;
pub const NDIS_OBJECT_TYPE_MINIPORT_INTERRUPT: UCHAR = 0x84;
pub const NDIS_OBJECT_TYPE_DEVICE_OBJECT_ATTRIBUTES: UCHAR = 0x85;
pub const NDIS_OBJECT_TYPE_BIND_PARAMETERS: UCHAR = 0x86;
pub const NDIS_OBJECT_TYPE_OPEN_PARAMETERS: UCHAR = 0x87;
pub const NDIS_OBJECT_TYPE_RSS_CAPABILITIES: UCHAR = 0x88;
pub const NDIS_OBJECT_TYPE_RSS_PARAMETERS: UCHAR = 0x89;
pub const NDIS_OBJECT_TYPE_MINIPORT_DRIVER_CHARACTERISTICS: UCHAR = 0x8A;
pub const NDIS_OBJECT_TYPE_FILTER_DRIVER_CHARACTERISTICS: UCHAR = 0x8B;
pub const NDIS_OBJECT_TYPE_FILTER_PARTIAL_CHARACTERISTICS: UCHAR = 0x8C;
pub const NDIS_OBJECT_TYPE_FILTER_ATTRIBUTES: UCHAR = 0x8D;
pub const NDIS_OBJECT_TYPE_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS: UCHAR = 0x8E;
pub const NDIS_OBJECT_TYPE_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS: UCHAR = 0x8F;
pub const NDIS_OBJECT_TYPE_CO_PROTOCOL_CHARACTERISTICS: UCHAR = 0x90;
pub const NDIS_OBJECT_TYPE_CO_MINIPORT_CHARACTERISTICS: UCHAR = 0x91;
pub const NDIS_OBJECT_TYPE_MINIPORT_PNP_CHARACTERISTICS: UCHAR = 0x92;
pub const NDIS_OBJECT_TYPE_CLIENT_CHIMNEY_OFFLOAD_CHARACTERISTICS: UCHAR = 0x93;
pub const NDIS_OBJECT_TYPE_PROVIDER_CHIMNEY_OFFLOAD_CHARACTERISTICS: UCHAR = 0x94;
pub const NDIS_OBJECT_TYPE_PROTOCOL_DRIVER_CHARACTERISTICS: UCHAR = 0x95;
pub const NDIS_OBJECT_TYPE_REQUEST_EX: UCHAR = 0x96;
pub const NDIS_OBJECT_TYPE_OID_REQUEST: UCHAR = 0x96;
pub const NDIS_OBJECT_TYPE_TIMER_CHARACTERISTICS: UCHAR = 0x97;
pub const NDIS_OBJECT_TYPE_STATUS_INDICATION: UCHAR = 0x98;
pub const NDIS_OBJECT_TYPE_FILTER_ATTACH_PARAMETERS: UCHAR = 0x99;
pub const NDIS_OBJECT_TYPE_FILTER_PAUSE_PARAMETERS: UCHAR = 0x9A;
pub const NDIS_OBJECT_TYPE_FILTER_RESTART_PARAMETERS: UCHAR = 0x9B;
pub const NDIS_OBJECT_TYPE_PORT_CHARACTERISTICS: UCHAR = 0x9C;
pub const NDIS_OBJECT_TYPE_PORT_STATE: UCHAR = 0x9D;
pub const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES: UCHAR = 0x9E;
pub const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES: UCHAR = 0x9F;
pub const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES: UCHAR = 0xA0;
pub const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES: UCHAR = 0xA1;
pub const NDIS_OBJECT_TYPE_RESTART_GENERAL_ATTRIBUTES: UCHAR = 0xA2;
pub const NDIS_OBJECT_TYPE_PROTOCOL_RESTART_PARAMETERS: UCHAR = 0xA3;
pub const NDIS_OBJECT_TYPE_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES: UCHAR = 0xA4;
pub const NDIS_OBJECT_TYPE_CO_CALL_MANAGER_OPTIONAL_HANDLERS: UCHAR = 0xA5;
pub const NDIS_OBJECT_TYPE_CO_CLIENT_OPTIONAL_HANDLERS: UCHAR = 0xA6;
pub const NDIS_OBJECT_TYPE_OFFLOAD: UCHAR = 0xA7;
pub const NDIS_OBJECT_TYPE_OFFLOAD_ENCAPSULATION: UCHAR = 0xA8;
pub const NDIS_OBJECT_TYPE_CONFIGURATION_OBJECT: UCHAR = 0xA9;
pub const NDIS_OBJECT_TYPE_DRIVER_WRAPPER_OBJECT: UCHAR = 0xAA;
pub const NDIS_OBJECT_TYPE_HD_SPLIT_ATTRIBUTES: UCHAR = 0xAB;
pub const NDIS_OBJECT_TYPE_NSI_NETWORK_RW_STRUCT: UCHAR = 0xAC;
pub const NDIS_OBJECT_TYPE_NSI_COMPARTMENT_RW_STRUCT: UCHAR = 0xAD;
pub const NDIS_OBJECT_TYPE_NSI_INTERFACE_PERSIST_RW_STRUCT: UCHAR = 0xAE;
pub const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_HARDWARE_ASSIST_ATTRIBUTES: UCHAR = 0xAF;
pub const NDIS_OBJECT_TYPE_SHARED_MEMORY_PROVIDER_CHARACTERISTICS: UCHAR = 0xB0;
pub const NDIS_OBJECT_TYPE_RSS_PROCESSOR_INFO: UCHAR = 0xB1;
pub const NDIS_OBJECT_TYPE_NDK_PROVIDER_CHARACTERISTICS: UCHAR = 0xB2;
pub const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_NDK_ATTRIBUTES: UCHAR = 0xB3;
pub const NDIS_OBJECT_TYPE_MINIPORT_SS_CHARACTERISTICS: UCHAR = 0xB4;
pub const NDIS_OBJECT_TYPE_QOS_CAPABILITIES: UCHAR = 0xB5;
pub const NDIS_OBJECT_TYPE_QOS_PARAMETERS: UCHAR = 0xB6;
pub const NDIS_OBJECT_TYPE_QOS_CLASSIFICATION_ELEMENT: UCHAR = 0xB7;
pub const NDIS_OBJECT_TYPE_SWITCH_OPTIONAL_HANDLERS: UCHAR = 0xB8;
pub const NDIS_OBJECT_TYPE_PD_TRANSMIT_QUEUE: UCHAR = 0xBE;
pub const NDIS_OBJECT_TYPE_PD_RECEIVE_QUEUE: UCHAR = 0xBF;
pub const NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_PACKET_DIRECT_ATTRIBUTES: UCHAR = 0xC5;
pub const NDIS_OBJECT_TYPE_MINIPORT_DEVICE_POWER_NOTIFICATION: UCHAR = 0xC6;
STRUCT!{struct NDIS_OBJECT_HEADER {
    Type: UCHAR,
    Revision: UCHAR,
    Size: USHORT,
}}
pub type PNDIS_OBJECT_HEADER = *mut NDIS_OBJECT_HEADER;
pub const NDIS_OBJECT_REVISION_1: UCHAR = 1;
ENUM!{enum NDIS_REQUEST_TYPE {
    NdisRequestQueryInformation,
    NdisRequestSetInformation,
    NdisRequestQueryStatistics,
    NdisRequestOpen,
    NdisRequestClose,
    NdisRequestSend,
    NdisRequestTransferData,
    NdisRequestReset,
    NdisRequestGeneric1,
    NdisRequestGeneric2,
    NdisRequestGeneric3,
    NdisRequestGeneric4,
    NdisRequestMethod,
}}
pub type PNDIS_REQUEST_TYPE = *mut NDIS_REQUEST_TYPE;
pub const NDIS_STATISTICS_FLAGS_VALID_DIRECTED_FRAMES_RCV: ULONG = 0x00000001;
pub const NDIS_STATISTICS_FLAGS_VALID_MULTICAST_FRAMES_RCV: ULONG = 0x00000002;
pub const NDIS_STATISTICS_FLAGS_VALID_BROADCAST_FRAMES_RCV: ULONG = 0x00000004;
pub const NDIS_STATISTICS_FLAGS_VALID_BYTES_RCV: ULONG = 0x00000008;
pub const NDIS_STATISTICS_FLAGS_VALID_RCV_DISCARDS: ULONG = 0x00000010;
pub const NDIS_STATISTICS_FLAGS_VALID_RCV_ERROR: ULONG = 0x00000020;
pub const NDIS_STATISTICS_FLAGS_VALID_DIRECTED_FRAMES_XMIT: ULONG = 0x00000040;
pub const NDIS_STATISTICS_FLAGS_VALID_MULTICAST_FRAMES_XMIT: ULONG = 0x00000080;
pub const NDIS_STATISTICS_FLAGS_VALID_BROADCAST_FRAMES_XMIT: ULONG = 0x00000100;
pub const NDIS_STATISTICS_FLAGS_VALID_BYTES_XMIT: ULONG = 0x00000200;
pub const NDIS_STATISTICS_FLAGS_VALID_XMIT_ERROR: ULONG = 0x00000400;
pub const NDIS_STATISTICS_FLAGS_VALID_XMIT_DISCARDS: ULONG = 0x00008000;
pub const NDIS_STATISTICS_FLAGS_VALID_DIRECTED_BYTES_RCV: ULONG = 0x00010000;
pub const NDIS_STATISTICS_FLAGS_VALID_MULTICAST_BYTES_RCV: ULONG = 0x00020000;
pub const NDIS_STATISTICS_FLAGS_VALID_BROADCAST_BYTES_RCV: ULONG = 0x00040000;
pub const NDIS_STATISTICS_FLAGS_VALID_DIRECTED_BYTES_XMIT: ULONG = 0x00080000;
pub const NDIS_STATISTICS_FLAGS_VALID_MULTICAST_BYTES_XMIT: ULONG = 0x00100000;
pub const NDIS_STATISTICS_FLAGS_VALID_BROADCAST_BYTES_XMIT: ULONG = 0x00200000;
STRUCT!{struct NDIS_STATISTICS_INFO {
    Header: NDIS_OBJECT_HEADER,
    SupportedStatistics: ULONG,
    ifInDiscards: ULONG64,
    ifInErrors: ULONG64,
    ifHCInOctets: ULONG64,
    ifHCInUcastPkts: ULONG64,
    ifHCInMulticastPkts: ULONG64,
    ifHCInBroadcastPkts: ULONG64,
    ifHCOutOctets: ULONG64,
    ifHCOutUcastPkts: ULONG64,
    ifHCOutMulticastPkts: ULONG64,
    ifHCOutBroadcastPkts: ULONG64,
    ifOutErrors: ULONG64,
    ifOutDiscards: ULONG64,
    ifHCInUcastOctets: ULONG64,
    ifHCInMulticastOctets: ULONG64,
    ifHCInBroadcastOctets: ULONG64,
    ifHCOutUcastOctets: ULONG64,
    ifHCOutMulticastOctets: ULONG64,
    ifHCOutBroadcastOctets: ULONG64,
}}
pub type PNDIS_STATISTICS_INFO = *mut NDIS_STATISTICS_INFO;
STRUCT!{struct NDIS_RSC_STATISTICS_INFO {
    Header: NDIS_OBJECT_HEADER,
    CoalescedPkts: ULONG64,
    CoalescedOctets: ULONG64,
    CoalesceEvents: ULONG64,
    Aborts: ULONG64,
}}
pub type PNDIS_RSC_STATISTICS_INFO = *mut NDIS_RSC_STATISTICS_INFO;
pub const NDIS_RSC_STATISTICS_REVISION_1: UCHAR = 1;
ENUM!{enum NDIS_INTERRUPT_MODERATION {
    NdisInterruptModerationUnknown,
    NdisInterruptModerationNotSupported,
    NdisInterruptModerationEnabled,
    NdisInterruptModerationDisabled,
}}
pub type PNDIS_INTERRUPT_MODERATION = *mut NDIS_INTERRUPT_MODERATION;
pub const NDIS_INTERRUPT_MODERATION_CHANGE_NEEDS_RESET: ULONG = 0x00000001;
pub const NDIS_INTERRUPT_MODERATION_CHANGE_NEEDS_REINITIALIZE: ULONG = 0x00000002;
pub const NDIS_INTERRUPT_MODERATION_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_INTERRUPT_MODERATION_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    InterruptModeration: NDIS_INTERRUPT_MODERATION,
}}
pub type PNDIS_INTERRUPT_MODERATION_PARAMETERS = *mut NDIS_INTERRUPT_MODERATION_PARAMETERS;
pub const NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TimeoutArrayLength: ULONG,
    TimeoutArray: [ULONG; 1],
}}
pub type PNDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES = *mut NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES;
pub const NDIS_OBJECT_TYPE_PCI_DEVICE_CUSTOM_PROPERTIES_REVISION_1: UCHAR = 1;
pub const NDIS_OBJECT_TYPE_PCI_DEVICE_CUSTOM_PROPERTIES_REVISION_2: UCHAR = 2;
STRUCT!{struct NDIS_PCI_DEVICE_CUSTOM_PROPERTIES {
    Header: NDIS_OBJECT_HEADER,
    DeviceType: UINT32,
    CurrentSpeedAndMode: UINT32,
    CurrentPayloadSize: UINT32,
    MaxPayloadSize: UINT32,
    MaxReadRequestSize: UINT32,
    CurrentLinkSpeed: UINT32,
    CurrentLinkWidth: UINT32,
    MaxLinkSpeed: UINT32,
    MaxLinkWidth: UINT32,
    PciExpressVersion: UINT32,
    InterruptType: UINT32,
    MaxInterruptMessages: UINT32,
}}
pub type PNDIS_PCI_DEVICE_CUSTOM_PROPERTIES = *mut NDIS_PCI_DEVICE_CUSTOM_PROPERTIES;
pub const OID_GEN_SUPPORTED_LIST: NET_IF_OBJECT_ID = 0x00010101;
pub const OID_GEN_HARDWARE_STATUS: NET_IF_OBJECT_ID = 0x00010102;
pub const OID_GEN_MEDIA_SUPPORTED: NET_IF_OBJECT_ID = 0x00010103;
pub const OID_GEN_MEDIA_IN_USE: NET_IF_OBJECT_ID = 0x00010104;
pub const OID_GEN_MAXIMUM_LOOKAHEAD: NET_IF_OBJECT_ID = 0x00010105;
pub const OID_GEN_MAXIMUM_FRAME_SIZE: NET_IF_OBJECT_ID = 0x00010106;
pub const OID_GEN_LINK_SPEED: NET_IF_OBJECT_ID = 0x00010107;
pub const OID_GEN_TRANSMIT_BUFFER_SPACE: NET_IF_OBJECT_ID = 0x00010108;
pub const OID_GEN_RECEIVE_BUFFER_SPACE: NET_IF_OBJECT_ID = 0x00010109;
pub const OID_GEN_TRANSMIT_BLOCK_SIZE: NET_IF_OBJECT_ID = 0x0001010A;
pub const OID_GEN_RECEIVE_BLOCK_SIZE: NET_IF_OBJECT_ID = 0x0001010B;
pub const OID_GEN_VENDOR_ID: NET_IF_OBJECT_ID = 0x0001010C;
pub const OID_GEN_VENDOR_DESCRIPTION: NET_IF_OBJECT_ID = 0x0001010D;
pub const OID_GEN_CURRENT_PACKET_FILTER: NET_IF_OBJECT_ID = 0x0001010E;
pub const OID_GEN_CURRENT_LOOKAHEAD: NET_IF_OBJECT_ID = 0x0001010F;
pub const OID_GEN_DRIVER_VERSION: NET_IF_OBJECT_ID = 0x00010110;
pub const OID_GEN_MAXIMUM_TOTAL_SIZE: NET_IF_OBJECT_ID = 0x00010111;
pub const OID_GEN_PROTOCOL_OPTIONS: NET_IF_OBJECT_ID = 0x00010112;
pub const OID_GEN_MAC_OPTIONS: NET_IF_OBJECT_ID = 0x00010113;
pub const OID_GEN_MEDIA_CONNECT_STATUS: NET_IF_OBJECT_ID = 0x00010114;
pub const OID_GEN_MAXIMUM_SEND_PACKETS: NET_IF_OBJECT_ID = 0x00010115;
pub const OID_GEN_VENDOR_DRIVER_VERSION: NET_IF_OBJECT_ID = 0x00010116;
pub const OID_GEN_SUPPORTED_GUIDS: NET_IF_OBJECT_ID = 0x00010117;
pub const OID_GEN_NETWORK_LAYER_ADDRESSES: NET_IF_OBJECT_ID = 0x00010118;
pub const OID_GEN_TRANSPORT_HEADER_OFFSET: NET_IF_OBJECT_ID = 0x00010119;
pub const OID_GEN_MEDIA_CAPABILITIES: NET_IF_OBJECT_ID = 0x00010201;
pub const OID_GEN_PHYSICAL_MEDIUM: NET_IF_OBJECT_ID = 0x00010202;
pub const OID_GEN_RECEIVE_SCALE_CAPABILITIES: NET_IF_OBJECT_ID = 0x00010203;
pub const OID_GEN_RECEIVE_SCALE_PARAMETERS: NET_IF_OBJECT_ID = 0x00010204;
pub const OID_GEN_MAC_ADDRESS: NET_IF_OBJECT_ID = 0x00010205;
pub const OID_GEN_MAX_LINK_SPEED: NET_IF_OBJECT_ID = 0x00010206;
pub const OID_GEN_LINK_STATE: NET_IF_OBJECT_ID = 0x00010207;
pub const OID_GEN_LINK_PARAMETERS: NET_IF_OBJECT_ID = 0x00010208;
pub const OID_GEN_INTERRUPT_MODERATION: NET_IF_OBJECT_ID = 0x00010209;
pub const OID_GEN_NDIS_RESERVED_3: NET_IF_OBJECT_ID = 0x0001020A;
pub const OID_GEN_NDIS_RESERVED_4: NET_IF_OBJECT_ID = 0x0001020B;
pub const OID_GEN_NDIS_RESERVED_5: NET_IF_OBJECT_ID = 0x0001020C;
pub const OID_GEN_ENUMERATE_PORTS: NET_IF_OBJECT_ID = 0x0001020D;
pub const OID_GEN_PORT_STATE: NET_IF_OBJECT_ID = 0x0001020E;
pub const OID_GEN_PORT_AUTHENTICATION_PARAMETERS: NET_IF_OBJECT_ID = 0x0001020F;
pub const OID_GEN_TIMEOUT_DPC_REQUEST_CAPABILITIES: NET_IF_OBJECT_ID = 0x00010210;
pub const OID_GEN_PCI_DEVICE_CUSTOM_PROPERTIES: NET_IF_OBJECT_ID = 0x00010211;
pub const OID_GEN_NDIS_RESERVED_6: NET_IF_OBJECT_ID = 0x00010212;
pub const OID_GEN_PHYSICAL_MEDIUM_EX: NET_IF_OBJECT_ID = 0x00010213;
pub const OID_GEN_MACHINE_NAME: NET_IF_OBJECT_ID = 0x0001021A;
pub const OID_GEN_RNDIS_CONFIG_PARAMETER: NET_IF_OBJECT_ID = 0x0001021B;
pub const OID_GEN_VLAN_ID: NET_IF_OBJECT_ID = 0x0001021C;
pub const OID_GEN_RECEIVE_HASH: NET_IF_OBJECT_ID = 0x0001021F;
pub const OID_GEN_MINIPORT_RESTART_ATTRIBUTES: NET_IF_OBJECT_ID = 0x0001021D;
pub const OID_GEN_HD_SPLIT_PARAMETERS: NET_IF_OBJECT_ID = 0x0001021E;
pub const OID_GEN_HD_SPLIT_CURRENT_CONFIG: NET_IF_OBJECT_ID = 0x00010220;
pub const OID_GEN_PROMISCUOUS_MODE: NET_IF_OBJECT_ID = 0x00010280;
pub const OID_GEN_LAST_CHANGE: NET_IF_OBJECT_ID = 0x00010281;
pub const OID_GEN_DISCONTINUITY_TIME: NET_IF_OBJECT_ID = 0x00010282;
pub const OID_GEN_OPERATIONAL_STATUS: NET_IF_OBJECT_ID = 0x00010283;
pub const OID_GEN_XMIT_LINK_SPEED: NET_IF_OBJECT_ID = 0x00010284;
pub const OID_GEN_RCV_LINK_SPEED: NET_IF_OBJECT_ID = 0x00010285;
pub const OID_GEN_UNKNOWN_PROTOS: NET_IF_OBJECT_ID = 0x00010286;
pub const OID_GEN_INTERFACE_INFO: NET_IF_OBJECT_ID = 0x00010287;
pub const OID_GEN_ADMIN_STATUS: NET_IF_OBJECT_ID = 0x00010288;
pub const OID_GEN_ALIAS: NET_IF_OBJECT_ID = 0x00010289;
pub const OID_GEN_MEDIA_CONNECT_STATUS_EX: NET_IF_OBJECT_ID = 0x0001028A;
pub const OID_GEN_LINK_SPEED_EX: NET_IF_OBJECT_ID = 0x0001028B;
pub const OID_GEN_MEDIA_DUPLEX_STATE: NET_IF_OBJECT_ID = 0x0001028C;
pub const OID_GEN_IP_OPER_STATUS: NET_IF_OBJECT_ID = 0x0001028D;
pub const OID_WWAN_DRIVER_CAPS: NET_IF_OBJECT_ID = 0x0e010100;
pub const OID_WWAN_DEVICE_CAPS: NET_IF_OBJECT_ID = 0x0e010101;
pub const OID_WWAN_READY_INFO: NET_IF_OBJECT_ID = 0x0e010102;
pub const OID_WWAN_RADIO_STATE: NET_IF_OBJECT_ID = 0x0e010103;
pub const OID_WWAN_PIN: NET_IF_OBJECT_ID = 0x0e010104;
pub const OID_WWAN_PIN_LIST: NET_IF_OBJECT_ID = 0x0e010105;
pub const OID_WWAN_HOME_PROVIDER: NET_IF_OBJECT_ID = 0x0e010106;
pub const OID_WWAN_PREFERRED_PROVIDERS: NET_IF_OBJECT_ID = 0x0e010107;
pub const OID_WWAN_VISIBLE_PROVIDERS: NET_IF_OBJECT_ID = 0x0e010108;
pub const OID_WWAN_REGISTER_STATE: NET_IF_OBJECT_ID = 0x0e010109;
pub const OID_WWAN_PACKET_SERVICE: NET_IF_OBJECT_ID = 0x0e01010a;
pub const OID_WWAN_SIGNAL_STATE: NET_IF_OBJECT_ID = 0x0e01010b;
pub const OID_WWAN_CONNECT: NET_IF_OBJECT_ID = 0x0e01010c;
pub const OID_WWAN_PROVISIONED_CONTEXTS: NET_IF_OBJECT_ID = 0x0e01010d;
pub const OID_WWAN_SERVICE_ACTIVATION: NET_IF_OBJECT_ID = 0x0e01010e;
pub const OID_WWAN_SMS_CONFIGURATION: NET_IF_OBJECT_ID = 0x0e01010f;
pub const OID_WWAN_SMS_READ: NET_IF_OBJECT_ID = 0x0e010110;
pub const OID_WWAN_SMS_SEND: NET_IF_OBJECT_ID = 0x0e010111;
pub const OID_WWAN_SMS_DELETE: NET_IF_OBJECT_ID = 0x0e010112;
pub const OID_WWAN_SMS_STATUS: NET_IF_OBJECT_ID = 0x0e010113;
pub const OID_WWAN_VENDOR_SPECIFIC: NET_IF_OBJECT_ID = 0x0e010114;
pub const OID_WWAN_AUTH_CHALLENGE: NET_IF_OBJECT_ID = 0x0e010115;
pub const OID_WWAN_ENUMERATE_DEVICE_SERVICES: NET_IF_OBJECT_ID = 0x0e010116;
pub const OID_WWAN_SUBSCRIBE_DEVICE_SERVICE_EVENTS: NET_IF_OBJECT_ID = 0x0e010117;
pub const OID_WWAN_DEVICE_SERVICE_COMMAND: NET_IF_OBJECT_ID = 0x0e010118;
pub const OID_WWAN_USSD: NET_IF_OBJECT_ID = 0x0e010119;
pub const OID_WWAN_PIN_EX: NET_IF_OBJECT_ID = 0x0e010121;
pub const OID_WWAN_ENUMERATE_DEVICE_SERVICE_COMMANDS: NET_IF_OBJECT_ID = 0x0e010122;
pub const OID_WWAN_DEVICE_SERVICE_SESSION: NET_IF_OBJECT_ID = 0x0e010123;
pub const OID_WWAN_DEVICE_SERVICE_SESSION_WRITE: NET_IF_OBJECT_ID = 0x0e010124;
pub const OID_WWAN_PREFERRED_MULTICARRIER_PROVIDERS: NET_IF_OBJECT_ID = 0x0e010125;
pub const OID_WWAN_CREATE_MAC: NET_IF_OBJECT_ID = 0x0e010126;
pub const OID_WWAN_DELETE_MAC: NET_IF_OBJECT_ID = 0x0e010127;
pub const OID_WWAN_UICC_FILE_STATUS: NET_IF_OBJECT_ID = 0x0e010128;
pub const OID_WWAN_UICC_ACCESS_BINARY: NET_IF_OBJECT_ID = 0x0e010129;
pub const OID_WWAN_UICC_ACCESS_RECORD: NET_IF_OBJECT_ID = 0x0e01012a;
pub const OID_WWAN_PIN_EX2: NET_IF_OBJECT_ID = 0x0e01012b;
pub const OID_WWAN_MBIM_VERSION: NET_IF_OBJECT_ID = 0x0e01012c;
pub const OID_WWAN_SYS_CAPS: NET_IF_OBJECT_ID = 0x0e01012d;
pub const OID_WWAN_DEVICE_CAPS_EX: NET_IF_OBJECT_ID = 0x0e01012e;
pub const OID_WWAN_SYS_SLOTMAPPINGS: NET_IF_OBJECT_ID = 0x0e01012f;
pub const OID_WWAN_SLOT_INFO_STATUS: NET_IF_OBJECT_ID = 0x0e010130;
pub const OID_WWAN_DEVICE_BINDINGS: NET_IF_OBJECT_ID = 0x0e010131;
pub const OID_WWAN_REGISTER_STATE_EX: NET_IF_OBJECT_ID = 0x0e010132;
pub const OID_WWAN_IMS_VOICE_STATE: NET_IF_OBJECT_ID = 0x0e010133;
pub const OID_WWAN_SIGNAL_STATE_EX: NET_IF_OBJECT_ID = 0x0e010134;
pub const OID_WWAN_LOCATION_STATE: NET_IF_OBJECT_ID = 0x0e010135;
pub const OID_WWAN_NITZ: NET_IF_OBJECT_ID = 0x0e010136;
pub const OID_WWAN_NETWORK_IDLE_HINT: NET_IF_OBJECT_ID = 0x0e010137;
pub const OID_WWAN_PRESHUTDOWN: NET_IF_OBJECT_ID = 0x0e010138;
pub const OID_WWAN_UICC_ATR: NET_IF_OBJECT_ID = 0x0e010139;
pub const OID_WWAN_UICC_OPEN_CHANNEL: NET_IF_OBJECT_ID = 0x0e01013a;
pub const OID_WWAN_UICC_CLOSE_CHANNEL: NET_IF_OBJECT_ID = 0x0e01013b;
pub const OID_WWAN_UICC_APDU: NET_IF_OBJECT_ID = 0x0e01013c;
pub const OID_WWAN_UICC_TERMINAL_CAPABILITY: NET_IF_OBJECT_ID = 0x0e01013d;
pub const OID_WWAN_PS_MEDIA_CONFIG: NET_IF_OBJECT_ID = 0x0e01013e;
pub const OID_WWAN_SAR_CONFIG: NET_IF_OBJECT_ID = 0x0e01013f;
pub const OID_WWAN_SAR_TRANSMISSION_STATUS: NET_IF_OBJECT_ID = 0x0e010140;
pub const OID_WWAN_NETWORK_BLACKLIST: NET_IF_OBJECT_ID = 0x0e010141;
pub const OID_WWAN_LTE_ATTACH_CONFIG: NET_IF_OBJECT_ID = 0x0e010142;
pub const OID_WWAN_LTE_ATTACH_STATUS: NET_IF_OBJECT_ID = 0x0e010143;
pub const OID_GEN_XMIT_OK: NET_IF_OBJECT_ID = 0x00020101;
pub const OID_GEN_RCV_OK: NET_IF_OBJECT_ID = 0x00020102;
pub const OID_GEN_XMIT_ERROR: NET_IF_OBJECT_ID = 0x00020103;
pub const OID_GEN_RCV_ERROR: NET_IF_OBJECT_ID = 0x00020104;
pub const OID_GEN_RCV_NO_BUFFER: NET_IF_OBJECT_ID = 0x00020105;
pub const OID_GEN_STATISTICS: NET_IF_OBJECT_ID = 0x00020106;
pub const OID_GEN_DIRECTED_BYTES_XMIT: NET_IF_OBJECT_ID = 0x00020201;
pub const OID_GEN_DIRECTED_FRAMES_XMIT: NET_IF_OBJECT_ID = 0x00020202;
pub const OID_GEN_MULTICAST_BYTES_XMIT: NET_IF_OBJECT_ID = 0x00020203;
pub const OID_GEN_MULTICAST_FRAMES_XMIT: NET_IF_OBJECT_ID = 0x00020204;
pub const OID_GEN_BROADCAST_BYTES_XMIT: NET_IF_OBJECT_ID = 0x00020205;
pub const OID_GEN_BROADCAST_FRAMES_XMIT: NET_IF_OBJECT_ID = 0x00020206;
pub const OID_GEN_DIRECTED_BYTES_RCV: NET_IF_OBJECT_ID = 0x00020207;
pub const OID_GEN_DIRECTED_FRAMES_RCV: NET_IF_OBJECT_ID = 0x00020208;
pub const OID_GEN_MULTICAST_BYTES_RCV: NET_IF_OBJECT_ID = 0x00020209;
pub const OID_GEN_MULTICAST_FRAMES_RCV: NET_IF_OBJECT_ID = 0x0002020A;
pub const OID_GEN_BROADCAST_BYTES_RCV: NET_IF_OBJECT_ID = 0x0002020B;
pub const OID_GEN_BROADCAST_FRAMES_RCV: NET_IF_OBJECT_ID = 0x0002020C;
pub const OID_GEN_RCV_CRC_ERROR: NET_IF_OBJECT_ID = 0x0002020D;
pub const OID_GEN_TRANSMIT_QUEUE_LENGTH: NET_IF_OBJECT_ID = 0x0002020E;
pub const OID_GEN_GET_TIME_CAPS: NET_IF_OBJECT_ID = 0x0002020F;
pub const OID_GEN_GET_NETCARD_TIME: NET_IF_OBJECT_ID = 0x00020210;
pub const OID_GEN_NETCARD_LOAD: NET_IF_OBJECT_ID = 0x00020211;
pub const OID_GEN_DEVICE_PROFILE: NET_IF_OBJECT_ID = 0x00020212;
pub const OID_GEN_INIT_TIME_MS: NET_IF_OBJECT_ID = 0x00020213;
pub const OID_GEN_RESET_COUNTS: NET_IF_OBJECT_ID = 0x00020214;
pub const OID_GEN_MEDIA_SENSE_COUNTS: NET_IF_OBJECT_ID = 0x00020215;
pub const OID_GEN_FRIENDLY_NAME: NET_IF_OBJECT_ID = 0x00020216;
pub const OID_GEN_NDIS_RESERVED_1: NET_IF_OBJECT_ID = 0x00020217;
pub const OID_GEN_NDIS_RESERVED_2: NET_IF_OBJECT_ID = 0x00020218;
pub const OID_GEN_BYTES_RCV: NET_IF_OBJECT_ID = 0x00020219;
pub const OID_GEN_BYTES_XMIT: NET_IF_OBJECT_ID = 0x0002021A;
pub const OID_GEN_RCV_DISCARDS: NET_IF_OBJECT_ID = 0x0002021B;
pub const OID_GEN_XMIT_DISCARDS: NET_IF_OBJECT_ID = 0x0002021C;
pub const OID_TCP_RSC_STATISTICS: NET_IF_OBJECT_ID = 0x0002021D;
pub const OID_GEN_NDIS_RESERVED_7: NET_IF_OBJECT_ID = 0x0002021E;
pub const OID_GEN_CO_SUPPORTED_LIST: NET_IF_OBJECT_ID = OID_GEN_SUPPORTED_LIST;
pub const OID_GEN_CO_HARDWARE_STATUS: NET_IF_OBJECT_ID = OID_GEN_HARDWARE_STATUS;
pub const OID_GEN_CO_MEDIA_SUPPORTED: NET_IF_OBJECT_ID = OID_GEN_MEDIA_SUPPORTED;
pub const OID_GEN_CO_MEDIA_IN_USE: NET_IF_OBJECT_ID = OID_GEN_MEDIA_IN_USE;
pub const OID_GEN_CO_LINK_SPEED: NET_IF_OBJECT_ID = OID_GEN_LINK_SPEED;
pub const OID_GEN_CO_VENDOR_ID: NET_IF_OBJECT_ID = OID_GEN_VENDOR_ID;
pub const OID_GEN_CO_VENDOR_DESCRIPTION: NET_IF_OBJECT_ID = OID_GEN_VENDOR_DESCRIPTION;
pub const OID_GEN_CO_DRIVER_VERSION: NET_IF_OBJECT_ID = OID_GEN_DRIVER_VERSION;
pub const OID_GEN_CO_PROTOCOL_OPTIONS: NET_IF_OBJECT_ID = OID_GEN_PROTOCOL_OPTIONS;
pub const OID_GEN_CO_MAC_OPTIONS: NET_IF_OBJECT_ID = OID_GEN_MAC_OPTIONS;
pub const OID_GEN_CO_MEDIA_CONNECT_STATUS: NET_IF_OBJECT_ID = OID_GEN_MEDIA_CONNECT_STATUS;
pub const OID_GEN_CO_VENDOR_DRIVER_VERSION: NET_IF_OBJECT_ID = OID_GEN_VENDOR_DRIVER_VERSION;
pub const OID_GEN_CO_SUPPORTED_GUIDS: NET_IF_OBJECT_ID = OID_GEN_SUPPORTED_GUIDS;
pub const OID_GEN_CO_GET_TIME_CAPS: NET_IF_OBJECT_ID = OID_GEN_GET_TIME_CAPS;
pub const OID_GEN_CO_GET_NETCARD_TIME: NET_IF_OBJECT_ID = OID_GEN_GET_NETCARD_TIME;
pub const OID_GEN_CO_MINIMUM_LINK_SPEED: NET_IF_OBJECT_ID = 0x00020120;
pub const OID_GEN_CO_XMIT_PDUS_OK: NET_IF_OBJECT_ID = OID_GEN_XMIT_OK;
pub const OID_GEN_CO_RCV_PDUS_OK: NET_IF_OBJECT_ID = OID_GEN_RCV_OK;
pub const OID_GEN_CO_XMIT_PDUS_ERROR: NET_IF_OBJECT_ID = OID_GEN_XMIT_ERROR;
pub const OID_GEN_CO_RCV_PDUS_ERROR: NET_IF_OBJECT_ID = OID_GEN_RCV_ERROR;
pub const OID_GEN_CO_RCV_PDUS_NO_BUFFER: NET_IF_OBJECT_ID = OID_GEN_RCV_NO_BUFFER;
pub const OID_GEN_CO_RCV_CRC_ERROR: NET_IF_OBJECT_ID = OID_GEN_RCV_CRC_ERROR;
pub const OID_GEN_CO_TRANSMIT_QUEUE_LENGTH: NET_IF_OBJECT_ID = OID_GEN_TRANSMIT_QUEUE_LENGTH;
pub const OID_GEN_CO_BYTES_XMIT: NET_IF_OBJECT_ID = OID_GEN_DIRECTED_BYTES_XMIT;
pub const OID_GEN_CO_BYTES_RCV: NET_IF_OBJECT_ID = OID_GEN_DIRECTED_BYTES_RCV;
pub const OID_GEN_CO_NETCARD_LOAD: NET_IF_OBJECT_ID = OID_GEN_NETCARD_LOAD;
pub const OID_GEN_CO_DEVICE_PROFILE: NET_IF_OBJECT_ID = OID_GEN_DEVICE_PROFILE;
pub const OID_GEN_CO_BYTES_XMIT_OUTSTANDING: NET_IF_OBJECT_ID = 0x00020221;
pub const OID_802_3_PERMANENT_ADDRESS: NET_IF_OBJECT_ID = 0x01010101;
pub const OID_802_3_CURRENT_ADDRESS: NET_IF_OBJECT_ID = 0x01010102;
pub const OID_802_3_MULTICAST_LIST: NET_IF_OBJECT_ID = 0x01010103;
pub const OID_802_3_MAXIMUM_LIST_SIZE: NET_IF_OBJECT_ID = 0x01010104;
pub const OID_802_3_MAC_OPTIONS: NET_IF_OBJECT_ID = 0x01010105;
pub const NDIS_802_3_MAC_OPTION_PRIORITY: NET_IF_OBJECT_ID = 0x00000001;
pub const OID_802_3_RCV_ERROR_ALIGNMENT: NET_IF_OBJECT_ID = 0x01020101;
pub const OID_802_3_XMIT_ONE_COLLISION: NET_IF_OBJECT_ID = 0x01020102;
pub const OID_802_3_XMIT_MORE_COLLISIONS: NET_IF_OBJECT_ID = 0x01020103;
pub const OID_802_3_XMIT_DEFERRED: NET_IF_OBJECT_ID = 0x01020201;
pub const OID_802_3_XMIT_MAX_COLLISIONS: NET_IF_OBJECT_ID = 0x01020202;
pub const OID_802_3_RCV_OVERRUN: NET_IF_OBJECT_ID = 0x01020203;
pub const OID_802_3_XMIT_UNDERRUN: NET_IF_OBJECT_ID = 0x01020204;
pub const OID_802_3_XMIT_HEARTBEAT_FAILURE: NET_IF_OBJECT_ID = 0x01020205;
pub const OID_802_3_XMIT_TIMES_CRS_LOST: NET_IF_OBJECT_ID = 0x01020206;
pub const OID_802_3_XMIT_LATE_COLLISIONS: NET_IF_OBJECT_ID = 0x01020207;
pub const OID_802_3_ADD_MULTICAST_ADDRESS: NET_IF_OBJECT_ID = 0x01010208;
pub const OID_802_3_DELETE_MULTICAST_ADDRESS: NET_IF_OBJECT_ID = 0x01010209;
pub const OID_802_5_PERMANENT_ADDRESS: NET_IF_OBJECT_ID = 0x02010101;
pub const OID_802_5_CURRENT_ADDRESS: NET_IF_OBJECT_ID = 0x02010102;
pub const OID_802_5_CURRENT_FUNCTIONAL: NET_IF_OBJECT_ID = 0x02010103;
pub const OID_802_5_CURRENT_GROUP: NET_IF_OBJECT_ID = 0x02010104;
pub const OID_802_5_LAST_OPEN_STATUS: NET_IF_OBJECT_ID = 0x02010105;
pub const OID_802_5_CURRENT_RING_STATUS: NET_IF_OBJECT_ID = 0x02010106;
pub const OID_802_5_CURRENT_RING_STATE: NET_IF_OBJECT_ID = 0x02010107;
pub const OID_802_5_LINE_ERRORS: NET_IF_OBJECT_ID = 0x02020101;
pub const OID_802_5_LOST_FRAMES: NET_IF_OBJECT_ID = 0x02020102;
pub const OID_802_5_BURST_ERRORS: NET_IF_OBJECT_ID = 0x02020201;
pub const OID_802_5_AC_ERRORS: NET_IF_OBJECT_ID = 0x02020202;
pub const OID_802_5_ABORT_DELIMETERS: NET_IF_OBJECT_ID = 0x02020203;
pub const OID_802_5_FRAME_COPIED_ERRORS: NET_IF_OBJECT_ID = 0x02020204;
pub const OID_802_5_FREQUENCY_ERRORS: NET_IF_OBJECT_ID = 0x02020205;
pub const OID_802_5_TOKEN_ERRORS: NET_IF_OBJECT_ID = 0x02020206;
pub const OID_802_5_INTERNAL_ERRORS: NET_IF_OBJECT_ID = 0x02020207;
pub const OID_FDDI_LONG_PERMANENT_ADDR: NET_IF_OBJECT_ID = 0x03010101;
pub const OID_FDDI_LONG_CURRENT_ADDR: NET_IF_OBJECT_ID = 0x03010102;
pub const OID_FDDI_LONG_MULTICAST_LIST: NET_IF_OBJECT_ID = 0x03010103;
pub const OID_FDDI_LONG_MAX_LIST_SIZE: NET_IF_OBJECT_ID = 0x03010104;
pub const OID_FDDI_SHORT_PERMANENT_ADDR: NET_IF_OBJECT_ID = 0x03010105;
pub const OID_FDDI_SHORT_CURRENT_ADDR: NET_IF_OBJECT_ID = 0x03010106;
pub const OID_FDDI_SHORT_MULTICAST_LIST: NET_IF_OBJECT_ID = 0x03010107;
pub const OID_FDDI_SHORT_MAX_LIST_SIZE: NET_IF_OBJECT_ID = 0x03010108;
pub const OID_FDDI_ATTACHMENT_TYPE: NET_IF_OBJECT_ID = 0x03020101;
pub const OID_FDDI_UPSTREAM_NODE_LONG: NET_IF_OBJECT_ID = 0x03020102;
pub const OID_FDDI_DOWNSTREAM_NODE_LONG: NET_IF_OBJECT_ID = 0x03020103;
pub const OID_FDDI_FRAME_ERRORS: NET_IF_OBJECT_ID = 0x03020104;
pub const OID_FDDI_FRAMES_LOST: NET_IF_OBJECT_ID = 0x03020105;
pub const OID_FDDI_RING_MGT_STATE: NET_IF_OBJECT_ID = 0x03020106;
pub const OID_FDDI_LCT_FAILURES: NET_IF_OBJECT_ID = 0x03020107;
pub const OID_FDDI_LEM_REJECTS: NET_IF_OBJECT_ID = 0x03020108;
pub const OID_FDDI_LCONNECTION_STATE: NET_IF_OBJECT_ID = 0x03020109;
pub const OID_FDDI_SMT_STATION_ID: NET_IF_OBJECT_ID = 0x03030201;
pub const OID_FDDI_SMT_OP_VERSION_ID: NET_IF_OBJECT_ID = 0x03030202;
pub const OID_FDDI_SMT_HI_VERSION_ID: NET_IF_OBJECT_ID = 0x03030203;
pub const OID_FDDI_SMT_LO_VERSION_ID: NET_IF_OBJECT_ID = 0x03030204;
pub const OID_FDDI_SMT_MANUFACTURER_DATA: NET_IF_OBJECT_ID = 0x03030205;
pub const OID_FDDI_SMT_USER_DATA: NET_IF_OBJECT_ID = 0x03030206;
pub const OID_FDDI_SMT_MIB_VERSION_ID: NET_IF_OBJECT_ID = 0x03030207;
pub const OID_FDDI_SMT_MAC_CT: NET_IF_OBJECT_ID = 0x03030208;
pub const OID_FDDI_SMT_NON_MASTER_CT: NET_IF_OBJECT_ID = 0x03030209;
pub const OID_FDDI_SMT_MASTER_CT: NET_IF_OBJECT_ID = 0x0303020A;
pub const OID_FDDI_SMT_AVAILABLE_PATHS: NET_IF_OBJECT_ID = 0x0303020B;
pub const OID_FDDI_SMT_CONFIG_CAPABILITIES: NET_IF_OBJECT_ID = 0x0303020C;
pub const OID_FDDI_SMT_CONFIG_POLICY: NET_IF_OBJECT_ID = 0x0303020D;
pub const OID_FDDI_SMT_CONNECTION_POLICY: NET_IF_OBJECT_ID = 0x0303020E;
pub const OID_FDDI_SMT_T_NOTIFY: NET_IF_OBJECT_ID = 0x0303020F;
pub const OID_FDDI_SMT_STAT_RPT_POLICY: NET_IF_OBJECT_ID = 0x03030210;
pub const OID_FDDI_SMT_TRACE_MAX_EXPIRATION: NET_IF_OBJECT_ID = 0x03030211;
pub const OID_FDDI_SMT_PORT_INDEXES: NET_IF_OBJECT_ID = 0x03030212;
pub const OID_FDDI_SMT_MAC_INDEXES: NET_IF_OBJECT_ID = 0x03030213;
pub const OID_FDDI_SMT_BYPASS_PRESENT: NET_IF_OBJECT_ID = 0x03030214;
pub const OID_FDDI_SMT_ECM_STATE: NET_IF_OBJECT_ID = 0x03030215;
pub const OID_FDDI_SMT_CF_STATE: NET_IF_OBJECT_ID = 0x03030216;
pub const OID_FDDI_SMT_HOLD_STATE: NET_IF_OBJECT_ID = 0x03030217;
pub const OID_FDDI_SMT_REMOTE_DISCONNECT_FLAG: NET_IF_OBJECT_ID = 0x03030218;
pub const OID_FDDI_SMT_STATION_STATUS: NET_IF_OBJECT_ID = 0x03030219;
pub const OID_FDDI_SMT_PEER_WRAP_FLAG: NET_IF_OBJECT_ID = 0x0303021A;
pub const OID_FDDI_SMT_MSG_TIME_STAMP: NET_IF_OBJECT_ID = 0x0303021B;
pub const OID_FDDI_SMT_TRANSITION_TIME_STAMP: NET_IF_OBJECT_ID = 0x0303021C;
pub const OID_FDDI_SMT_SET_COUNT: NET_IF_OBJECT_ID = 0x0303021D;
pub const OID_FDDI_SMT_LAST_SET_STATION_ID: NET_IF_OBJECT_ID = 0x0303021E;
pub const OID_FDDI_MAC_FRAME_STATUS_FUNCTIONS: NET_IF_OBJECT_ID = 0x0303021F;
pub const OID_FDDI_MAC_BRIDGE_FUNCTIONS: NET_IF_OBJECT_ID = 0x03030220;
pub const OID_FDDI_MAC_T_MAX_CAPABILITY: NET_IF_OBJECT_ID = 0x03030221;
pub const OID_FDDI_MAC_TVX_CAPABILITY: NET_IF_OBJECT_ID = 0x03030222;
pub const OID_FDDI_MAC_AVAILABLE_PATHS: NET_IF_OBJECT_ID = 0x03030223;
pub const OID_FDDI_MAC_CURRENT_PATH: NET_IF_OBJECT_ID = 0x03030224;
pub const OID_FDDI_MAC_UPSTREAM_NBR: NET_IF_OBJECT_ID = 0x03030225;
pub const OID_FDDI_MAC_DOWNSTREAM_NBR: NET_IF_OBJECT_ID = 0x03030226;
pub const OID_FDDI_MAC_OLD_UPSTREAM_NBR: NET_IF_OBJECT_ID = 0x03030227;
pub const OID_FDDI_MAC_OLD_DOWNSTREAM_NBR: NET_IF_OBJECT_ID = 0x03030228;
pub const OID_FDDI_MAC_DUP_ADDRESS_TEST: NET_IF_OBJECT_ID = 0x03030229;
pub const OID_FDDI_MAC_REQUESTED_PATHS: NET_IF_OBJECT_ID = 0x0303022A;
pub const OID_FDDI_MAC_DOWNSTREAM_PORT_TYPE: NET_IF_OBJECT_ID = 0x0303022B;
pub const OID_FDDI_MAC_INDEX: NET_IF_OBJECT_ID = 0x0303022C;
pub const OID_FDDI_MAC_SMT_ADDRESS: NET_IF_OBJECT_ID = 0x0303022D;
pub const OID_FDDI_MAC_LONG_GRP_ADDRESS: NET_IF_OBJECT_ID = 0x0303022E;
pub const OID_FDDI_MAC_SHORT_GRP_ADDRESS: NET_IF_OBJECT_ID = 0x0303022F;
pub const OID_FDDI_MAC_T_REQ: NET_IF_OBJECT_ID = 0x03030230;
pub const OID_FDDI_MAC_T_NEG: NET_IF_OBJECT_ID = 0x03030231;
pub const OID_FDDI_MAC_T_MAX: NET_IF_OBJECT_ID = 0x03030232;
pub const OID_FDDI_MAC_TVX_VALUE: NET_IF_OBJECT_ID = 0x03030233;
pub const OID_FDDI_MAC_T_PRI0: NET_IF_OBJECT_ID = 0x03030234;
pub const OID_FDDI_MAC_T_PRI1: NET_IF_OBJECT_ID = 0x03030235;
pub const OID_FDDI_MAC_T_PRI2: NET_IF_OBJECT_ID = 0x03030236;
pub const OID_FDDI_MAC_T_PRI3: NET_IF_OBJECT_ID = 0x03030237;
pub const OID_FDDI_MAC_T_PRI4: NET_IF_OBJECT_ID = 0x03030238;
pub const OID_FDDI_MAC_T_PRI5: NET_IF_OBJECT_ID = 0x03030239;
pub const OID_FDDI_MAC_T_PRI6: NET_IF_OBJECT_ID = 0x0303023A;
pub const OID_FDDI_MAC_FRAME_CT: NET_IF_OBJECT_ID = 0x0303023B;
pub const OID_FDDI_MAC_COPIED_CT: NET_IF_OBJECT_ID = 0x0303023C;
pub const OID_FDDI_MAC_TRANSMIT_CT: NET_IF_OBJECT_ID = 0x0303023D;
pub const OID_FDDI_MAC_TOKEN_CT: NET_IF_OBJECT_ID = 0x0303023E;
pub const OID_FDDI_MAC_ERROR_CT: NET_IF_OBJECT_ID = 0x0303023F;
pub const OID_FDDI_MAC_LOST_CT: NET_IF_OBJECT_ID = 0x03030240;
pub const OID_FDDI_MAC_TVX_EXPIRED_CT: NET_IF_OBJECT_ID = 0x03030241;
pub const OID_FDDI_MAC_NOT_COPIED_CT: NET_IF_OBJECT_ID = 0x03030242;
pub const OID_FDDI_MAC_LATE_CT: NET_IF_OBJECT_ID = 0x03030243;
pub const OID_FDDI_MAC_RING_OP_CT: NET_IF_OBJECT_ID = 0x03030244;
pub const OID_FDDI_MAC_FRAME_ERROR_THRESHOLD: NET_IF_OBJECT_ID = 0x03030245;
pub const OID_FDDI_MAC_FRAME_ERROR_RATIO: NET_IF_OBJECT_ID = 0x03030246;
pub const OID_FDDI_MAC_NOT_COPIED_THRESHOLD: NET_IF_OBJECT_ID = 0x03030247;
pub const OID_FDDI_MAC_NOT_COPIED_RATIO: NET_IF_OBJECT_ID = 0x03030248;
pub const OID_FDDI_MAC_RMT_STATE: NET_IF_OBJECT_ID = 0x03030249;
pub const OID_FDDI_MAC_DA_FLAG: NET_IF_OBJECT_ID = 0x0303024A;
pub const OID_FDDI_MAC_UNDA_FLAG: NET_IF_OBJECT_ID = 0x0303024B;
pub const OID_FDDI_MAC_FRAME_ERROR_FLAG: NET_IF_OBJECT_ID = 0x0303024C;
pub const OID_FDDI_MAC_NOT_COPIED_FLAG: NET_IF_OBJECT_ID = 0x0303024D;
pub const OID_FDDI_MAC_MA_UNITDATA_AVAILABLE: NET_IF_OBJECT_ID = 0x0303024E;
pub const OID_FDDI_MAC_HARDWARE_PRESENT: NET_IF_OBJECT_ID = 0x0303024F;
pub const OID_FDDI_MAC_MA_UNITDATA_ENABLE: NET_IF_OBJECT_ID = 0x03030250;
pub const OID_FDDI_PATH_INDEX: NET_IF_OBJECT_ID = 0x03030251;
pub const OID_FDDI_PATH_RING_LATENCY: NET_IF_OBJECT_ID = 0x03030252;
pub const OID_FDDI_PATH_TRACE_STATUS: NET_IF_OBJECT_ID = 0x03030253;
pub const OID_FDDI_PATH_SBA_PAYLOAD: NET_IF_OBJECT_ID = 0x03030254;
pub const OID_FDDI_PATH_SBA_OVERHEAD: NET_IF_OBJECT_ID = 0x03030255;
pub const OID_FDDI_PATH_CONFIGURATION: NET_IF_OBJECT_ID = 0x03030256;
pub const OID_FDDI_PATH_T_R_MODE: NET_IF_OBJECT_ID = 0x03030257;
pub const OID_FDDI_PATH_SBA_AVAILABLE: NET_IF_OBJECT_ID = 0x03030258;
pub const OID_FDDI_PATH_TVX_LOWER_BOUND: NET_IF_OBJECT_ID = 0x03030259;
pub const OID_FDDI_PATH_T_MAX_LOWER_BOUND: NET_IF_OBJECT_ID = 0x0303025A;
pub const OID_FDDI_PATH_MAX_T_REQ: NET_IF_OBJECT_ID = 0x0303025B;
pub const OID_FDDI_PORT_MY_TYPE: NET_IF_OBJECT_ID = 0x0303025C;
pub const OID_FDDI_PORT_NEIGHBOR_TYPE: NET_IF_OBJECT_ID = 0x0303025D;
pub const OID_FDDI_PORT_CONNECTION_POLICIES: NET_IF_OBJECT_ID = 0x0303025E;
pub const OID_FDDI_PORT_MAC_INDICATED: NET_IF_OBJECT_ID = 0x0303025F;
pub const OID_FDDI_PORT_CURRENT_PATH: NET_IF_OBJECT_ID = 0x03030260;
pub const OID_FDDI_PORT_REQUESTED_PATHS: NET_IF_OBJECT_ID = 0x03030261;
pub const OID_FDDI_PORT_MAC_PLACEMENT: NET_IF_OBJECT_ID = 0x03030262;
pub const OID_FDDI_PORT_AVAILABLE_PATHS: NET_IF_OBJECT_ID = 0x03030263;
pub const OID_FDDI_PORT_MAC_LOOP_TIME: NET_IF_OBJECT_ID = 0x03030264;
pub const OID_FDDI_PORT_PMD_CLASS: NET_IF_OBJECT_ID = 0x03030265;
pub const OID_FDDI_PORT_CONNECTION_CAPABILITIES: NET_IF_OBJECT_ID = 0x03030266;
pub const OID_FDDI_PORT_INDEX: NET_IF_OBJECT_ID = 0x03030267;
pub const OID_FDDI_PORT_MAINT_LS: NET_IF_OBJECT_ID = 0x03030268;
pub const OID_FDDI_PORT_BS_FLAG: NET_IF_OBJECT_ID = 0x03030269;
pub const OID_FDDI_PORT_PC_LS: NET_IF_OBJECT_ID = 0x0303026A;
pub const OID_FDDI_PORT_EB_ERROR_CT: NET_IF_OBJECT_ID = 0x0303026B;
pub const OID_FDDI_PORT_LCT_FAIL_CT: NET_IF_OBJECT_ID = 0x0303026C;
pub const OID_FDDI_PORT_LER_ESTIMATE: NET_IF_OBJECT_ID = 0x0303026D;
pub const OID_FDDI_PORT_LEM_REJECT_CT: NET_IF_OBJECT_ID = 0x0303026E;
pub const OID_FDDI_PORT_LEM_CT: NET_IF_OBJECT_ID = 0x0303026F;
pub const OID_FDDI_PORT_LER_CUTOFF: NET_IF_OBJECT_ID = 0x03030270;
pub const OID_FDDI_PORT_LER_ALARM: NET_IF_OBJECT_ID = 0x03030271;
pub const OID_FDDI_PORT_CONNNECT_STATE: NET_IF_OBJECT_ID = 0x03030272;
pub const OID_FDDI_PORT_PCM_STATE: NET_IF_OBJECT_ID = 0x03030273;
pub const OID_FDDI_PORT_PC_WITHHOLD: NET_IF_OBJECT_ID = 0x03030274;
pub const OID_FDDI_PORT_LER_FLAG: NET_IF_OBJECT_ID = 0x03030275;
pub const OID_FDDI_PORT_HARDWARE_PRESENT: NET_IF_OBJECT_ID = 0x03030276;
pub const OID_FDDI_SMT_STATION_ACTION: NET_IF_OBJECT_ID = 0x03030277;
pub const OID_FDDI_PORT_ACTION: NET_IF_OBJECT_ID = 0x03030278;
pub const OID_FDDI_IF_DESCR: NET_IF_OBJECT_ID = 0x03030279;
pub const OID_FDDI_IF_TYPE: NET_IF_OBJECT_ID = 0x0303027A;
pub const OID_FDDI_IF_MTU: NET_IF_OBJECT_ID = 0x0303027B;
pub const OID_FDDI_IF_SPEED: NET_IF_OBJECT_ID = 0x0303027C;
pub const OID_FDDI_IF_PHYS_ADDRESS: NET_IF_OBJECT_ID = 0x0303027D;
pub const OID_FDDI_IF_ADMIN_STATUS: NET_IF_OBJECT_ID = 0x0303027E;
pub const OID_FDDI_IF_OPER_STATUS: NET_IF_OBJECT_ID = 0x0303027F;
pub const OID_FDDI_IF_LAST_CHANGE: NET_IF_OBJECT_ID = 0x03030280;
pub const OID_FDDI_IF_IN_OCTETS: NET_IF_OBJECT_ID = 0x03030281;
pub const OID_FDDI_IF_IN_UCAST_PKTS: NET_IF_OBJECT_ID = 0x03030282;
pub const OID_FDDI_IF_IN_NUCAST_PKTS: NET_IF_OBJECT_ID = 0x03030283;
pub const OID_FDDI_IF_IN_DISCARDS: NET_IF_OBJECT_ID = 0x03030284;
pub const OID_FDDI_IF_IN_ERRORS: NET_IF_OBJECT_ID = 0x03030285;
pub const OID_FDDI_IF_IN_UNKNOWN_PROTOS: NET_IF_OBJECT_ID = 0x03030286;
pub const OID_FDDI_IF_OUT_OCTETS: NET_IF_OBJECT_ID = 0x03030287;
pub const OID_FDDI_IF_OUT_UCAST_PKTS: NET_IF_OBJECT_ID = 0x03030288;
pub const OID_FDDI_IF_OUT_NUCAST_PKTS: NET_IF_OBJECT_ID = 0x03030289;
pub const OID_FDDI_IF_OUT_DISCARDS: NET_IF_OBJECT_ID = 0x0303028A;
pub const OID_FDDI_IF_OUT_ERRORS: NET_IF_OBJECT_ID = 0x0303028B;
pub const OID_FDDI_IF_OUT_QLEN: NET_IF_OBJECT_ID = 0x0303028C;
pub const OID_FDDI_IF_SPECIFIC: NET_IF_OBJECT_ID = 0x0303028D;
pub const OID_WAN_PERMANENT_ADDRESS: NET_IF_OBJECT_ID = 0x04010101;
pub const OID_WAN_CURRENT_ADDRESS: NET_IF_OBJECT_ID = 0x04010102;
pub const OID_WAN_QUALITY_OF_SERVICE: NET_IF_OBJECT_ID = 0x04010103;
pub const OID_WAN_PROTOCOL_TYPE: NET_IF_OBJECT_ID = 0x04010104;
pub const OID_WAN_MEDIUM_SUBTYPE: NET_IF_OBJECT_ID = 0x04010105;
pub const OID_WAN_HEADER_FORMAT: NET_IF_OBJECT_ID = 0x04010106;
pub const OID_WAN_GET_INFO: NET_IF_OBJECT_ID = 0x04010107;
pub const OID_WAN_SET_LINK_INFO: NET_IF_OBJECT_ID = 0x04010108;
pub const OID_WAN_GET_LINK_INFO: NET_IF_OBJECT_ID = 0x04010109;
pub const OID_WAN_LINE_COUNT: NET_IF_OBJECT_ID = 0x0401010A;
pub const OID_WAN_PROTOCOL_CAPS: NET_IF_OBJECT_ID = 0x0401010B;
pub const OID_WAN_GET_BRIDGE_INFO: NET_IF_OBJECT_ID = 0x0401020A;
pub const OID_WAN_SET_BRIDGE_INFO: NET_IF_OBJECT_ID = 0x0401020B;
pub const OID_WAN_GET_COMP_INFO: NET_IF_OBJECT_ID = 0x0401020C;
pub const OID_WAN_SET_COMP_INFO: NET_IF_OBJECT_ID = 0x0401020D;
pub const OID_WAN_GET_STATS_INFO: NET_IF_OBJECT_ID = 0x0401020E;
pub const OID_WAN_CO_GET_INFO: NET_IF_OBJECT_ID = 0x04010180;
pub const OID_WAN_CO_SET_LINK_INFO: NET_IF_OBJECT_ID = 0x04010181;
pub const OID_WAN_CO_GET_LINK_INFO: NET_IF_OBJECT_ID = 0x04010182;
pub const OID_WAN_CO_GET_COMP_INFO: NET_IF_OBJECT_ID = 0x04010280;
pub const OID_WAN_CO_SET_COMP_INFO: NET_IF_OBJECT_ID = 0x04010281;
pub const OID_WAN_CO_GET_STATS_INFO: NET_IF_OBJECT_ID = 0x04010282;
pub const OID_LTALK_CURRENT_NODE_ID: NET_IF_OBJECT_ID = 0x05010102;
pub const OID_LTALK_IN_BROADCASTS: NET_IF_OBJECT_ID = 0x05020101;
pub const OID_LTALK_IN_LENGTH_ERRORS: NET_IF_OBJECT_ID = 0x05020102;
pub const OID_LTALK_OUT_NO_HANDLERS: NET_IF_OBJECT_ID = 0x05020201;
pub const OID_LTALK_COLLISIONS: NET_IF_OBJECT_ID = 0x05020202;
pub const OID_LTALK_DEFERS: NET_IF_OBJECT_ID = 0x05020203;
pub const OID_LTALK_NO_DATA_ERRORS: NET_IF_OBJECT_ID = 0x05020204;
pub const OID_LTALK_RANDOM_CTS_ERRORS: NET_IF_OBJECT_ID = 0x05020205;
pub const OID_LTALK_FCS_ERRORS: NET_IF_OBJECT_ID = 0x05020206;
pub const OID_ARCNET_PERMANENT_ADDRESS: NET_IF_OBJECT_ID = 0x06010101;
pub const OID_ARCNET_CURRENT_ADDRESS: NET_IF_OBJECT_ID = 0x06010102;
pub const OID_ARCNET_RECONFIGURATIONS: NET_IF_OBJECT_ID = 0x06020201;
pub const OID_TAPI_ACCEPT: NET_IF_OBJECT_ID = 0x07030101;
pub const OID_TAPI_ANSWER: NET_IF_OBJECT_ID = 0x07030102;
pub const OID_TAPI_CLOSE: NET_IF_OBJECT_ID = 0x07030103;
pub const OID_TAPI_CLOSE_CALL: NET_IF_OBJECT_ID = 0x07030104;
pub const OID_TAPI_CONDITIONAL_MEDIA_DETECTION: NET_IF_OBJECT_ID = 0x07030105;
pub const OID_TAPI_CONFIG_DIALOG: NET_IF_OBJECT_ID = 0x07030106;
pub const OID_TAPI_DEV_SPECIFIC: NET_IF_OBJECT_ID = 0x07030107;
pub const OID_TAPI_DIAL: NET_IF_OBJECT_ID = 0x07030108;
pub const OID_TAPI_DROP: NET_IF_OBJECT_ID = 0x07030109;
pub const OID_TAPI_GET_ADDRESS_CAPS: NET_IF_OBJECT_ID = 0x0703010A;
pub const OID_TAPI_GET_ADDRESS_ID: NET_IF_OBJECT_ID = 0x0703010B;
pub const OID_TAPI_GET_ADDRESS_STATUS: NET_IF_OBJECT_ID = 0x0703010C;
pub const OID_TAPI_GET_CALL_ADDRESS_ID: NET_IF_OBJECT_ID = 0x0703010D;
pub const OID_TAPI_GET_CALL_INFO: NET_IF_OBJECT_ID = 0x0703010E;
pub const OID_TAPI_GET_CALL_STATUS: NET_IF_OBJECT_ID = 0x0703010F;
pub const OID_TAPI_GET_DEV_CAPS: NET_IF_OBJECT_ID = 0x07030110;
pub const OID_TAPI_GET_DEV_CONFIG: NET_IF_OBJECT_ID = 0x07030111;
pub const OID_TAPI_GET_EXTENSION_ID: NET_IF_OBJECT_ID = 0x07030112;
pub const OID_TAPI_GET_ID: NET_IF_OBJECT_ID = 0x07030113;
pub const OID_TAPI_GET_LINE_DEV_STATUS: NET_IF_OBJECT_ID = 0x07030114;
pub const OID_TAPI_MAKE_CALL: NET_IF_OBJECT_ID = 0x07030115;
pub const OID_TAPI_NEGOTIATE_EXT_VERSION: NET_IF_OBJECT_ID = 0x07030116;
pub const OID_TAPI_OPEN: NET_IF_OBJECT_ID = 0x07030117;
pub const OID_TAPI_PROVIDER_INITIALIZE: NET_IF_OBJECT_ID = 0x07030118;
pub const OID_TAPI_PROVIDER_SHUTDOWN: NET_IF_OBJECT_ID = 0x07030119;
pub const OID_TAPI_SECURE_CALL: NET_IF_OBJECT_ID = 0x0703011A;
pub const OID_TAPI_SELECT_EXT_VERSION: NET_IF_OBJECT_ID = 0x0703011B;
pub const OID_TAPI_SEND_USER_USER_INFO: NET_IF_OBJECT_ID = 0x0703011C;
pub const OID_TAPI_SET_APP_SPECIFIC: NET_IF_OBJECT_ID = 0x0703011D;
pub const OID_TAPI_SET_CALL_PARAMS: NET_IF_OBJECT_ID = 0x0703011E;
pub const OID_TAPI_SET_DEFAULT_MEDIA_DETECTION: NET_IF_OBJECT_ID = 0x0703011F;
pub const OID_TAPI_SET_DEV_CONFIG: NET_IF_OBJECT_ID = 0x07030120;
pub const OID_TAPI_SET_MEDIA_MODE: NET_IF_OBJECT_ID = 0x07030121;
pub const OID_TAPI_SET_STATUS_MESSAGES: NET_IF_OBJECT_ID = 0x07030122;
pub const OID_TAPI_GATHER_DIGITS: NET_IF_OBJECT_ID = 0x07030123;
pub const OID_TAPI_MONITOR_DIGITS: NET_IF_OBJECT_ID = 0x07030124;
pub const OID_ATM_SUPPORTED_VC_RATES: NET_IF_OBJECT_ID = 0x08010101;
pub const OID_ATM_SUPPORTED_SERVICE_CATEGORY: NET_IF_OBJECT_ID = 0x08010102;
pub const OID_ATM_SUPPORTED_AAL_TYPES: NET_IF_OBJECT_ID = 0x08010103;
pub const OID_ATM_HW_CURRENT_ADDRESS: NET_IF_OBJECT_ID = 0x08010104;
pub const OID_ATM_MAX_ACTIVE_VCS: NET_IF_OBJECT_ID = 0x08010105;
pub const OID_ATM_MAX_ACTIVE_VCI_BITS: NET_IF_OBJECT_ID = 0x08010106;
pub const OID_ATM_MAX_ACTIVE_VPI_BITS: NET_IF_OBJECT_ID = 0x08010107;
pub const OID_ATM_MAX_AAL0_PACKET_SIZE: NET_IF_OBJECT_ID = 0x08010108;
pub const OID_ATM_MAX_AAL1_PACKET_SIZE: NET_IF_OBJECT_ID = 0x08010109;
pub const OID_ATM_MAX_AAL34_PACKET_SIZE: NET_IF_OBJECT_ID = 0x0801010A;
pub const OID_ATM_MAX_AAL5_PACKET_SIZE: NET_IF_OBJECT_ID = 0x0801010B;
pub const OID_ATM_SIGNALING_VPIVCI: NET_IF_OBJECT_ID = 0x08010201;
pub const OID_ATM_ASSIGNED_VPI: NET_IF_OBJECT_ID = 0x08010202;
pub const OID_ATM_ACQUIRE_ACCESS_NET_RESOURCES: NET_IF_OBJECT_ID = 0x08010203;
pub const OID_ATM_RELEASE_ACCESS_NET_RESOURCES: NET_IF_OBJECT_ID = 0x08010204;
pub const OID_ATM_ILMI_VPIVCI: NET_IF_OBJECT_ID = 0x08010205;
pub const OID_ATM_DIGITAL_BROADCAST_VPIVCI: NET_IF_OBJECT_ID = 0x08010206;
pub const OID_ATM_GET_NEAREST_FLOW: NET_IF_OBJECT_ID = 0x08010207;
pub const OID_ATM_ALIGNMENT_REQUIRED: NET_IF_OBJECT_ID = 0x08010208;
pub const OID_ATM_LECS_ADDRESS: NET_IF_OBJECT_ID = 0x08010209;
pub const OID_ATM_SERVICE_ADDRESS: NET_IF_OBJECT_ID = 0x0801020A;
pub const OID_ATM_CALL_PROCEEDING: NET_IF_OBJECT_ID = 0x0801020B;
pub const OID_ATM_CALL_ALERTING: NET_IF_OBJECT_ID = 0x0801020C;
pub const OID_ATM_PARTY_ALERTING: NET_IF_OBJECT_ID = 0x0801020D;
pub const OID_ATM_CALL_NOTIFY: NET_IF_OBJECT_ID = 0x0801020E;
pub const OID_ATM_MY_IP_NM_ADDRESS: NET_IF_OBJECT_ID = 0x0801020F;
pub const OID_ATM_RCV_CELLS_OK: NET_IF_OBJECT_ID = 0x08020101;
pub const OID_ATM_XMIT_CELLS_OK: NET_IF_OBJECT_ID = 0x08020102;
pub const OID_ATM_RCV_CELLS_DROPPED: NET_IF_OBJECT_ID = 0x08020103;
pub const OID_ATM_RCV_INVALID_VPI_VCI: NET_IF_OBJECT_ID = 0x08020201;
pub const OID_ATM_CELLS_HEC_ERROR: NET_IF_OBJECT_ID = 0x08020202;
pub const OID_ATM_RCV_REASSEMBLY_ERROR: NET_IF_OBJECT_ID = 0x08020203;
pub const OID_802_11_BSSID: NET_IF_OBJECT_ID = 0x0D010101;
pub const OID_802_11_SSID: NET_IF_OBJECT_ID = 0x0D010102;
pub const OID_802_11_NETWORK_TYPES_SUPPORTED: NET_IF_OBJECT_ID = 0x0D010203;
pub const OID_802_11_NETWORK_TYPE_IN_USE: NET_IF_OBJECT_ID = 0x0D010204;
pub const OID_802_11_TX_POWER_LEVEL: NET_IF_OBJECT_ID = 0x0D010205;
pub const OID_802_11_RSSI: NET_IF_OBJECT_ID = 0x0D010206;
pub const OID_802_11_RSSI_TRIGGER: NET_IF_OBJECT_ID = 0x0D010207;
pub const OID_802_11_INFRASTRUCTURE_MODE: NET_IF_OBJECT_ID = 0x0D010108;
pub const OID_802_11_FRAGMENTATION_THRESHOLD: NET_IF_OBJECT_ID = 0x0D010209;
pub const OID_802_11_RTS_THRESHOLD: NET_IF_OBJECT_ID = 0x0D01020A;
pub const OID_802_11_NUMBER_OF_ANTENNAS: NET_IF_OBJECT_ID = 0x0D01020B;
pub const OID_802_11_RX_ANTENNA_SELECTED: NET_IF_OBJECT_ID = 0x0D01020C;
pub const OID_802_11_TX_ANTENNA_SELECTED: NET_IF_OBJECT_ID = 0x0D01020D;
pub const OID_802_11_SUPPORTED_RATES: NET_IF_OBJECT_ID = 0x0D01020E;
pub const OID_802_11_DESIRED_RATES: NET_IF_OBJECT_ID = 0x0D010210;
pub const OID_802_11_CONFIGURATION: NET_IF_OBJECT_ID = 0x0D010211;
pub const OID_802_11_STATISTICS: NET_IF_OBJECT_ID = 0x0D020212;
pub const OID_802_11_ADD_WEP: NET_IF_OBJECT_ID = 0x0D010113;
pub const OID_802_11_REMOVE_WEP: NET_IF_OBJECT_ID = 0x0D010114;
pub const OID_802_11_DISASSOCIATE: NET_IF_OBJECT_ID = 0x0D010115;
pub const OID_802_11_POWER_MODE: NET_IF_OBJECT_ID = 0x0D010216;
pub const OID_802_11_BSSID_LIST: NET_IF_OBJECT_ID = 0x0D010217;
pub const OID_802_11_AUTHENTICATION_MODE: NET_IF_OBJECT_ID = 0x0D010118;
pub const OID_802_11_PRIVACY_FILTER: NET_IF_OBJECT_ID = 0x0D010119;
pub const OID_802_11_BSSID_LIST_SCAN: NET_IF_OBJECT_ID = 0x0D01011A;
pub const OID_802_11_WEP_STATUS: NET_IF_OBJECT_ID = 0x0D01011B;
pub const OID_802_11_ENCRYPTION_STATUS: NET_IF_OBJECT_ID = OID_802_11_WEP_STATUS;
pub const OID_802_11_RELOAD_DEFAULTS: NET_IF_OBJECT_ID = 0x0D01011C;
pub const OID_802_11_ADD_KEY: NET_IF_OBJECT_ID = 0x0D01011D;
pub const OID_802_11_REMOVE_KEY: NET_IF_OBJECT_ID = 0x0D01011E;
pub const OID_802_11_ASSOCIATION_INFORMATION: NET_IF_OBJECT_ID = 0x0D01011F;
pub const OID_802_11_TEST: NET_IF_OBJECT_ID = 0x0D010120;
pub const OID_802_11_MEDIA_STREAM_MODE: NET_IF_OBJECT_ID = 0x0D010121;
pub const OID_802_11_CAPABILITY: NET_IF_OBJECT_ID = 0x0D010122;
pub const OID_802_11_PMKID: NET_IF_OBJECT_ID = 0x0D010123;
pub const OID_802_11_NON_BCAST_SSID_LIST: NET_IF_OBJECT_ID = 0x0D010124;
pub const OID_802_11_RADIO_STATUS: NET_IF_OBJECT_ID = 0x0D010125;
pub const NDIS_ETH_TYPE_IPV4: USHORT = 0x0800;
pub const NDIS_ETH_TYPE_ARP: USHORT = 0x0806;
pub const NDIS_ETH_TYPE_IPV6: USHORT = 0x86dd;
pub const NDIS_ETH_TYPE_802_1X: USHORT = 0x888e;
pub const NDIS_ETH_TYPE_802_1Q: USHORT = 0x8100;
pub const NDIS_ETH_TYPE_SLOW_PROTOCOL: USHORT = 0x8809;
pub const NDIS_802_11_LENGTH_SSID: usize = 32;
pub const NDIS_802_11_LENGTH_RATES: usize = 8;
pub const NDIS_802_11_LENGTH_RATES_EX: usize = 16;
ENUM!{enum NDIS_802_11_STATUS_TYPE {
    Ndis802_11StatusType_Authentication,
    Ndis802_11StatusType_MediaStreamMode,
    Ndis802_11StatusType_PMKID_CandidateList,
    Ndis802_11StatusTypeMax,
}}
pub type PNDIS_802_11_STATUS_TYPE = *mut NDIS_802_11_STATUS_TYPE;
pub type NDIS_802_11_MAC_ADDRESS = [UCHAR; 6];
STRUCT!{struct NDIS_802_11_STATUS_INDICATION {
    StatusType: NDIS_802_11_STATUS_TYPE,
}}
pub type PNDIS_802_11_STATUS_INDICATION = *mut NDIS_802_11_STATUS_INDICATION;
pub const NDIS_802_11_AUTH_REQUEST_AUTH_FIELDS: ULONG = 0x0f;
pub const NDIS_802_11_AUTH_REQUEST_REAUTH: ULONG = 0x01;
pub const NDIS_802_11_AUTH_REQUEST_KEYUPDATE: ULONG = 0x02;
pub const NDIS_802_11_AUTH_REQUEST_PAIRWISE_ERROR: ULONG = 0x06;
pub const NDIS_802_11_AUTH_REQUEST_GROUP_ERROR: ULONG = 0x0E;
STRUCT!{struct NDIS_802_11_AUTHENTICATION_REQUEST {
    Length: ULONG,
    Bssid: NDIS_802_11_MAC_ADDRESS,
    Flags: ULONG,
}}
pub type PNDIS_802_11_AUTHENTICATION_REQUEST = *mut NDIS_802_11_AUTHENTICATION_REQUEST;
STRUCT!{struct PMKID_CANDIDATE {
    BSSID: NDIS_802_11_MAC_ADDRESS,
    Flags: ULONG,
}}
pub type PPMKID_CANDIDATE = *mut PMKID_CANDIDATE;
STRUCT!{struct NDIS_802_11_PMKID_CANDIDATE_LIST {
    Version: ULONG,
    NumCandidates: ULONG,
    CandidateList: [PMKID_CANDIDATE; 1],
}}
pub type PNDIS_802_11_PMKID_CANDIDATE_LIST = *mut NDIS_802_11_PMKID_CANDIDATE_LIST;
pub const NDIS_802_11_PMKID_CANDIDATE_PREAUTH_ENABLED: ULONG = 0x01;
ENUM!{enum NDIS_802_11_NETWORK_TYPE {
    Ndis802_11FH,
    Ndis802_11DS,
    Ndis802_11OFDM5,
    Ndis802_11OFDM24,
    Ndis802_11Automode,
    Ndis802_11NetworkTypeMax,
}}
pub type PNDIS_802_11_NETWORK_TYPE = *mut NDIS_802_11_NETWORK_TYPE;
STRUCT!{struct NDIS_802_11_NETWORK_TYPE_LIST {
    NumberOfItems: ULONG,
    NetworkType: [NDIS_802_11_NETWORK_TYPE; 1],
}}
pub type PNDIS_802_11_NETWORK_TYPE_LIST = *mut NDIS_802_11_NETWORK_TYPE_LIST;
ENUM!{enum NDIS_802_11_POWER_MODE {
    Ndis802_11PowerModeCAM,
    Ndis802_11PowerModeMAX_PSP,
    Ndis802_11PowerModeFast_PSP,
    Ndis802_11PowerModeMax,
}}
pub type PNDIS_802_11_POWER_MODE = *mut NDIS_802_11_POWER_MODE;
pub type NDIS_802_11_TX_POWER_LEVEL = ULONG;
pub type NDIS_802_11_RSSI = LONG;
STRUCT!{struct NDIS_802_11_CONFIGURATION_FH {
    Length: ULONG,
    HopPattern: ULONG,
    HopSet: ULONG,
    DwellTime: ULONG,
}}
pub type PNDIS_802_11_CONFIGURATION_FH = *mut NDIS_802_11_CONFIGURATION_FH;
STRUCT!{struct NDIS_802_11_CONFIGURATION {
    Length: ULONG,
    BeaconPeriod: ULONG,
    ATIMWindow: ULONG,
    DSConfig: ULONG,
    FHConfig: NDIS_802_11_CONFIGURATION_FH,
}}
pub type PNDIS_802_11_CONFIGURATION = *mut NDIS_802_11_CONFIGURATION;
STRUCT!{struct NDIS_802_11_STATISTICS {
    Length: ULONG,
    TransmittedFragmentCount: LARGE_INTEGER,
    MulticastTransmittedFrameCount: LARGE_INTEGER,
    FailedCount: LARGE_INTEGER,
    RetryCount: LARGE_INTEGER,
    MultipleRetryCount: LARGE_INTEGER,
    RTSSuccessCount: LARGE_INTEGER,
    RTSFailureCount: LARGE_INTEGER,
    ACKFailureCount: LARGE_INTEGER,
    FrameDuplicateCount: LARGE_INTEGER,
    ReceivedFragmentCount: LARGE_INTEGER,
    MulticastReceivedFrameCount: LARGE_INTEGER,
    FCSErrorCount: LARGE_INTEGER,
    TKIPLocalMICFailures: LARGE_INTEGER,
    TKIPICVErrorCount: LARGE_INTEGER,
    TKIPCounterMeasuresInvoked: LARGE_INTEGER,
    TKIPReplays: LARGE_INTEGER,
    CCMPFormatErrors: LARGE_INTEGER,
    CCMPReplays: LARGE_INTEGER,
    CCMPDecryptErrors: LARGE_INTEGER,
    FourWayHandshakeFailures: LARGE_INTEGER,
    WEPUndecryptableCount: LARGE_INTEGER,
    WEPICVErrorCount: LARGE_INTEGER,
    DecryptSuccessCount: LARGE_INTEGER,
    DecryptFailureCount: LARGE_INTEGER,
}}
pub type PNDIS_802_11_STATISTICS = *mut NDIS_802_11_STATISTICS;
pub type NDIS_802_11_KEY_INDEX = ULONG;
pub type NDIS_802_11_KEY_RSC = ULONGLONG;
STRUCT!{struct NDIS_802_11_KEY {
    Length: ULONG,
    KeyIndex: ULONG,
    KeyLength: ULONG,
    BSSID: NDIS_802_11_MAC_ADDRESS,
    KeyRSC: NDIS_802_11_KEY_RSC,
    KeyMaterial: [UCHAR; 1],
}}
pub type PNDIS_802_11_KEY = *mut NDIS_802_11_KEY;
STRUCT!{struct NDIS_802_11_REMOVE_KEY {
    Length: ULONG,
    KeyIndex: ULONG,
    BSSID: NDIS_802_11_MAC_ADDRESS,
}}
pub type PNDIS_802_11_REMOVE_KEY = *mut NDIS_802_11_REMOVE_KEY;
STRUCT!{struct NDIS_802_11_WEP {
    Length: ULONG,
    KeyIndex: ULONG,
    KeyLength: ULONG,
    KeyMaterial: [UCHAR; 1],
}}
pub type PNDIS_802_11_WEP = *mut NDIS_802_11_WEP;
ENUM!{enum NDIS_802_11_NETWORK_INFRASTRUCTURE {
    Ndis802_11IBSS,
    Ndis802_11Infrastructure,
    Ndis802_11AutoUnknown,
    Ndis802_11InfrastructureMax,
}}
pub type PNDIS_802_11_NETWORK_INFRASTRUCTURE = *mut NDIS_802_11_NETWORK_INFRASTRUCTURE;
ENUM!{enum NDIS_802_11_AUTHENTICATION_MODE {
    Ndis802_11AuthModeOpen,
    Ndis802_11AuthModeShared,
    Ndis802_11AuthModeAutoSwitch,
    Ndis802_11AuthModeWPA,
    Ndis802_11AuthModeWPAPSK,
    Ndis802_11AuthModeWPANone,
    Ndis802_11AuthModeWPA2,
    Ndis802_11AuthModeWPA2PSK,
    Ndis802_11AuthModeMax,
}}
pub type PNDIS_802_11_AUTHENTICATION_MODE = *mut NDIS_802_11_AUTHENTICATION_MODE;
pub type NDIS_802_11_RATES = [UCHAR; NDIS_802_11_LENGTH_RATES];
pub type NDIS_802_11_RATES_EX = [UCHAR; NDIS_802_11_LENGTH_RATES_EX];
STRUCT!{struct NDIS_802_11_SSID {
    SsidLength: ULONG,
    Ssid: [UCHAR; NDIS_802_11_LENGTH_SSID],
}}
pub type PNDIS_802_11_SSID = *mut NDIS_802_11_SSID;
STRUCT!{struct NDIS_WLAN_BSSID {
    Length: ULONG,
    MacAddress: NDIS_802_11_MAC_ADDRESS,
    Reserved: [UCHAR; 2],
    Ssid: NDIS_802_11_SSID,
    Privacy: ULONG,
    Rssi: NDIS_802_11_RSSI,
    NetworkTypeInUse: NDIS_802_11_NETWORK_TYPE,
    Configuration: NDIS_802_11_CONFIGURATION,
    InfrastructureMode: NDIS_802_11_NETWORK_INFRASTRUCTURE,
    SupportedRates: NDIS_802_11_RATES,
}}
pub type PNDIS_WLAN_BSSID = *mut NDIS_WLAN_BSSID;
STRUCT!{struct NDIS_802_11_BSSID_LIST {
    NumberOfItems: ULONG,
    Bssid: [NDIS_WLAN_BSSID; 1],
}}
pub type PNDIS_802_11_BSSID_LIST = *mut NDIS_802_11_BSSID_LIST;
STRUCT!{struct NDIS_WLAN_BSSID_EX {
    Length: ULONG,
    MacAddress: NDIS_802_11_MAC_ADDRESS,
    Reserved: [UCHAR; 2],
    Ssid: NDIS_802_11_SSID,
    Privacy: ULONG,
    Rssi: NDIS_802_11_RSSI,
    NetworkTypeInUse: NDIS_802_11_NETWORK_TYPE,
    Configuration: NDIS_802_11_CONFIGURATION,
    InfrastructureMode: NDIS_802_11_NETWORK_INFRASTRUCTURE,
    SupportedRates: NDIS_802_11_RATES_EX,
    IELength: ULONG,
    IEs: [UCHAR; 1],
}}
pub type PNDIS_WLAN_BSSID_EX = *mut NDIS_WLAN_BSSID_EX;
STRUCT!{struct NDIS_802_11_BSSID_LIST_EX {
    NumberOfItems: ULONG,
    Bssid: [NDIS_WLAN_BSSID_EX; 1],
}}
pub type PNDIS_802_11_BSSID_LIST_EX = *mut NDIS_802_11_BSSID_LIST_EX;
STRUCT!{struct NDIS_802_11_FIXED_IEs {
    Timestamp: [UCHAR; 8],
    BeaconInterval: USHORT,
    Capabilities: USHORT,
}}
pub type PNDIS_802_11_FIXED_IEs = *mut NDIS_802_11_FIXED_IEs;
STRUCT!{struct NDIS_802_11_VARIABLE_IEs {
    ElementID: UCHAR,
    Length: UCHAR,
    data: [UCHAR; 1],
}}
pub type PNDIS_802_11_VARIABLE_IEs = *mut NDIS_802_11_VARIABLE_IEs;
pub type NDIS_802_11_FRAGMENTATION_THRESHOLD = ULONG;
pub type NDIS_802_11_RTS_THRESHOLD = ULONG;
pub type NDIS_802_11_ANTENNA = ULONG;
ENUM!{enum NDIS_802_11_PRIVACY_FILTER {
    Ndis802_11PrivFilterAcceptAll,
    Ndis802_11PrivFilter8021xWEP,
}}
pub type PNDIS_802_11_PRIVACY_FILTER = *mut NDIS_802_11_PRIVACY_FILTER;
ENUM!{enum NDIS_802_11_WEP_STATUS {
    Ndis802_11WEPEnabled,
    Ndis802_11Encryption1Enabled = Ndis802_11WEPEnabled,
    Ndis802_11WEPDisabled,
    Ndis802_11EncryptionDisabled = Ndis802_11WEPDisabled,
    Ndis802_11WEPKeyAbsent,
    Ndis802_11Encryption1KeyAbsent = Ndis802_11WEPKeyAbsent,
    Ndis802_11WEPNotSupported,
    Ndis802_11EncryptionNotSupported = Ndis802_11WEPNotSupported,
    Ndis802_11Encryption2Enabled,
    Ndis802_11Encryption2KeyAbsent,
    Ndis802_11Encryption3Enabled,
    Ndis802_11Encryption3KeyAbsent,
}}
pub type PNDIS_802_11_WEP_STATUS = *mut NDIS_802_11_WEP_STATUS;
pub type NDIS_802_11_ENCRYPTION_STATUS = NDIS_802_11_WEP_STATUS;
pub type PNDIS_802_11_ENCRYPTION_STATUS = *mut NDIS_802_11_WEP_STATUS;
ENUM!{enum NDIS_802_11_RELOAD_DEFAULTS {
    Ndis802_11ReloadWEPKeys,
}}
pub type PNDIS_802_11_RELOAD_DEFAULTS = *mut NDIS_802_11_RELOAD_DEFAULTS;
pub const NDIS_802_11_AI_REQFI_CAPABILITIES: USHORT = 1;
pub const NDIS_802_11_AI_REQFI_LISTENINTERVAL: USHORT = 2;
pub const NDIS_802_11_AI_REQFI_CURRENTAPADDRESS: USHORT = 4;
pub const NDIS_802_11_AI_RESFI_CAPABILITIES: USHORT = 1;
pub const NDIS_802_11_AI_RESFI_STATUSCODE: USHORT = 2;
pub const NDIS_802_11_AI_RESFI_ASSOCIATIONID: USHORT = 4;
STRUCT!{struct NDIS_802_11_AI_REQFI {
    Capabilities: USHORT,
    ListenInterval: USHORT,
    CurrentAPAddress: NDIS_802_11_MAC_ADDRESS,
}}
pub type PNDIS_802_11_AI_REQFI = *mut NDIS_802_11_AI_REQFI;
STRUCT!{struct NDIS_802_11_AI_RESFI {
    Capabilities: USHORT,
    StatusCode: USHORT,
    AssociationId: USHORT,
}}
pub type PNDIS_802_11_AI_RESFI = *mut NDIS_802_11_AI_RESFI;
STRUCT!{struct NDIS_802_11_ASSOCIATION_INFORMATION {
    Length: ULONG,
    AvailableRequestFixedIEs: USHORT,
    RequestFixedIEs: NDIS_802_11_AI_REQFI,
    RequestIELength: ULONG,
    OffsetRequestIEs: ULONG,
    AvailableResponseFixedIEs: USHORT,
    ResponseFixedIEs: NDIS_802_11_AI_RESFI,
    ResponseIELength: ULONG,
    OffsetResponseIEs: ULONG,
}}
pub type PNDIS_802_11_ASSOCIATION_INFORMATION = *mut NDIS_802_11_ASSOCIATION_INFORMATION;
STRUCT!{struct NDIS_802_11_AUTHENTICATION_EVENT {
    Status: NDIS_802_11_STATUS_INDICATION,
    Request: [NDIS_802_11_AUTHENTICATION_REQUEST; 1],
}}
pub type PNDIS_802_11_AUTHENTICATION_EVENT = *mut NDIS_802_11_AUTHENTICATION_EVENT;
UNION!{union NDIS_802_11_TEST_u {
    [u32; 5],
    AuthenticationEvent AuthenticationEvent_mut: NDIS_802_11_AUTHENTICATION_EVENT,
    RssiTrigger RssiTrigger_mut: NDIS_802_11_RSSI,
}}
STRUCT!{struct NDIS_802_11_TEST {
    Length: ULONG,
    Type: ULONG,
    u: NDIS_802_11_TEST_u,
}}
pub type PNDIS_802_11_TEST = *mut NDIS_802_11_TEST;
ENUM!{enum NDIS_802_11_MEDIA_STREAM_MODE {
    Ndis802_11MediaStreamOff,
    Ndis802_11MediaStreamOn,
}}
pub type PNDIS_802_11_MEDIA_STREAM_MODE = *mut NDIS_802_11_MEDIA_STREAM_MODE;
pub type NDIS_802_11_PMKID_VALUE = [UCHAR; 16];
STRUCT!{struct BSSID_INFO {
    BSSID: NDIS_802_11_MAC_ADDRESS,
    PMKID: NDIS_802_11_PMKID_VALUE,
}}
pub type PBSSID_INFO = *mut BSSID_INFO;
STRUCT!{struct NDIS_802_11_PMKID {
    Length: ULONG,
    BSSIDInfoCount: ULONG,
    BSSIDInfo: [BSSID_INFO; 1],
}}
pub type PNDIS_802_11_PMKID = *mut NDIS_802_11_PMKID;
STRUCT!{struct NDIS_802_11_AUTHENTICATION_ENCRYPTION {
    AuthModeSupported: NDIS_802_11_AUTHENTICATION_MODE,
    EncryptStatusSupported: NDIS_802_11_ENCRYPTION_STATUS,
}}
pub type PNDIS_802_11_AUTHENTICATION_ENCRYPTION = *mut NDIS_802_11_AUTHENTICATION_ENCRYPTION;
STRUCT!{struct NDIS_802_11_CAPABILITY {
    Length: ULONG,
    Version: ULONG,
    NoOfPMKIDs: ULONG,
    NoOfAuthEncryptPairsSupported: ULONG,
    AuthenticationEncryptionSupported: [NDIS_802_11_AUTHENTICATION_ENCRYPTION; 1],
}}
pub type PNDIS_802_11_CAPABILITY = *mut NDIS_802_11_CAPABILITY;
STRUCT!{struct NDIS_802_11_NON_BCAST_SSID_LIST {
    NumberOfItems: ULONG,
    Non_Bcast_Ssid: [NDIS_802_11_SSID; 1],
}}
pub type PNDIS_802_11_NON_BCAST_SSID_LIST = *mut NDIS_802_11_NON_BCAST_SSID_LIST;
ENUM!{enum NDIS_802_11_RADIO_STATUS {
    Ndis802_11RadioStatusOn,
    Ndis802_11RadioStatusHardwareOff,
    Ndis802_11RadioStatusSoftwareOff,
    Ndis802_11RadioStatusHardwareSoftwareOff,
    Ndis802_11RadioStatusMax,
}}
pub type PNDIS_802_11_RADIO_STATUS = *mut NDIS_802_11_RADIO_STATUS;
pub const OID_IRDA_RECEIVING: NET_IF_OBJECT_ID = 0x0A010100;
pub const OID_IRDA_TURNAROUND_TIME: NET_IF_OBJECT_ID = 0x0A010101;
pub const OID_IRDA_SUPPORTED_SPEEDS: NET_IF_OBJECT_ID = 0x0A010102;
pub const OID_IRDA_LINK_SPEED: NET_IF_OBJECT_ID = 0x0A010103;
pub const OID_IRDA_MEDIA_BUSY: NET_IF_OBJECT_ID = 0x0A010104;
pub const OID_IRDA_EXTRA_RCV_BOFS: NET_IF_OBJECT_ID = 0x0A010200;
pub const OID_IRDA_RATE_SNIFF: NET_IF_OBJECT_ID = 0x0A010201;
pub const OID_IRDA_UNICAST_LIST: NET_IF_OBJECT_ID = 0x0A010202;
pub const OID_IRDA_MAX_UNICAST_LIST_SIZE: NET_IF_OBJECT_ID = 0x0A010203;
pub const OID_IRDA_MAX_RECEIVE_WINDOW_SIZE: NET_IF_OBJECT_ID = 0x0A010204;
pub const OID_IRDA_MAX_SEND_WINDOW_SIZE: NET_IF_OBJECT_ID = 0x0A010205;
pub const OID_IRDA_RESERVED1: NET_IF_OBJECT_ID = 0x0A01020A;
pub const OID_IRDA_RESERVED2: NET_IF_OBJECT_ID = 0x0A01020F;
pub const OID_1394_LOCAL_NODE_INFO: NET_IF_OBJECT_ID = 0x0C010101;
pub const OID_1394_VC_INFO: NET_IF_OBJECT_ID = 0x0C010102;
pub const OID_CO_ADD_PVC: NET_IF_OBJECT_ID = 0xFE000001;
pub const OID_CO_DELETE_PVC: NET_IF_OBJECT_ID = 0xFE000002;
pub const OID_CO_GET_CALL_INFORMATION: NET_IF_OBJECT_ID = 0xFE000003;
pub const OID_CO_ADD_ADDRESS: NET_IF_OBJECT_ID = 0xFE000004;
pub const OID_CO_DELETE_ADDRESS: NET_IF_OBJECT_ID = 0xFE000005;
pub const OID_CO_GET_ADDRESSES: NET_IF_OBJECT_ID = 0xFE000006;
pub const OID_CO_ADDRESS_CHANGE: NET_IF_OBJECT_ID = 0xFE000007;
pub const OID_CO_SIGNALING_ENABLED: NET_IF_OBJECT_ID = 0xFE000008;
pub const OID_CO_SIGNALING_DISABLED: NET_IF_OBJECT_ID = 0xFE000009;
pub const OID_CO_AF_CLOSE: NET_IF_OBJECT_ID = 0xFE00000A;
pub const OID_CO_TAPI_CM_CAPS: NET_IF_OBJECT_ID = 0xFE001001;
pub const OID_CO_TAPI_LINE_CAPS: NET_IF_OBJECT_ID = 0xFE001002;
pub const OID_CO_TAPI_ADDRESS_CAPS: NET_IF_OBJECT_ID = 0xFE001003;
pub const OID_CO_TAPI_TRANSLATE_TAPI_CALLPARAMS: NET_IF_OBJECT_ID = 0xFE001004;
pub const OID_CO_TAPI_TRANSLATE_NDIS_CALLPARAMS: NET_IF_OBJECT_ID = 0xFE001005;
pub const OID_CO_TAPI_TRANSLATE_TAPI_SAP: NET_IF_OBJECT_ID = 0xFE001006;
pub const OID_CO_TAPI_GET_CALL_DIAGNOSTICS: NET_IF_OBJECT_ID = 0xFE001007;
pub const OID_CO_TAPI_REPORT_DIGITS: NET_IF_OBJECT_ID = 0xFE001008;
pub const OID_CO_TAPI_DONT_REPORT_DIGITS: NET_IF_OBJECT_ID = 0xFE001009;
pub const OID_PNP_CAPABILITIES: NET_IF_OBJECT_ID = 0xFD010100;
pub const OID_PNP_SET_POWER: NET_IF_OBJECT_ID = 0xFD010101;
pub const OID_PNP_QUERY_POWER: NET_IF_OBJECT_ID = 0xFD010102;
pub const OID_PNP_ADD_WAKE_UP_PATTERN: NET_IF_OBJECT_ID = 0xFD010103;
pub const OID_PNP_REMOVE_WAKE_UP_PATTERN: NET_IF_OBJECT_ID = 0xFD010104;
pub const OID_PNP_WAKE_UP_PATTERN_LIST: NET_IF_OBJECT_ID = 0xFD010105;
pub const OID_PNP_ENABLE_WAKE_UP: NET_IF_OBJECT_ID = 0xFD010106;
pub const OID_PNP_WAKE_UP_OK: NET_IF_OBJECT_ID = 0xFD020200;
pub const OID_PNP_WAKE_UP_ERROR: NET_IF_OBJECT_ID = 0xFD020201;
pub const OID_PM_CURRENT_CAPABILITIES: NET_IF_OBJECT_ID = 0xFD010107;
pub const OID_PM_HARDWARE_CAPABILITIES: NET_IF_OBJECT_ID = 0xFD010108;
pub const OID_PM_PARAMETERS: NET_IF_OBJECT_ID = 0xFD010109;
pub const OID_PM_ADD_WOL_PATTERN: NET_IF_OBJECT_ID = 0xFD01010A;
pub const OID_PM_REMOVE_WOL_PATTERN: NET_IF_OBJECT_ID = 0xFD01010B;
pub const OID_PM_WOL_PATTERN_LIST: NET_IF_OBJECT_ID = 0xFD01010C;
pub const OID_PM_ADD_PROTOCOL_OFFLOAD: NET_IF_OBJECT_ID = 0xFD01010D;
pub const OID_PM_GET_PROTOCOL_OFFLOAD: NET_IF_OBJECT_ID = 0xFD01010E;
pub const OID_PM_REMOVE_PROTOCOL_OFFLOAD: NET_IF_OBJECT_ID = 0xFD01010F;
pub const OID_PM_PROTOCOL_OFFLOAD_LIST: NET_IF_OBJECT_ID = 0xFD010110;
pub const OID_PM_RESERVED_1: NET_IF_OBJECT_ID = 0xFD010111;
pub const OID_RECEIVE_FILTER_HARDWARE_CAPABILITIES: NET_IF_OBJECT_ID = 0x00010221;
pub const OID_RECEIVE_FILTER_GLOBAL_PARAMETERS: NET_IF_OBJECT_ID = 0x00010222;
pub const OID_RECEIVE_FILTER_ALLOCATE_QUEUE: NET_IF_OBJECT_ID = 0x00010223;
pub const OID_RECEIVE_FILTER_FREE_QUEUE: NET_IF_OBJECT_ID = 0x00010224;
pub const OID_RECEIVE_FILTER_ENUM_QUEUES: NET_IF_OBJECT_ID = 0x00010225;
pub const OID_RECEIVE_FILTER_QUEUE_PARAMETERS: NET_IF_OBJECT_ID = 0x00010226;
pub const OID_RECEIVE_FILTER_SET_FILTER: NET_IF_OBJECT_ID = 0x00010227;
pub const OID_RECEIVE_FILTER_CLEAR_FILTER: NET_IF_OBJECT_ID = 0x00010228;
pub const OID_RECEIVE_FILTER_ENUM_FILTERS: NET_IF_OBJECT_ID = 0x00010229;
pub const OID_RECEIVE_FILTER_PARAMETERS: NET_IF_OBJECT_ID = 0x0001022A;
pub const OID_RECEIVE_FILTER_QUEUE_ALLOCATION_COMPLETE: NET_IF_OBJECT_ID = 0x0001022B;
pub const OID_RECEIVE_FILTER_CURRENT_CAPABILITIES: NET_IF_OBJECT_ID = 0x0001022D;
pub const OID_NIC_SWITCH_HARDWARE_CAPABILITIES: NET_IF_OBJECT_ID = 0x0001022E;
pub const OID_NIC_SWITCH_CURRENT_CAPABILITIES: NET_IF_OBJECT_ID = 0x0001022F;
pub const OID_RECEIVE_FILTER_MOVE_FILTER: NET_IF_OBJECT_ID = 0x00010230;
pub const OID_VLAN_RESERVED1: NET_IF_OBJECT_ID = 0x00010231;
pub const OID_VLAN_RESERVED2: NET_IF_OBJECT_ID = 0x00010232;
pub const OID_VLAN_RESERVED3: NET_IF_OBJECT_ID = 0x00010233;
pub const OID_VLAN_RESERVED4: NET_IF_OBJECT_ID = 0x00010234;
pub const OID_PACKET_COALESCING_FILTER_MATCH_COUNT: NET_IF_OBJECT_ID = 0x00010235;
pub const OID_NIC_SWITCH_CREATE_SWITCH: NET_IF_OBJECT_ID = 0x00010237;
pub const OID_NIC_SWITCH_PARAMETERS: NET_IF_OBJECT_ID = 0x00010238;
pub const OID_NIC_SWITCH_DELETE_SWITCH: NET_IF_OBJECT_ID = 0x00010239;
pub const OID_NIC_SWITCH_ENUM_SWITCHES: NET_IF_OBJECT_ID = 0x00010240;
pub const OID_NIC_SWITCH_CREATE_VPORT: NET_IF_OBJECT_ID = 0x00010241;
pub const OID_NIC_SWITCH_VPORT_PARAMETERS: NET_IF_OBJECT_ID = 0x00010242;
pub const OID_NIC_SWITCH_ENUM_VPORTS: NET_IF_OBJECT_ID = 0x00010243;
pub const OID_NIC_SWITCH_DELETE_VPORT: NET_IF_OBJECT_ID = 0x00010244;
pub const OID_NIC_SWITCH_ALLOCATE_VF: NET_IF_OBJECT_ID = 0x00010245;
pub const OID_NIC_SWITCH_FREE_VF: NET_IF_OBJECT_ID = 0x00010246;
pub const OID_NIC_SWITCH_VF_PARAMETERS: NET_IF_OBJECT_ID = 0x00010247;
pub const OID_NIC_SWITCH_ENUM_VFS: NET_IF_OBJECT_ID = 0x00010248;
pub const OID_SRIOV_HARDWARE_CAPABILITIES: NET_IF_OBJECT_ID = 0x00010249;
pub const OID_SRIOV_CURRENT_CAPABILITIES: NET_IF_OBJECT_ID = 0x00010250;
pub const OID_SRIOV_READ_VF_CONFIG_SPACE: NET_IF_OBJECT_ID = 0x00010251;
pub const OID_SRIOV_WRITE_VF_CONFIG_SPACE: NET_IF_OBJECT_ID = 0x00010252;
pub const OID_SRIOV_READ_VF_CONFIG_BLOCK: NET_IF_OBJECT_ID = 0x00010253;
pub const OID_SRIOV_WRITE_VF_CONFIG_BLOCK: NET_IF_OBJECT_ID = 0x00010254;
pub const OID_SRIOV_RESET_VF: NET_IF_OBJECT_ID = 0x00010255;
pub const OID_SRIOV_SET_VF_POWER_STATE: NET_IF_OBJECT_ID = 0x00010256;
pub const OID_SRIOV_VF_VENDOR_DEVICE_ID: NET_IF_OBJECT_ID = 0x00010257;
pub const OID_SRIOV_PROBED_BARS: NET_IF_OBJECT_ID = 0x00010258;
pub const OID_SRIOV_BAR_RESOURCES: NET_IF_OBJECT_ID = 0x00010259;
pub const OID_SRIOV_PF_LUID: NET_IF_OBJECT_ID = 0x00010260;
pub const OID_SRIOV_CONFIG_STATE: NET_IF_OBJECT_ID = 0x00010261;
pub const OID_SRIOV_VF_SERIAL_NUMBER: NET_IF_OBJECT_ID = 0x00010262;
pub const OID_SRIOV_OVERLYING_ADAPTER_INFO: NET_IF_OBJECT_ID = 0x00010268;
pub const OID_SRIOV_VF_INVALIDATE_CONFIG_BLOCK: NET_IF_OBJECT_ID = 0x00010269;
pub const OID_SWITCH_PROPERTY_ADD: NET_IF_OBJECT_ID = 0x00010263;
pub const OID_SWITCH_PROPERTY_UPDATE: NET_IF_OBJECT_ID = 0x00010264;
pub const OID_SWITCH_PROPERTY_DELETE: NET_IF_OBJECT_ID = 0x00010265;
pub const OID_SWITCH_PROPERTY_ENUM: NET_IF_OBJECT_ID = 0x00010266;
pub const OID_SWITCH_FEATURE_STATUS_QUERY: NET_IF_OBJECT_ID = 0x00010267;
pub const OID_SWITCH_NIC_REQUEST: NET_IF_OBJECT_ID = 0x00010270;
pub const OID_SWITCH_PORT_PROPERTY_ADD: NET_IF_OBJECT_ID = 0x00010271;
pub const OID_SWITCH_PORT_PROPERTY_UPDATE: NET_IF_OBJECT_ID = 0x00010272;
pub const OID_SWITCH_PORT_PROPERTY_DELETE: NET_IF_OBJECT_ID = 0x00010273;
pub const OID_SWITCH_PORT_PROPERTY_ENUM: NET_IF_OBJECT_ID = 0x00010274;
pub const OID_SWITCH_PARAMETERS: NET_IF_OBJECT_ID = 0x00010275;
pub const OID_SWITCH_PORT_ARRAY: NET_IF_OBJECT_ID = 0x00010276;
pub const OID_SWITCH_NIC_ARRAY: NET_IF_OBJECT_ID = 0x00010277;
pub const OID_SWITCH_PORT_CREATE: NET_IF_OBJECT_ID = 0x00010278;
pub const OID_SWITCH_PORT_DELETE: NET_IF_OBJECT_ID = 0x00010279;
pub const OID_SWITCH_NIC_CREATE: NET_IF_OBJECT_ID = 0x0001027A;
pub const OID_SWITCH_NIC_CONNECT: NET_IF_OBJECT_ID = 0x0001027B;
pub const OID_SWITCH_NIC_DISCONNECT: NET_IF_OBJECT_ID = 0x0001027C;
pub const OID_SWITCH_NIC_DELETE: NET_IF_OBJECT_ID = 0x0001027D;
pub const OID_SWITCH_PORT_FEATURE_STATUS_QUERY: NET_IF_OBJECT_ID = 0x0001027E;
pub const OID_SWITCH_PORT_TEARDOWN: NET_IF_OBJECT_ID = 0x0001027F;
pub const OID_SWITCH_NIC_SAVE: NET_IF_OBJECT_ID = 0x00010290;
pub const OID_SWITCH_NIC_SAVE_COMPLETE: NET_IF_OBJECT_ID = 0x00010291;
pub const OID_SWITCH_NIC_RESTORE: NET_IF_OBJECT_ID = 0x00010292;
pub const OID_SWITCH_NIC_RESTORE_COMPLETE: NET_IF_OBJECT_ID = 0x00010293;
pub const OID_SWITCH_NIC_UPDATED: NET_IF_OBJECT_ID = 0x00010294;
pub const OID_SWITCH_PORT_UPDATED: NET_IF_OBJECT_ID = 0x00010295;
pub const OID_SWITCH_NIC_DIRECT_REQUEST: NET_IF_OBJECT_ID = 0x00010296;
pub const OID_SWITCH_NIC_SUSPEND: NET_IF_OBJECT_ID = 0x00010297;
pub const OID_SWITCH_NIC_RESUME: NET_IF_OBJECT_ID = 0x00010298;
pub const OID_GEN_ISOLATION_PARAMETERS: NET_IF_OBJECT_ID = 0x00010300;
pub const OID_GFT_HARDWARE_CAPABILITIES: NET_IF_OBJECT_ID = 0x00010401;
pub const OID_GFT_CURRENT_CAPABILITIES: NET_IF_OBJECT_ID = 0x00010402;
pub const OID_GFT_GLOBAL_PARAMETERS: NET_IF_OBJECT_ID = 0x00010403;
pub const OID_GFT_CREATE_TABLE: NET_IF_OBJECT_ID = 0x00010404;
pub const OID_GFT_DELETE_TABLE: NET_IF_OBJECT_ID = 0x00010405;
pub const OID_GFT_ENUM_TABLES: NET_IF_OBJECT_ID = 0x00010406;
pub const OID_GFT_ALLOCATE_COUNTERS: NET_IF_OBJECT_ID = 0x00010407;
pub const OID_GFT_FREE_COUNTERS: NET_IF_OBJECT_ID = 0x00010408;
pub const OID_GFT_ENUM_COUNTERS: NET_IF_OBJECT_ID = 0x00010409;
pub const OID_GFT_COUNTER_VALUES: NET_IF_OBJECT_ID = 0x0001040A;
pub const OID_GFT_STATISTICS: NET_IF_OBJECT_ID = 0x0001040B;
pub const OID_GFT_ADD_FLOW_ENTRIES: NET_IF_OBJECT_ID = 0x0001040C;
pub const OID_GFT_DELETE_FLOW_ENTRIES: NET_IF_OBJECT_ID = 0x0001040D;
pub const OID_GFT_ENUM_FLOW_ENTRIES: NET_IF_OBJECT_ID = 0x0001040E;
pub const OID_GFT_ACTIVATE_FLOW_ENTRIES: NET_IF_OBJECT_ID = 0x0001040F;
pub const OID_GFT_DEACTIVATE_FLOW_ENTRIES: NET_IF_OBJECT_ID = 0x00010410;
pub const OID_GFT_FLOW_ENTRY_PARAMETERS: NET_IF_OBJECT_ID = 0x00010411;
pub const OID_GFT_EXACT_MATCH_PROFILE: NET_IF_OBJECT_ID = 0x00010412;
pub const OID_GFT_HEADER_TRANSPOSITION_PROFILE: NET_IF_OBJECT_ID = 0x00010413;
pub const OID_GFT_WILDCARD_MATCH_PROFILE: NET_IF_OBJECT_ID = 0x00010414;
pub const OID_GFT_ENUM_PROFILES: NET_IF_OBJECT_ID = 0x00010415;
pub const OID_GFT_DELETE_PROFILE: NET_IF_OBJECT_ID = 0x00010416;
pub const OID_GFT_VPORT_PARAMETERS: NET_IF_OBJECT_ID = 0x00010417;
pub const OID_GFT_CREATE_LOGICAL_VPORT: NET_IF_OBJECT_ID = 0x00010418;
pub const OID_GFT_DELETE_LOGICAL_VPORT: NET_IF_OBJECT_ID = 0x00010419;
pub const OID_GFT_ENUM_LOGICAL_VPORTS: NET_IF_OBJECT_ID = 0x0001041A;
pub const OID_QOS_OFFLOAD_HARDWARE_CAPABILITIES: NET_IF_OBJECT_ID = 0x00010601;
pub const OID_QOS_OFFLOAD_CURRENT_CAPABILITIES: NET_IF_OBJECT_ID = 0x00010602;
pub const OID_QOS_OFFLOAD_CREATE_SQ: NET_IF_OBJECT_ID = 0x00010603;
pub const OID_QOS_OFFLOAD_DELETE_SQ: NET_IF_OBJECT_ID = 0x00010604;
pub const OID_QOS_OFFLOAD_UPDATE_SQ: NET_IF_OBJECT_ID = 0x00010605;
pub const OID_QOS_OFFLOAD_ENUM_SQS: NET_IF_OBJECT_ID = 0x00010606;
pub const OID_PD_OPEN_PROVIDER: NET_IF_OBJECT_ID = 0x00010501;
pub const OID_PD_CLOSE_PROVIDER: NET_IF_OBJECT_ID = 0x00010502;
pub const OID_PD_QUERY_CURRENT_CONFIG: NET_IF_OBJECT_ID = 0x00010503;
pub const NDIS_PNP_WAKE_UP_MAGIC_PACKET: NET_IF_OBJECT_ID = 0x00000001;
pub const NDIS_PNP_WAKE_UP_PATTERN_MATCH: NET_IF_OBJECT_ID = 0x00000002;
pub const NDIS_PNP_WAKE_UP_LINK_CHANGE: NET_IF_OBJECT_ID = 0x00000004;
pub const OID_TCP_TASK_OFFLOAD: NET_IF_OBJECT_ID = 0xFC010201;
pub const OID_TCP_TASK_IPSEC_ADD_SA: NET_IF_OBJECT_ID = 0xFC010202;
pub const OID_TCP_TASK_IPSEC_DELETE_SA: NET_IF_OBJECT_ID = 0xFC010203;
pub const OID_TCP_SAN_SUPPORT: NET_IF_OBJECT_ID = 0xFC010204;
pub const OID_TCP_TASK_IPSEC_ADD_UDPESP_SA: NET_IF_OBJECT_ID = 0xFC010205;
pub const OID_TCP_TASK_IPSEC_DELETE_UDPESP_SA: NET_IF_OBJECT_ID = 0xFC010206;
pub const OID_TCP4_OFFLOAD_STATS: NET_IF_OBJECT_ID = 0xFC010207;
pub const OID_TCP6_OFFLOAD_STATS: NET_IF_OBJECT_ID = 0xFC010208;
pub const OID_IP4_OFFLOAD_STATS: NET_IF_OBJECT_ID = 0xFC010209;
pub const OID_IP6_OFFLOAD_STATS: NET_IF_OBJECT_ID = 0xFC01020A;
pub const OID_TCP_OFFLOAD_CURRENT_CONFIG: NET_IF_OBJECT_ID = 0xFC01020B;
pub const OID_TCP_OFFLOAD_PARAMETERS: NET_IF_OBJECT_ID = 0xFC01020C;
pub const OID_TCP_OFFLOAD_HARDWARE_CAPABILITIES: NET_IF_OBJECT_ID = 0xFC01020D;
pub const OID_TCP_CONNECTION_OFFLOAD_CURRENT_CONFIG: NET_IF_OBJECT_ID = 0xFC01020E;
pub const OID_TCP_CONNECTION_OFFLOAD_HARDWARE_CAPABILITIES: NET_IF_OBJECT_ID = 0xFC01020F;
pub const OID_OFFLOAD_ENCAPSULATION: NET_IF_OBJECT_ID = 0x0101010A;
pub const OID_TCP_TASK_IPSEC_OFFLOAD_V2_ADD_SA: NET_IF_OBJECT_ID = 0xFC030202;
pub const OID_TCP_TASK_IPSEC_OFFLOAD_V2_DELETE_SA: NET_IF_OBJECT_ID = 0xFC030203;
pub const OID_TCP_TASK_IPSEC_OFFLOAD_V2_UPDATE_SA: NET_IF_OBJECT_ID = 0xFC030204;
pub const OID_TCP_TASK_IPSEC_OFFLOAD_V2_ADD_SA_EX: NET_IF_OBJECT_ID = 0xFC030205;
pub const OID_FFP_SUPPORT: NET_IF_OBJECT_ID = 0xFC010210;
pub const OID_FFP_FLUSH: NET_IF_OBJECT_ID = 0xFC010211;
pub const OID_FFP_CONTROL: NET_IF_OBJECT_ID = 0xFC010212;
pub const OID_FFP_PARAMS: NET_IF_OBJECT_ID = 0xFC010213;
pub const OID_FFP_DATA: NET_IF_OBJECT_ID = 0xFC010214;
pub const OID_FFP_DRIVER_STATS: NET_IF_OBJECT_ID = 0xFC020210;
pub const OID_FFP_ADAPTER_STATS: NET_IF_OBJECT_ID = 0xFC020211;
pub const OID_TCP_CONNECTION_OFFLOAD_PARAMETERS: NET_IF_OBJECT_ID = 0xFC030201;
pub const OID_TUNNEL_INTERFACE_SET_OID: NET_IF_OBJECT_ID = 0x0f010106;
pub const OID_TUNNEL_INTERFACE_RELEASE_OID: NET_IF_OBJECT_ID = 0x0f010107;
pub const OID_QOS_RESERVED1: NET_IF_OBJECT_ID = 0xFB010100;
pub const OID_QOS_RESERVED2: NET_IF_OBJECT_ID = 0xFB010101;
pub const OID_QOS_RESERVED3: NET_IF_OBJECT_ID = 0xFB010102;
pub const OID_QOS_RESERVED4: NET_IF_OBJECT_ID = 0xFB010103;
pub const OID_QOS_RESERVED5: NET_IF_OBJECT_ID = 0xFB010104;
pub const OID_QOS_RESERVED6: NET_IF_OBJECT_ID = 0xFB010105;
pub const OID_QOS_RESERVED7: NET_IF_OBJECT_ID = 0xFB010106;
pub const OID_QOS_RESERVED8: NET_IF_OBJECT_ID = 0xFB010107;
pub const OID_QOS_RESERVED9: NET_IF_OBJECT_ID = 0xFB010108;
pub const OID_QOS_RESERVED10: NET_IF_OBJECT_ID = 0xFB010109;
pub const OID_QOS_RESERVED11: NET_IF_OBJECT_ID = 0xFB01010A;
pub const OID_QOS_RESERVED12: NET_IF_OBJECT_ID = 0xFB01010B;
pub const OID_QOS_RESERVED13: NET_IF_OBJECT_ID = 0xFB01010C;
pub const OID_QOS_RESERVED14: NET_IF_OBJECT_ID = 0xFB01010D;
pub const OID_QOS_RESERVED15: NET_IF_OBJECT_ID = 0xFB01010E;
pub const OID_QOS_RESERVED16: NET_IF_OBJECT_ID = 0xFB01010F;
pub const OID_QOS_RESERVED17: NET_IF_OBJECT_ID = 0xFB010110;
pub const OID_QOS_RESERVED18: NET_IF_OBJECT_ID = 0xFB010111;
pub const OID_QOS_RESERVED19: NET_IF_OBJECT_ID = 0xFB010112;
pub const OID_QOS_RESERVED20: NET_IF_OBJECT_ID = 0xFB010113;
pub const OID_XBOX_ACC_RESERVED0: NET_IF_OBJECT_ID = 0xFA000000;
STRUCT!{struct NDIS_CO_DEVICE_PROFILE {
    DeviceDescription: NDIS_VAR_DATA_DESC,
    DevSpecificInfo: NDIS_VAR_DATA_DESC,
    ulTAPISupplementaryPassThru: ULONG,
    ulAddressModes: ULONG,
    ulNumAddresses: ULONG,
    ulBearerModes: ULONG,
    ulMaxTxRate: ULONG,
    ulMinTxRate: ULONG,
    ulMaxRxRate: ULONG,
    ulMinRxRate: ULONG,
    ulMediaModes: ULONG,
    ulGenerateToneModes: ULONG,
    ulGenerateToneMaxNumFreq: ULONG,
    ulGenerateDigitModes: ULONG,
    ulMonitorToneMaxNumFreq: ULONG,
    ulMonitorToneMaxNumEntries: ULONG,
    ulMonitorDigitModes: ULONG,
    ulGatherDigitsMinTimeout: ULONG,
    ulGatherDigitsMaxTimeout: ULONG,
    ulDevCapFlags: ULONG,
    ulMaxNumActiveCalls: ULONG,
    ulAnswerMode: ULONG,
    ulUUIAcceptSize: ULONG,
    ulUUIAnswerSize: ULONG,
    ulUUIMakeCallSize: ULONG,
    ulUUIDropSize: ULONG,
    ulUUISendUserUserInfoSize: ULONG,
    ulUUICallInfoSize: ULONG,
}}
pub type PNDIS_CO_DEVICE_PROFILE = *mut NDIS_CO_DEVICE_PROFILE;
pub type IPAddr = ULONG;
pub type IPMask = ULONG;
pub type SPI_TYPE = ULONG;
ENUM!{enum OFFLOAD_OPERATION_E {
    AUTHENTICATE = 1,
    ENCRYPT,
}}
STRUCT!{struct OFFLOAD_ALGO_INFO {
    algoIdentifier: ULONG,
    algoKeylen: ULONG,
    algoRounds: ULONG,
}}
pub type POFFLOAD_ALGO_INFO = *mut OFFLOAD_ALGO_INFO;
ENUM!{enum OFFLOAD_CONF_ALGO {
    OFFLOAD_IPSEC_CONF_NONE,
    OFFLOAD_IPSEC_CONF_DES,
    OFFLOAD_IPSEC_CONF_RESERVED,
    OFFLOAD_IPSEC_CONF_3_DES,
    OFFLOAD_IPSEC_CONF_MAX,
}}
ENUM!{enum OFFLOAD_INTEGRITY_ALGO {
    OFFLOAD_IPSEC_INTEGRITY_NONE,
    OFFLOAD_IPSEC_INTEGRITY_MD5,
    OFFLOAD_IPSEC_INTEGRITY_SHA,
    OFFLOAD_IPSEC_INTEGRITY_MAX,
}}
STRUCT!{struct OFFLOAD_SECURITY_ASSOCIATION {
    Operation: OFFLOAD_OPERATION_E,
    SPI: SPI_TYPE,
    IntegrityAlgo: OFFLOAD_ALGO_INFO,
    ConfAlgo: OFFLOAD_ALGO_INFO,
    Reserved: OFFLOAD_ALGO_INFO,
}}
pub type POFFLOAD_SECURITY_ASSOCIATION = *mut OFFLOAD_SECURITY_ASSOCIATION;
pub const OFFLOAD_MAX_SAS: usize = 3;
pub const OFFLOAD_INBOUND_SA: ULONG = 0x0001;
pub const OFFLOAD_OUTBOUND_SA: ULONG = 0x0002;
STRUCT!{struct OFFLOAD_IPSEC_ADD_SA {
    SrcAddr: IPAddr,
    SrcMask: IPMask,
    DestAddr: IPAddr,
    DestMask: IPMask,
    Protocol: ULONG,
    SrcPort: USHORT,
    DestPort: USHORT,
    SrcTunnelAddr: IPAddr,
    DestTunnelAddr: IPAddr,
    Flags: USHORT,
    NumSAs: SHORT,
    SecAssoc: [OFFLOAD_SECURITY_ASSOCIATION; OFFLOAD_MAX_SAS],
    OffloadHandle: HANDLE,
    KeyLen: ULONG,
    KeyMat: [UCHAR; 1],
}}
pub type POFFLOAD_IPSEC_ADD_SA = *mut OFFLOAD_IPSEC_ADD_SA;
STRUCT!{struct OFFLOAD_IPSEC_DELETE_SA {
    OffloadHandle: HANDLE,
}}
pub type POFFLOAD_IPSEC_DELETE_SA = *mut OFFLOAD_IPSEC_DELETE_SA;
ENUM!{enum UDP_ENCAP_TYPE {
    OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_IKE,
    OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_OTHER,
}}
pub type PUDP_ENCAP_TYPE = *mut UDP_ENCAP_TYPE;
STRUCT!{struct OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY {
    UdpEncapType: UDP_ENCAP_TYPE,
    DstEncapPort: USHORT,
}}
pub type POFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY = *mut OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY;
STRUCT!{struct OFFLOAD_IPSEC_ADD_UDPESP_SA {
    SrcAddr: IPAddr,
    SrcMask: IPMask,
    DstAddr: IPAddr,
    DstMask: IPMask,
    Protocol: ULONG,
    SrcPort: USHORT,
    DstPort: USHORT,
    SrcTunnelAddr: IPAddr,
    DstTunnelAddr: IPAddr,
    Flags: USHORT,
    NumSAs: SHORT,
    SecAssoc: [OFFLOAD_SECURITY_ASSOCIATION; OFFLOAD_MAX_SAS],
    OffloadHandle: HANDLE,
    EncapTypeEntry: OFFLOAD_IPSEC_UDPESP_ENCAPTYPE_ENTRY,
    EncapTypeEntryOffldHandle: HANDLE,
    KeyLen: ULONG,
    KeyMat: [UCHAR; 1],
}}
pub type POFFLOAD_IPSEC_ADD_UDPESP_SA = *mut OFFLOAD_IPSEC_ADD_UDPESP_SA;
STRUCT!{struct OFFLOAD_IPSEC_DELETE_UDPESP_SA {
    OffloadHandle: HANDLE,
    EncapTypeEntryOffldHandle: HANDLE,
}}
pub type POFFLOAD_IPSEC_DELETE_UDPESP_SA = *mut OFFLOAD_IPSEC_DELETE_UDPESP_SA;
pub type NDIS_VLAN_ID = ULONG;
ENUM!{enum NDIS_MEDIUM {
    NdisMedium802_3,
    NdisMedium802_5,
    NdisMediumFddi,
    NdisMediumWan,
    NdisMediumLocalTalk,
    NdisMediumDix,
    NdisMediumArcnetRaw,
    NdisMediumArcnet878_2,
    NdisMediumAtm,
    NdisMediumWirelessWan,
    NdisMediumIrda,
    NdisMediumBpc,
    NdisMediumCoWan,
    NdisMedium1394,
    NdisMediumInfiniBand,
    NdisMediumTunnel,
    NdisMediumNative802_11,
    NdisMediumLoopback,
    NdisMediumWiMAX,
    NdisMediumIP,
    NdisMediumMax,
}}
pub type PNDIS_MEDIUM = *mut NDIS_MEDIUM;
ENUM!{enum NDIS_PHYSICAL_MEDIUM {
    NdisPhysicalMediumUnspecified,
    NdisPhysicalMediumWirelessLan,
    NdisPhysicalMediumCableModem,
    NdisPhysicalMediumPhoneLine,
    NdisPhysicalMediumPowerLine,
    NdisPhysicalMediumDSL,
    NdisPhysicalMediumFibreChannel,
    NdisPhysicalMedium1394,
    NdisPhysicalMediumWirelessWan,
    NdisPhysicalMediumNative802_11,
    NdisPhysicalMediumBluetooth,
    NdisPhysicalMediumInfiniband,
    NdisPhysicalMediumWiMax,
    NdisPhysicalMediumUWB,
    NdisPhysicalMedium802_3,
    NdisPhysicalMedium802_5,
    NdisPhysicalMediumIrda,
    NdisPhysicalMediumWiredWAN,
    NdisPhysicalMediumWiredCoWan,
    NdisPhysicalMediumOther,
    NdisPhysicalMediumNative802_15_4,
    NdisPhysicalMediumMax,
}}
pub type PNDIS_PHYSICAL_MEDIUM = *mut NDIS_PHYSICAL_MEDIUM;
pub const NDIS_PROTOCOL_ID_DEFAULT: UCHAR = 0x00;
pub const NDIS_PROTOCOL_ID_TCP_IP: UCHAR = 0x02;
pub const NDIS_PROTOCOL_ID_IP6: UCHAR = 0x03;
pub const NDIS_PROTOCOL_ID_IPX: UCHAR = 0x06;
pub const NDIS_PROTOCOL_ID_NBF: UCHAR = 0x07;
pub const NDIS_PROTOCOL_ID_MAX: UCHAR = 0x0F;
pub const NDIS_PROTOCOL_ID_MASK: UCHAR = 0x0F;
STRUCT!{struct TRANSPORT_HEADER_OFFSET {
    ProtocolType: USHORT,
    HeaderOffset: USHORT,
}}
pub type PTRANSPORT_HEADER_OFFSET = *mut TRANSPORT_HEADER_OFFSET;
STRUCT!{struct NETWORK_ADDRESS {
    AddressLength: USHORT,
    AddressType: USHORT,
    Address: [UCHAR; 1],
}}
pub type PNETWORK_ADDRESS = *mut NETWORK_ADDRESS;
STRUCT!{struct NETWORK_ADDRESS_LIST {
    AddressCount: LONG,
    AddressType: USHORT,
    Address: [NETWORK_ADDRESS; 1],
}}
pub type PNETWORK_ADDRESS_LIST = *mut NETWORK_ADDRESS_LIST;
STRUCT!{struct NETWORK_ADDRESS_IP {
    sin_port: USHORT,
    in_addr: ULONG,
    sin_zero: [UCHAR; 8],
}}
pub type PNETWORK_ADDRESS_IP = *mut NETWORK_ADDRESS_IP;
pub const NETWORK_ADDRESS_LENGTH_IP: usize = 16;
STRUCT!{struct NETWORK_ADDRESS_IP6 {
    sin6_port: USHORT,
    sin6_flowinfo: ULONG,
    sin6_addr: [USHORT; 6],
    sin6_scope_id: ULONG,
}}
pub type PNETWORK_ADDRESS_IP6 = *mut NETWORK_ADDRESS_IP6;
pub const NETWORK_ADDRESS_LENGTH_IP6: usize = 28;
STRUCT!{struct NETWORK_ADDRESS_IPX {
    NetworkAddress: ULONG,
    NodeAddress: [UCHAR; 6],
    Socket: USHORT,
}}
pub type PNETWORK_ADDRESS_IPX = *mut NETWORK_ADDRESS_IPX;
pub const NETWORK_ADDRESS_LENGTH_IPX: usize = 12;
ENUM!{enum NDIS_HARDWARE_STATUS {
    NdisHardwareStatusReady,
    NdisHardwareStatusInitializing,
    NdisHardwareStatusReset,
    NdisHardwareStatusClosing,
    NdisHardwareStatusNotReady,
}}
pub type PNDIS_HARDWARE_STATUS = *mut NDIS_HARDWARE_STATUS;
STRUCT!{struct GEN_GET_TIME_CAPS {
    Flags: ULONG,
    ClockPrecision: ULONG,
}}
pub type PGEN_GET_TIME_CAPS = *mut GEN_GET_TIME_CAPS;
pub const READABLE_LOCAL_CLOCK: ULONG = 0x00000001;
pub const CLOCK_NETWORK_DERIVED: ULONG = 0x00000002;
pub const CLOCK_PRECISION: ULONG = 0x00000004;
pub const RECEIVE_TIME_INDICATION_CAPABLE: ULONG = 0x00000008;
pub const TIMED_SEND_CAPABLE: ULONG = 0x00000010;
pub const TIME_STAMP_CAPABLE: ULONG = 0x00000020;
STRUCT!{struct GEN_GET_NETCARD_TIME {
    ReadTime: ULONGLONG,
}}
pub type PGEN_GET_NETCARD_TIME = *mut GEN_GET_NETCARD_TIME;
STRUCT!{struct NDIS_PM_PACKET_PATTERN {
    Priority: ULONG,
    Reserved: ULONG,
    MaskSize: ULONG,
    PatternOffset: ULONG,
    PatternSize: ULONG,
    PatternFlags: ULONG,
}}
pub type PNDIS_PM_PACKET_PATTERN = *mut NDIS_PM_PACKET_PATTERN;
ENUM!{enum NDIS_DEVICE_POWER_STATE {
    NdisDeviceStateUnspecified = 0,
    NdisDeviceStateD0,
    NdisDeviceStateD1,
    NdisDeviceStateD2,
    NdisDeviceStateD3,
    NdisDeviceStateMaximum,
}}
pub type PNDIS_DEVICE_POWER_STATE = *mut NDIS_DEVICE_POWER_STATE;
STRUCT!{struct NDIS_PM_WAKE_UP_CAPABILITIES {
    MinMagicPacketWakeUp: NDIS_DEVICE_POWER_STATE,
    MinPatternWakeUp: NDIS_DEVICE_POWER_STATE,
    MinLinkChangeWakeUp: NDIS_DEVICE_POWER_STATE,
}}
pub type PNDIS_PM_WAKE_UP_CAPABILITIES = *mut NDIS_PM_WAKE_UP_CAPABILITIES;
pub const NDIS_DEVICE_WAKE_UP_ENABLE: ULONG = 0x00000001;
pub const NDIS_DEVICE_WAKE_ON_PATTERN_MATCH_ENABLE: ULONG = 0x00000002;
pub const NDIS_DEVICE_WAKE_ON_MAGIC_PACKET_ENABLE: ULONG = 0x00000004;
STRUCT!{struct NDIS_PNP_CAPABILITIES {
    Flags: ULONG,
    WakeUpCapabilities: NDIS_PM_WAKE_UP_CAPABILITIES,
}}
pub type PNDIS_PNP_CAPABILITIES = *mut NDIS_PNP_CAPABILITIES;
ENUM!{enum NDIS_FDDI_ATTACHMENT_TYPE {
    NdisFddiTypeIsolated = 1,
    NdisFddiTypeLocalA,
    NdisFddiTypeLocalB,
    NdisFddiTypeLocalAB,
    NdisFddiTypeLocalS,
    NdisFddiTypeWrapA,
    NdisFddiTypeWrapB,
    NdisFddiTypeWrapAB,
    NdisFddiTypeWrapS,
    NdisFddiTypeCWrapA,
    NdisFddiTypeCWrapB,
    NdisFddiTypeCWrapS,
    NdisFddiTypeThrough,
}}
pub type PNDIS_FDDI_ATTACHMENT_TYPE = *mut NDIS_FDDI_ATTACHMENT_TYPE;
ENUM!{enum NDIS_FDDI_RING_MGT_STATE {
    NdisFddiRingIsolated = 1,
    NdisFddiRingNonOperational,
    NdisFddiRingOperational,
    NdisFddiRingDetect,
    NdisFddiRingNonOperationalDup,
    NdisFddiRingOperationalDup,
    NdisFddiRingDirected,
    NdisFddiRingTrace,
}}
pub type PNDIS_FDDI_RING_MGT_STATE = *mut NDIS_FDDI_RING_MGT_STATE;
ENUM!{enum NDIS_FDDI_LCONNECTION_STATE {
    NdisFddiStateOff = 1,
    NdisFddiStateBreak,
    NdisFddiStateTrace,
    NdisFddiStateConnect,
    NdisFddiStateNext,
    NdisFddiStateSignal,
    NdisFddiStateJoin,
    NdisFddiStateVerify,
    NdisFddiStateActive,
    NdisFddiStateMaintenance,
}}
pub type PNDIS_FDDI_LCONNECTION_STATE = *mut NDIS_FDDI_LCONNECTION_STATE;
ENUM!{enum NDIS_WAN_MEDIUM_SUBTYPE {
    NdisWanMediumHub,
    NdisWanMediumX_25,
    NdisWanMediumIsdn,
    NdisWanMediumSerial,
    NdisWanMediumFrameRelay,
    NdisWanMediumAtm,
    NdisWanMediumSonet,
    NdisWanMediumSW56K,
    NdisWanMediumPPTP,
    NdisWanMediumL2TP,
    NdisWanMediumIrda,
    NdisWanMediumParallel,
    NdisWanMediumPppoe,
    NdisWanMediumSSTP,
    NdisWanMediumAgileVPN,
    NdisWanMediumGre,
    NdisWanMediumSubTypeMax,
}}
pub type PNDIS_WAN_MEDIUM_SUBTYPE = *mut NDIS_WAN_MEDIUM_SUBTYPE;
ENUM!{enum NDIS_WAN_HEADER_FORMAT {
    NdisWanHeaderNative,
    NdisWanHeaderEthernet,
}}
pub type PNDIS_WAN_HEADER_FORMAT = *mut NDIS_WAN_HEADER_FORMAT;
ENUM!{enum NDIS_WAN_QUALITY {
    NdisWanRaw,
    NdisWanErrorControl,
    NdisWanReliable,
}}
pub type PNDIS_WAN_QUALITY = *mut NDIS_WAN_QUALITY;
STRUCT!{struct NDIS_WAN_PROTOCOL_CAPS {
    Flags: ULONG,
    Reserved: ULONG,
}}
pub type PNDIS_WAN_PROTOCOL_CAPS = *mut NDIS_WAN_PROTOCOL_CAPS;
pub const WAN_PROTOCOL_KEEPS_STATS: ULONG = 0x00000001;
ENUM!{enum NDIS_802_5_RING_STATE {
    NdisRingStateOpened = 1,
    NdisRingStateClosed,
    NdisRingStateOpening,
    NdisRingStateClosing,
    NdisRingStateOpenFailure,
    NdisRingStateRingFailure,
}}
pub type PNDIS_802_5_RING_STATE = *mut NDIS_802_5_RING_STATE;
ENUM!{enum NDIS_MEDIA_STATE {
    NdisMediaStateConnected,
    NdisMediaStateDisconnected,
}}
pub type PNDIS_MEDIA_STATE = *mut NDIS_MEDIA_STATE;
pub type Priority_802_3 = ULONG;
STRUCT!{struct NDIS_CO_LINK_SPEED {
    Outbound: ULONG,
    Inbound: ULONG,
}}
pub type PNDIS_CO_LINK_SPEED = *mut NDIS_CO_LINK_SPEED;
STRUCT!{struct NDIS_LINK_SPEED {
    XmitLinkSpeed: ULONG64,
    RcvLinkSpeed: ULONG64,
}}
pub type PNDIS_LINK_SPEED = *mut NDIS_LINK_SPEED;
pub type NDIS_STATUS = c_int;
pub type PNDIS_STATUS = *mut c_int;
UNION!{union NDIS_GUID_u {
    [u32; 1],
    Oid Oid_mut: NDIS_OID,
    Status Status_mut: NDIS_STATUS,
}}
STRUCT!{struct NDIS_GUID {
    Guid: GUID,
    u: NDIS_GUID_u,
    Size: ULONG,
    Flags: ULONG,
}}
pub type PNDIS_GUID = *mut NDIS_GUID;
pub const fNDIS_GUID_TO_OID: ULONG = 0x00000001;
pub const fNDIS_GUID_TO_STATUS: ULONG = 0x00000002;
pub const fNDIS_GUID_ANSI_STRING: ULONG = 0x00000004;
pub const fNDIS_GUID_UNICODE_STRING: ULONG = 0x00000008;
pub const fNDIS_GUID_ARRAY: ULONG = 0x00000010;
pub const fNDIS_GUID_ALLOW_READ: ULONG = 0x00000020;
pub const fNDIS_GUID_ALLOW_WRITE: ULONG = 0x00000040;
pub const fNDIS_GUID_METHOD: ULONG = 0x00000080;
pub const fNDIS_GUID_NDIS_RESERVED: ULONG = 0x00000100;
pub const fNDIS_GUID_SUPPORT_COMMON_HEADER: ULONG = 0x00000200;
pub const NDIS_PACKET_TYPE_DIRECTED: ULONG = 0x00000001;
pub const NDIS_PACKET_TYPE_MULTICAST: ULONG = 0x00000002;
pub const NDIS_PACKET_TYPE_ALL_MULTICAST: ULONG = 0x00000004;
pub const NDIS_PACKET_TYPE_BROADCAST: ULONG = 0x00000008;
pub const NDIS_PACKET_TYPE_SOURCE_ROUTING: ULONG = 0x00000010;
pub const NDIS_PACKET_TYPE_PROMISCUOUS: ULONG = 0x00000020;
pub const NDIS_PACKET_TYPE_SMT: ULONG = 0x00000040;
pub const NDIS_PACKET_TYPE_ALL_LOCAL: ULONG = 0x00000080;
pub const NDIS_PACKET_TYPE_GROUP: ULONG = 0x00001000;
pub const NDIS_PACKET_TYPE_ALL_FUNCTIONAL: ULONG = 0x00002000;
pub const NDIS_PACKET_TYPE_FUNCTIONAL: ULONG = 0x00004000;
pub const NDIS_PACKET_TYPE_MAC_FRAME: ULONG = 0x00008000;
pub const NDIS_PACKET_TYPE_NO_LOCAL: ULONG = 0x00010000;
pub const NDIS_RING_SIGNAL_LOSS: ULONG = 0x00008000;
pub const NDIS_RING_HARD_ERROR: ULONG = 0x00004000;
pub const NDIS_RING_SOFT_ERROR: ULONG = 0x00002000;
pub const NDIS_RING_TRANSMIT_BEACON: ULONG = 0x00001000;
pub const NDIS_RING_LOBE_WIRE_FAULT: ULONG = 0x00000800;
pub const NDIS_RING_AUTO_REMOVAL_ERROR: ULONG = 0x00000400;
pub const NDIS_RING_REMOVE_RECEIVED: ULONG = 0x00000200;
pub const NDIS_RING_COUNTER_OVERFLOW: ULONG = 0x00000100;
pub const NDIS_RING_SINGLE_STATION: ULONG = 0x00000080;
pub const NDIS_RING_RING_RECOVERY: ULONG = 0x00000040;
pub const NDIS_PROT_OPTION_ESTIMATED_LENGTH: ULONG = 0x00000001;
pub const NDIS_PROT_OPTION_NO_LOOPBACK: ULONG = 0x00000002;
pub const NDIS_PROT_OPTION_NO_RSVD_ON_RCVPKT: ULONG = 0x00000004;
pub const NDIS_PROT_OPTION_SEND_RESTRICTED: ULONG = 0x00000008;
pub const NDIS_MAC_OPTION_COPY_LOOKAHEAD_DATA: ULONG = 0x00000001;
pub const NDIS_MAC_OPTION_RECEIVE_SERIALIZED: ULONG = 0x00000002;
pub const NDIS_MAC_OPTION_TRANSFERS_NOT_PEND: ULONG = 0x00000004;
pub const NDIS_MAC_OPTION_NO_LOOPBACK: ULONG = 0x00000008;
pub const NDIS_MAC_OPTION_FULL_DUPLEX: ULONG = 0x00000010;
pub const NDIS_MAC_OPTION_EOTX_INDICATION: ULONG = 0x00000020;
pub const NDIS_MAC_OPTION_8021P_PRIORITY: ULONG = 0x00000040;
pub const NDIS_MAC_OPTION_SUPPORTS_MAC_ADDRESS_OVERWRITE: ULONG = 0x00000080;
pub const NDIS_MAC_OPTION_RECEIVE_AT_DPC: ULONG = 0x00000100;
pub const NDIS_MAC_OPTION_8021Q_VLAN: ULONG = 0x00000200;
pub const NDIS_MAC_OPTION_RESERVED: ULONG = 0x80000000;
pub const NDIS_MEDIA_CAP_TRANSMIT: ULONG = 0x00000001;
pub const NDIS_MEDIA_CAP_RECEIVE: ULONG = 0x00000002;
pub const NDIS_CO_MAC_OPTION_DYNAMIC_LINK_SPEED: ULONG = 0x00000001;
STRUCT!{struct NDIS_IRDA_PACKET_INFO {
    ExtraBOFs: ULONG,
    MinTurnAroundTime: ULONG,
}}
pub type PNDIS_IRDA_PACKET_INFO = *mut NDIS_IRDA_PACKET_INFO;
#[inline]
pub fn NDIS_MAKE_NET_LUID(_pNetLuid: &mut NET_LUID, _IfType: ULONG64, _NetLuidIndex: ULONG64) {
    unsafe {
        _pNetLuid.Info_mut().set_IfType(_IfType);
        _pNetLuid.Info_mut().set_NetLuidIndex(_NetLuidIndex);
        _pNetLuid.Info_mut().set_Reserved(0);
    }
}
pub const NDIS_IF_MAX_STRING_SIZE: usize = IF_MAX_STRING_SIZE;
pub type NDIS_IF_COUNTED_STRING = IF_COUNTED_STRING;
pub type PNDIS_IF_COUNTED_STRING = *mut IF_COUNTED_STRING;
pub const NDIS_MAX_PHYS_ADDRESS_LENGTH: usize = IF_MAX_PHYS_ADDRESS_LENGTH;
pub type NDIS_IF_PHYSICAL_ADDRESS = IF_PHYSICAL_ADDRESS;
pub type PNDIS_IF_PHYSICAL_ADDRESS = *mut IF_PHYSICAL_ADDRESS;
pub type NDIS_MEDIA_CONNECT_STATE = NET_IF_MEDIA_CONNECT_STATE;
pub type PNDIS_MEDIA_CONNECT_STATE = *mut NET_IF_MEDIA_CONNECT_STATE;
pub type NDIS_MEDIA_DUPLEX_STATE = NET_IF_MEDIA_DUPLEX_STATE;
pub type PNDIS_MEDIA_DUPLEX_STATE = *mut NET_IF_MEDIA_DUPLEX_STATE;
ENUM!{enum NDIS_SUPPORTED_PAUSE_FUNCTIONS {
    NdisPauseFunctionsUnsupported,
    NdisPauseFunctionsSendOnly,
    NdisPauseFunctionsReceiveOnly,
    NdisPauseFunctionsSendAndReceive,
    NdisPauseFunctionsUnknown,
}}
pub type PNDIS_SUPPORTED_PAUSE_FUNCTIONS = *mut NDIS_SUPPORTED_PAUSE_FUNCTIONS;
pub const NDIS_LINK_STATE_XMIT_LINK_SPEED_AUTO_NEGOTIATED: ULONG = 0x00000001;
pub const NDIS_LINK_STATE_RCV_LINK_SPEED_AUTO_NEGOTIATED: ULONG = 0x00000002;
pub const NDIS_LINK_STATE_DUPLEX_AUTO_NEGOTIATED: ULONG = 0x00000004;
pub const NDIS_LINK_STATE_PAUSE_FUNCTIONS_AUTO_NEGOTIATED: ULONG = 0x00000008;
pub const NDIS_LINK_STATE_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_LINK_STATE {
    Header: NDIS_OBJECT_HEADER,
    MediaConnectState: NDIS_MEDIA_CONNECT_STATE,
    MediaDuplexState: NDIS_MEDIA_DUPLEX_STATE,
    XmitLinkSpeed: ULONG64,
    RcvLinkSpeed: ULONG64,
    PauseFunctions: NDIS_SUPPORTED_PAUSE_FUNCTIONS,
    AutoNegotiationFlags: ULONG,
}}
pub type PNDIS_LINK_STATE = *mut NDIS_LINK_STATE;
pub const NDIS_LINK_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_LINK_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    MediaDuplexState: NDIS_MEDIA_DUPLEX_STATE,
    XmitLinkSpeed: ULONG64,
    RcvLinkSpeed: ULONG64,
    PauseFunctions: NDIS_SUPPORTED_PAUSE_FUNCTIONS,
    AutoNegotiationFlags: ULONG,
}}
pub type PNDIS_LINK_PARAMETERS = *mut NDIS_LINK_PARAMETERS;
pub const NDIS_OPER_STATE_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_OPER_STATE {
    Header: NDIS_OBJECT_HEADER,
    OperationalStatus: NET_IF_OPER_STATUS,
    OperationalStatusFlags: ULONG,
}}
pub type PNDIS_OPER_STATE = *mut NDIS_OPER_STATE;
STRUCT!{struct NDIS_IP_OPER_STATUS {
    AddressFamily: ULONG,
    OperationalStatus: NET_IF_OPER_STATUS,
    OperationalStatusFlags: ULONG,
}}
pub type PNDIS_IP_OPER_STATUS = *mut NDIS_IP_OPER_STATUS;
pub const MAXIMUM_IP_OPER_STATUS_ADDRESS_FAMILIES_SUPPORTED: usize = 32;
pub const NDIS_IP_OPER_STATUS_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_IP_OPER_STATUS_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    NumberofAddressFamiliesReturned: ULONG,
    IpOperationalStatus: [NDIS_IP_OPER_STATUS; MAXIMUM_IP_OPER_STATUS_ADDRESS_FAMILIES_SUPPORTED],
}}
pub type PNDIS_IP_OPER_STATUS_INFO = *mut NDIS_IP_OPER_STATUS_INFO;
pub const NDIS_IP_OPER_STATE_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_IP_OPER_STATE {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    IpOperationalStatus: NDIS_IP_OPER_STATUS,
}}
pub type PNDIS_IP_OPER_STATE = *mut NDIS_IP_OPER_STATE;
pub const NDIS_OFFLOAD_PARAMETERS_NO_CHANGE: UCHAR = 0;
pub const NDIS_OFFLOAD_PARAMETERS_TX_RX_DISABLED: UCHAR = 1;
pub const NDIS_OFFLOAD_PARAMETERS_TX_ENABLED_RX_DISABLED: UCHAR = 2;
pub const NDIS_OFFLOAD_PARAMETERS_RX_ENABLED_TX_DISABLED: UCHAR = 3;
pub const NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED: UCHAR = 4;
pub const NDIS_OFFLOAD_PARAMETERS_LSOV1_DISABLED: UCHAR = 1;
pub const NDIS_OFFLOAD_PARAMETERS_LSOV1_ENABLED: UCHAR = 2;
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV1_DISABLED: UCHAR = 1;
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV1_AH_ENABLED: UCHAR = 2;
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV1_ESP_ENABLED: UCHAR = 3;
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV1_AH_AND_ESP_ENABLED: UCHAR = 4;
pub const NDIS_OFFLOAD_PARAMETERS_LSOV2_DISABLED: UCHAR = 1;
pub const NDIS_OFFLOAD_PARAMETERS_LSOV2_ENABLED: UCHAR = 2;
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV2_DISABLED: UCHAR = 1;
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV2_AH_ENABLED: UCHAR = 2;
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV2_ESP_ENABLED: UCHAR = 3;
pub const NDIS_OFFLOAD_PARAMETERS_IPSECV2_AH_AND_ESP_ENABLED: UCHAR = 4;
pub const NDIS_OFFLOAD_PARAMETERS_RSC_DISABLED: UCHAR = 1;
pub const NDIS_OFFLOAD_PARAMETERS_RSC_ENABLED: UCHAR = 2;
pub const NDIS_ENCAPSULATION_TYPE_GRE_MAC: UCHAR = 0x00000001;
pub const NDIS_ENCAPSULATION_TYPE_VXLAN: UCHAR = 0x00000002;
pub const NDIS_OFFLOAD_PARAMETERS_CONNECTION_OFFLOAD_DISABLED: UCHAR = 1;
pub const NDIS_OFFLOAD_PARAMETERS_CONNECTION_OFFLOAD_ENABLED: UCHAR = 2;
pub const NDIS_OFFLOAD_PARAMETERS_REVISION_1: UCHAR = 1;
pub const NDIS_OFFLOAD_PARAMETERS_REVISION_2: UCHAR = 2;
pub const NDIS_OFFLOAD_PARAMETERS_REVISION_3: UCHAR = 3;
pub const NDIS_OFFLOAD_PARAMETERS_REVISION_4: UCHAR = 4;
pub const NDIS_OFFLOAD_PARAMETERS_SKIP_REGISTRY_UPDATE: ULONG = 0x00000001;
STRUCT!{struct _VXLAN_PARAMETERS {
    VxlanUDPPortNumber: USHORT,
}}
UNION!{union _ENCAPSULATION_PROTOCOL_PARAMETERS {
    [u32; 1],
    VxlanParameters VxlanParameters_mut: _VXLAN_PARAMETERS,
    Value Value_mut: ULONG,
}}
STRUCT!{struct NDIS_OFFLOAD_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    IPv4Checksum: UCHAR,
    TCPIPv4Checksum: UCHAR,
    UDPIPv4Checksum: UCHAR,
    TCPIPv6Checksum: UCHAR,
    UDPIPv6Checksum: UCHAR,
    LsoV1: UCHAR,
    IPsecV1: UCHAR,
    LsoV2IPv4: UCHAR,
    LsoV2IPv6: UCHAR,
    TcpConnectionIPv4: UCHAR,
    TcpConnectionIPv6: UCHAR,
    Flags: ULONG,
    IPsecV2: UCHAR,
    IPsecV2IPv4: UCHAR,
    RscIPv4: UCHAR,
    RscIPv6: UCHAR,
    EncapsulatedPacketTaskOffload: UCHAR,
    EncapsulationTypes: UCHAR,
    EncapsulationProtocolParameters: _ENCAPSULATION_PROTOCOL_PARAMETERS,
}}
pub type PNDIS_OFFLOAD_PARAMETERS = *mut NDIS_OFFLOAD_PARAMETERS;
pub const NDIS_OFFLOAD_NOT_SUPPORTED: ULONG = 0;
pub const NDIS_OFFLOAD_SUPPORTED: ULONG = 1;
pub const NDIS_OFFLOAD_SET_NO_CHANGE: ULONG = 0;
pub const NDIS_OFFLOAD_SET_ON: ULONG = 1;
pub const NDIS_OFFLOAD_SET_OFF: ULONG = 2;
pub const NDIS_ENCAPSULATION_NOT_SUPPORTED: ULONG = 0x00000000;
pub const NDIS_ENCAPSULATION_NULL: ULONG = 0x00000001;
pub const NDIS_ENCAPSULATION_IEEE_802_3: ULONG = 0x00000002;
pub const NDIS_ENCAPSULATION_IEEE_802_3_P_AND_Q: ULONG = 0x00000004;
pub const NDIS_ENCAPSULATION_IEEE_802_3_P_AND_Q_IN_OOB: ULONG = 0x00000008;
pub const NDIS_ENCAPSULATION_IEEE_LLC_SNAP_ROUTED: ULONG = 0x00000010;
STRUCT!{struct NDIS_TCP_LARGE_SEND_OFFLOAD_V1_IPv4 {
    Encapsulation: ULONG,
    MaxOffLoadSize: ULONG,
    MinSegmentCount: ULONG,
    BitFields: ULONG,
}}
BITFIELD!(NDIS_TCP_LARGE_SEND_OFFLOAD_V1_IPv4 BitFields: ULONG [
    TcpOptions set_TcpOptions[0..2],
    IpOptions set_IpOptions[2..4],
]);
STRUCT!{struct NDIS_TCP_LARGE_SEND_OFFLOAD_V1 {
    IPv4: NDIS_TCP_LARGE_SEND_OFFLOAD_V1_IPv4,
}}
pub type PNDIS_TCP_LARGE_SEND_OFFLOAD_V1 = *mut NDIS_TCP_LARGE_SEND_OFFLOAD_V1;
STRUCT!{struct NDIS_TCP_IP_CHECKSUM_OFFLOAD_IPv4Transmit {
    Encapsulation: ULONG,
    BitFields: ULONG,
}}
BITFIELD!(NDIS_TCP_IP_CHECKSUM_OFFLOAD_IPv4Transmit BitFields: ULONG [
    IpOptionsSupported set_IpOptionsSupported[0..2],
    TcpOptionsSupported set_TcpOptionsSupported[2..4],
    TcpChecksum set_TcpChecksum[4..6],
    UdpChecksum set_UdpChecksum[6..8],
    IpChecksum set_IpChecksum[8..10],
]);
STRUCT!{struct NDIS_TCP_IP_CHECKSUM_OFFLOAD_IPv4Receive {
    Encapsulation: ULONG,
    BitFields: ULONG,
}}
BITFIELD!(NDIS_TCP_IP_CHECKSUM_OFFLOAD_IPv4Receive BitFields: ULONG [
    IpOptionsSupported set_IpOptionsSupported[0..2],
    TcpOptionsSupported set_TcpOptionsSupported[2..4],
    TcpChecksum set_TcpChecksum[4..6],
    UdpChecksum set_UdpChecksum[6..8],
    IpChecksum set_IpChecksum[8..10],
]);
STRUCT!{struct NDIS_TCP_IP_CHECKSUM_OFFLOAD_IPv6Transmit {
    Encapsulation: ULONG,
    BitFields: ULONG,
}}
BITFIELD!(NDIS_TCP_IP_CHECKSUM_OFFLOAD_IPv6Transmit BitFields: ULONG [
    IpExtensionHeadersSupported set_IpExtensionHeadersSupported[0..2],
    TcpOptionsSupported set_TcpOptionsSupported[2..4],
    TcpChecksum set_TcpChecksum[4..6],
    UdpChecksum set_UdpChecksum[6..8],
]);
STRUCT!{struct NDIS_TCP_IP_CHECKSUM_OFFLOAD_IPv6Receive {
    Encapsulation: ULONG,
    BitFields: ULONG,
}}
BITFIELD!(NDIS_TCP_IP_CHECKSUM_OFFLOAD_IPv6Receive BitFields: ULONG [
    IpExtensionHeadersSupported set_IpExtensionHeadersSupported[0..2],
    TcpOptionsSupported set_TcpOptionsSupported[2..4],
    TcpChecksum set_TcpChecksum[4..6],
    UdpChecksum set_UdpChecksum[6..8],
]);
STRUCT!{struct NDIS_TCP_IP_CHECKSUM_OFFLOAD {
    IPv4Transmit: NDIS_TCP_IP_CHECKSUM_OFFLOAD_IPv4Transmit,
    IPv4Receive: NDIS_TCP_IP_CHECKSUM_OFFLOAD_IPv4Receive,
    IPv6Transmit: NDIS_TCP_IP_CHECKSUM_OFFLOAD_IPv6Transmit,
    IPv6Receive: NDIS_TCP_IP_CHECKSUM_OFFLOAD_IPv6Receive,
}}
pub type PNDIS_TCP_IP_CHECKSUM_OFFLOAD = *mut NDIS_TCP_IP_CHECKSUM_OFFLOAD;
STRUCT!{struct NDIS_IPSEC_OFFLOAD_V1_Supported {
    Encapsulation: ULONG,
    AhEspCombined: ULONG,
    TransportTunnelCombined: ULONG,
    IPv4Options: ULONG,
    Flags: ULONG,
}}
STRUCT!{struct NDIS_IPSEC_OFFLOAD_V1_IPv4AH {
    BitFields: ULONG,
}}
BITFIELD!(NDIS_IPSEC_OFFLOAD_V1_IPv4AH BitFields: ULONG [
    Md5 set_Md5[0..2],
    Sha_1 set_Sha_1[2..4],
    Transport set_Transport[4..6],
    Tunnel set_Tunnel[6..8],
    Send set_Send[8..10],
    Receive set_Receive[10..12],
]);
STRUCT!{struct NDIS_IPSEC_OFFLOAD_V1_IPv4ESP {
    BitFields: ULONG,
}}
BITFIELD!(NDIS_IPSEC_OFFLOAD_V1_IPv4ESP BitFields: ULONG [
    Des set_Des[0..2],
    Reserved set_Reserved[2..4],
    TripleDes set_TripleDes[4..6],
    NullEsp set_NullEsp[6..8],
    Transport set_Transport[8..10],
    Tunnel set_Tunnel[10..12],
    Send set_Send[12..14],
    Receive set_Receive[14..16],
]);
STRUCT!{struct NDIS_IPSEC_OFFLOAD_V1 {
    Supported: NDIS_IPSEC_OFFLOAD_V1_Supported,
    IPv4AH: NDIS_IPSEC_OFFLOAD_V1_IPv4AH,
    IPv4ESP: NDIS_IPSEC_OFFLOAD_V1_IPv4ESP,
}}
pub type PNDIS_IPSEC_OFFLOAD_V1 = *mut NDIS_IPSEC_OFFLOAD_V1;
STRUCT!{struct NDIS_TCP_LARGE_SEND_OFFLOAD_V2_IPv4 {
    Encapsulation: ULONG,
    MaxOffLoadSize: ULONG,
    MinSegmentCount: ULONG,
}}
STRUCT!{struct NDIS_TCP_LARGE_SEND_OFFLOAD_V2_IPv6 {
    Encapsulation: ULONG,
    MaxOffLoadSize: ULONG,
    MinSegmentCount: ULONG,
    BitFields: ULONG,
}}
BITFIELD!(NDIS_TCP_LARGE_SEND_OFFLOAD_V2_IPv6 BitFields: ULONG [
    IpExtensionHeadersSupported set_IpExtensionHeadersSupported[0..2],
    TcpOptionsSupported set_TcpOptionsSupported[2..4],
]);
STRUCT!{struct NDIS_TCP_LARGE_SEND_OFFLOAD_V2 {
    IPv4: NDIS_TCP_LARGE_SEND_OFFLOAD_V2_IPv4,
    IPv6: NDIS_TCP_LARGE_SEND_OFFLOAD_V2_IPv6,
}}
pub type PNDIS_TCP_LARGE_SEND_OFFLOAD_V2 = *mut NDIS_TCP_LARGE_SEND_OFFLOAD_V2;
pub const IPSEC_OFFLOAD_V2_AUTHENTICATION_MD5: ULONG = 0x00000001;
pub const IPSEC_OFFLOAD_V2_AUTHENTICATION_SHA_1: ULONG = 0x00000002;
pub const IPSEC_OFFLOAD_V2_AUTHENTICATION_SHA_256: ULONG = 0x00000004;
pub const IPSEC_OFFLOAD_V2_AUTHENTICATION_AES_GCM_128: ULONG = 0x00000008;
pub const IPSEC_OFFLOAD_V2_AUTHENTICATION_AES_GCM_192: ULONG = 0x00000010;
pub const IPSEC_OFFLOAD_V2_AUTHENTICATION_AES_GCM_256: ULONG = 0x00000020;
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_NONE: ULONG = 0x00000001;
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_DES_CBC: ULONG = 0x00000002;
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_3_DES_CBC: ULONG = 0x00000004;
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_GCM_128: ULONG = 0x00000008;
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_GCM_192: ULONG = 0x00000010;
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_GCM_256: ULONG = 0x00000020;
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_CBC_128: ULONG = 0x00000040;
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_CBC_192: ULONG = 0x00000080;
pub const IPSEC_OFFLOAD_V2_ENCRYPTION_AES_CBC_256: ULONG = 0x00000100;
STRUCT!{struct NDIS_IPSEC_OFFLOAD_V2 {
    Encapsulation: ULONG,
    IPv6Supported: BOOLEAN,
    IPv4Options: BOOLEAN,
    IPv6NonIPsecExtensionHeaders: BOOLEAN,
    Ah: BOOLEAN,
    Esp: BOOLEAN,
    AhEspCombined: BOOLEAN,
    Transport: BOOLEAN,
    Tunnel: BOOLEAN,
    TransportTunnelCombined: BOOLEAN,
    LsoSupported: BOOLEAN,
    ExtendedSequenceNumbers: BOOLEAN,
    UdpEsp: ULONG,
    AuthenticationAlgorithms: ULONG,
    EncryptionAlgorithms: ULONG,
    SaOffloadCapacity: ULONG,
}}
pub type PNDIS_IPSEC_OFFLOAD_V2 = *mut NDIS_IPSEC_OFFLOAD_V2;
STRUCT!{struct NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD_IPv4 {
    Enabled: BOOLEAN,
}}
STRUCT!{struct NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD_IPv6 {
    Enabled: BOOLEAN,
}}
STRUCT!{struct NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD {
    IPv4: NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD_IPv4,
    IPv6: NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD_IPv6,
}}
pub type PNDIS_TCP_RECV_SEG_COALESCE_OFFLOAD = *mut NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD;
pub const NDIS_TCP_RECV_SEG_COALESC_OFFLOAD_REVISION_1: UCHAR = 1;
pub const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_NOT_SUPPORTED: ULONG = 0x00000000;
pub const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_INNER_IPV4: ULONG = 0x00000001;
pub const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_OUTER_IPV4: ULONG = 0x00000002;
pub const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_INNER_IPV6: ULONG = 0x00000004;
pub const NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_OUTER_IPV6: ULONG = 0x00000008;
STRUCT!{struct NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD {
    BitFields: ULONG,
    MaxHeaderSizeSupported: ULONG,
}}
BITFIELD!(NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD BitFields: ULONG [
    TransmitChecksumOffloadSupported set_TransmitChecksumOffloadSupported[0..4],
    ReceiveChecksumOffloadSupported set_ReceiveChecksumOffloadSupported[4..8],
    LsoV2Supported set_LsoV2Supported[8..12],
    RssSupported set_RssSupported[12..16],
    VmqSupported set_VmqSupported[16..20],
]);
pub type PNDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD = *mut NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD;
STRUCT!{struct _VXLAN_INFO {
    VxlanUDPPortNumber: USHORT,
    BitFields: USHORT,
}}
BITFIELD!(_VXLAN_INFO BitFields: USHORT [
    VxlanUDPPortNumberConfigurable set_VxlanUDPPortNumberConfigurable[0..1],
]);
UNION!{union _ENCAPSULATION_PROTOCOL_INFO {
    [u32; 1],
    VxlanInfo VxlanInfo_mut: _VXLAN_INFO,
    Value Value_mut: ULONG,
}}
STRUCT!{struct NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2 {
    BitFields: ULONG,
    MaxHeaderSizeSupported: ULONG,
    EncapsulationProtocolInfo: _ENCAPSULATION_PROTOCOL_INFO,
    Reserved1: ULONG,
    Reserved2: ULONG,
}}
BITFIELD!(NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2 BitFields: ULONG [
    TransmitChecksumOffloadSupported set_TransmitChecksumOffloadSupported[0..4],
    ReceiveChecksumOffloadSupported set_ReceiveChecksumOffloadSupported[4..8],
    LsoV2Supported set_LsoV2Supported[8..12],
    RssSupported set_RssSupported[12..16],
    VmqSupported set_VmqSupported[16..20],
    Reserved set_Reserved[20..32],
]);
pub type PNDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2 = *mut NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2;
ENUM!{enum NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS {
    NDIS_RFC6877_464XLAT_OFFLOAD_NOT_SUPPORTED = 0,
    NDIS_RFC6877_464XLAT_OFFLOAD_DISABLED,
    NDIS_RFC6877_464XLAT_OFFLOAD_ENABLED,
    NDIS_RFC6877_464XLAT_OFFLOAD_ON_DEMAND,
}}
STRUCT!{struct NDIS_RFC6877_464XLAT_OFFLOAD {
    XlatOffload: NDIS_RFC6877_464XLAT_OFFLOAD_OPTIONS,
    Flags: ULONG,
}}
pub type PNDIS_RFC6877_464XLAT_OFFLOAD = *mut NDIS_RFC6877_464XLAT_OFFLOAD;
pub const NDIS_OFFLOAD_FLAGS_GROUP_CHECKSUM_CAPABILITIES: ULONG = 0x00000001;
pub const IPSEC_OFFLOAD_V2_AND_TCP_CHECKSUM_COEXISTENCE: ULONG = 0x00000002;
pub const IPSEC_OFFLOAD_V2_AND_UDP_CHECKSUM_COEXISTENCE: ULONG = 0x00000004;
pub const NDIS_OFFLOAD_REVISION_1: UCHAR = 1;
pub const NDIS_OFFLOAD_REVISION_2: UCHAR = 2;
pub const NDIS_OFFLOAD_REVISION_3: UCHAR = 3;
pub const NDIS_OFFLOAD_REVISION_4: UCHAR = 4;
pub const NDIS_OFFLOAD_REVISION_5: UCHAR = 5;
STRUCT!{struct NDIS_OFFLOAD {
    Header: NDIS_OBJECT_HEADER,
    Checksum: NDIS_TCP_IP_CHECKSUM_OFFLOAD,
    LsoV1: NDIS_TCP_LARGE_SEND_OFFLOAD_V1,
    IPsecV1: NDIS_IPSEC_OFFLOAD_V1,
    LsoV2: NDIS_TCP_LARGE_SEND_OFFLOAD_V2,
    Flags: ULONG,
    IPsecV2: NDIS_IPSEC_OFFLOAD_V2,
    Rsc: NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD,
    EncapsulatedPacketTaskOffloadGre: NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD,
    EncapsulatedPacketTaskOffloadVxlan: NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD_V2,
    EncapsulationTypes: UCHAR,
    Rfc6877Xlat: NDIS_RFC6877_464XLAT_OFFLOAD,
}}
pub type PNDIS_OFFLOAD = *mut NDIS_OFFLOAD;
STRUCT!{struct NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1_IPv4 {
    Encapsulation: ULONG,
    MaxOffLoadSize: ULONG,
    MinSegmentCount: ULONG,
    TcpOptions: ULONG,
    IpOptions: ULONG,
}}
STRUCT!{struct NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 {
    IPv4: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1_IPv4,
}}
pub type PNDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1 = *mut NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1;
STRUCT!{struct NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD_IPv4Transmit {
    Encapsulation: ULONG,
    IpOptionsSupported: ULONG,
    TcpOptionsSupported: ULONG,
    TcpChecksum: ULONG,
    UdpChecksum: ULONG,
    IpChecksum: ULONG,
}}
STRUCT!{struct NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD_IPv4Receive {
    Encapsulation: ULONG,
    IpOptionsSupported: ULONG,
    TcpOptionsSupported: ULONG,
    TcpChecksum: ULONG,
    UdpChecksum: ULONG,
    IpChecksum: ULONG,
}}
STRUCT!{struct NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD_IPv6Transmit {
    Encapsulation: ULONG,
    IpExtensionHeadersSupported: ULONG,
    TcpOptionsSupported: ULONG,
    TcpChecksum: ULONG,
    UdpChecksum: ULONG,
}}
STRUCT!{struct NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD_IPv6Receive {
    Encapsulation: ULONG,
    IpExtensionHeadersSupported: ULONG,
    TcpOptionsSupported: ULONG,
    TcpChecksum: ULONG,
    UdpChecksum: ULONG,
}}
STRUCT!{struct NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD {
    IPv4Transmit: NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD_IPv4Transmit,
    IPv4Receive: NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD_IPv4Receive,
    IPv6Transmit: NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD_IPv6Transmit,
    IPv6Receive: NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD_IPv6Receive,
}}
pub type PNDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD = *mut NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD;
STRUCT!{struct NDIS_WMI_IPSEC_OFFLOAD_V1_Supported {
    Encapsulation: ULONG,
    AhEspCombined: ULONG,
    TransportTunnelCombined: ULONG,
    IPv4Options: ULONG,
    Flags: ULONG,
}}
STRUCT!{struct NDIS_WMI_IPSEC_OFFLOAD_V1_IPv4AH {
    Md5: ULONG,
    Sha_1: ULONG,
    Transport: ULONG,
    Tunnel: ULONG,
    Send: ULONG,
    Receive: ULONG,
}}
STRUCT!{struct NDIS_WMI_IPSEC_OFFLOAD_V1_IPv4ESP {
    Des: ULONG,
    Reserved: ULONG,
    TripleDes: ULONG,
    NullEsp: ULONG,
    Transport: ULONG,
    Tunnel: ULONG,
    Send: ULONG,
    Receive: ULONG,
}}
STRUCT!{struct NDIS_WMI_IPSEC_OFFLOAD_V1 {
    Supported: NDIS_WMI_IPSEC_OFFLOAD_V1_Supported,
    IPv4AH: NDIS_WMI_IPSEC_OFFLOAD_V1_IPv4AH,
    IPv4ESP: NDIS_WMI_IPSEC_OFFLOAD_V1_IPv4ESP,
}}
pub type PNDIS_WMI_IPSEC_OFFLOAD_V1 = *mut NDIS_WMI_IPSEC_OFFLOAD_V1;
STRUCT!{struct NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2_IPv4 {
    Encapsulation: ULONG,
    MaxOffLoadSize: ULONG,
    MinSegmentCount: ULONG,
}}
STRUCT!{struct NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2_IPv6 {
    Encapsulation: ULONG,
    MaxOffLoadSize: ULONG,
    MinSegmentCount: ULONG,
    IpExtensionHeadersSupported: ULONG,
    TcpOptionsSupported: ULONG,
}}
STRUCT!{struct NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 {
    IPv4: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2_IPv4,
    IPv6: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2_IPv6,
}}
pub type PNDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2 = *mut NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2;
STRUCT!{struct NDIS_WMI_OFFLOAD {
    Header: NDIS_OBJECT_HEADER,
    Checksum: NDIS_WMI_TCP_IP_CHECKSUM_OFFLOAD,
    LsoV1: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V1,
    IPsecV1: NDIS_WMI_IPSEC_OFFLOAD_V1,
    LsoV2: NDIS_WMI_TCP_LARGE_SEND_OFFLOAD_V2,
    Flags: ULONG,
    IPsecV2: NDIS_IPSEC_OFFLOAD_V2,
    Rsc: NDIS_TCP_RECV_SEG_COALESCE_OFFLOAD,
    EncapsulatedPacketTaskOffloadGre: NDIS_ENCAPSULATED_PACKET_TASK_OFFLOAD,
}}
pub type PNDIS_WMI_OFFLOAD = *mut NDIS_WMI_OFFLOAD;
pub const NDIS_TCP_CONNECTION_OFFLOAD_REVISION_1: UCHAR = 1;
pub const NDIS_TCP_CONNECTION_OFFLOAD_REVISION_2: UCHAR = 2;
STRUCT!{struct NDIS_TCP_CONNECTION_OFFLOAD {
    Header: NDIS_OBJECT_HEADER,
    Encapsulation: ULONG,
    BitFields: ULONG,
    TcpConnectionOffloadCapacity: ULONG,
    Flags: ULONG,
}}
BITFIELD!(NDIS_TCP_CONNECTION_OFFLOAD BitFields: ULONG [
    SupportIPv4 set_SupportIPv4[0..2],
    SupportIPv6 set_SupportIPv6[2..4],
    SupportIPv6ExtensionHeaders set_SupportIPv6ExtensionHeaders[4..6],
    SupportSack set_SupportSack[6..8],
    CongestionAlgorithm set_CongestionAlgorithm[8..12],
]);
pub type PNDIS_TCP_CONNECTION_OFFLOAD = *mut NDIS_TCP_CONNECTION_OFFLOAD;
STRUCT!{struct NDIS_WMI_TCP_CONNECTION_OFFLOAD {
    Header: NDIS_OBJECT_HEADER,
    Encapsulation: ULONG,
    SupportIPv4: ULONG,
    SupportIPv6: ULONG,
    SupportIPv6ExtensionHeaders: ULONG,
    SupportSack: ULONG,
    TcpConnectionOffloadCapacity: ULONG,
    Flags: ULONG,
}}
pub type PNDIS_WMI_TCP_CONNECTION_OFFLOAD = *mut NDIS_WMI_TCP_CONNECTION_OFFLOAD;
pub const NDIS_MAXIMUM_PORTS: ULONG = 0x1000000;
pub type NDIS_PORT_NUMBER = ULONG;
pub type PNDIS_PORT_NUMBER = *mut ULONG;
pub const NDIS_DEFAULT_PORT_NUMBER: NDIS_PORT_NUMBER = 0;
ENUM!{enum NDIS_PORT_TYPE {
    NdisPortTypeUndefined,
    NdisPortTypeBridge,
    NdisPortTypeRasConnection,
    NdisPortType8021xSupplicant,
    NdisPortTypeNdisImPlatform,
    NdisPortTypeMax,
}}
pub type PNDIS_PORT_TYPE = *mut NDIS_PORT_TYPE;
ENUM!{enum NDIS_PORT_AUTHORIZATION_STATE {
    NdisPortAuthorizationUnknown,
    NdisPortAuthorized,
    NdisPortUnauthorized,
    NdisPortReauthorizing,
}}
pub type PNDIS_PORT_AUTHORIZATION_STATE = *mut NDIS_PORT_AUTHORIZATION_STATE;
ENUM!{enum NDIS_PORT_CONTROL_STATE {
    NdisPortControlStateUnknown,
    NdisPortControlStateControlled,
    NdisPortControlStateUncontrolled,
}}
pub type PNDIS_PORT_CONTROL_STATE = *mut NDIS_PORT_CONTROL_STATE;
pub type NDIS_PORT_CONTROLL_STATE = NDIS_PORT_CONTROL_STATE;
pub type PNDIS_PORT_CONTROLL_STATE = PNDIS_PORT_CONTROL_STATE;
pub const NDIS_PORT_AUTHENTICATION_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_PORT_AUTHENTICATION_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    SendControlState: NDIS_PORT_CONTROL_STATE,
    RcvControlState: NDIS_PORT_CONTROL_STATE,
    SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
}}
pub type PNDIS_PORT_AUTHENTICATION_PARAMETERS = *mut NDIS_PORT_AUTHENTICATION_PARAMETERS;
ENUM!{enum NDIS_NETWORK_CHANGE_TYPE {
    NdisPossibleNetworkChange = 1,
    NdisDefinitelyNetworkChange,
    NdisNetworkChangeFromMediaConnect,
    NdisNetworkChangeMax,
}}
pub type PNDIS_NETWORK_CHANGE_TYPE = *mut NDIS_NETWORK_CHANGE_TYPE;
pub const NDIS_WMI_DEFAULT_METHOD_ID: UCHAR = 1;
pub const NDIS_WMI_OBJECT_TYPE_SET: UCHAR = 0x01;
pub const NDIS_WMI_OBJECT_TYPE_METHOD: UCHAR = 0x02;
pub const NDIS_WMI_OBJECT_TYPE_EVENT: UCHAR = 0x03;
pub const NDIS_WMI_OBJECT_TYPE_ENUM_ADAPTER: UCHAR = 0x04;
pub const NDIS_WMI_OBJECT_TYPE_OUTPUT_INFO: UCHAR = 0x05;
pub const NDIS_WMI_METHOD_HEADER_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_WMI_METHOD_HEADER {
    Header: NDIS_OBJECT_HEADER,
    PortNumber: NDIS_PORT_NUMBER,
    NetLuid: NET_LUID,
    RequestId: ULONG64,
    Timeout: ULONG,
    Padding: [UCHAR; 4],
}}
pub type PNDIS_WMI_METHOD_HEADER = *mut NDIS_WMI_METHOD_HEADER;
pub const NDIS_WMI_SET_HEADER_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_WMI_SET_HEADER {
    Header: NDIS_OBJECT_HEADER,
    PortNumber: NDIS_PORT_NUMBER,
    NetLuid: NET_LUID,
    RequestId: ULONG64,
    Timeout: ULONG,
    Padding: [UCHAR; 4],
}}
pub const NDIS_WMI_EVENT_HEADER_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_WMI_EVENT_HEADER {
    Header: NDIS_OBJECT_HEADER,
    IfIndex: NET_IFINDEX,
    NetLuid: NET_LUID,
    RequestId: ULONG64,
    PortNumber: NDIS_PORT_NUMBER,
    DeviceNameLength: ULONG,
    DeviceNameOffset: ULONG,
    Padding: [UCHAR; 4],
}}
pub type PNDIS_WMI_EVENT_HEADER = *mut NDIS_WMI_EVENT_HEADER;
pub const NDIS_WMI_ENUM_ADAPTER_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_WMI_ENUM_ADAPTER {
    Header: NDIS_OBJECT_HEADER,
    IfIndex: NET_IFINDEX,
    NetLuid: NET_LUID,
    DeviceNameLength: USHORT,
    DeviceName: [CHAR; 1],
}}
pub type PNDIS_WMI_ENUM_ADAPTER = *mut NDIS_WMI_ENUM_ADAPTER;
pub const NDIS_DEVICE_TYPE_ENDPOINT: ULONG = 0x00000001;
pub const NDIS_HD_SPLIT_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_HD_SPLIT_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    HDSplitCombineFlags: ULONG,
}}
pub type PNDIS_HD_SPLIT_PARAMETERS = *mut NDIS_HD_SPLIT_PARAMETERS;
pub const NDIS_HD_SPLIT_COMBINE_ALL_HEADERS: ULONG = 0x00000001;
pub const NDIS_HD_SPLIT_CURRENT_CONFIG_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_HD_SPLIT_CURRENT_CONFIG {
    Header: NDIS_OBJECT_HEADER,
    HardwareCapabilities: ULONG,
    CurrentCapabilities: ULONG,
    HDSplitFlags: ULONG,
    HDSplitCombineFlags: ULONG,
    BackfillSize: ULONG,
    MaxHeaderSize: ULONG,
}}
pub type PNDIS_HD_SPLIT_CURRENT_CONFIG = *mut NDIS_HD_SPLIT_CURRENT_CONFIG;
pub const NDIS_HD_SPLIT_CAPS_SUPPORTS_HEADER_DATA_SPLIT: ULONG = 0x00000001;
pub const NDIS_HD_SPLIT_CAPS_SUPPORTS_IPV4_OPTIONS: ULONG = 0x00000002;
pub const NDIS_HD_SPLIT_CAPS_SUPPORTS_IPV6_EXTENSION_HEADERS: ULONG = 0x00000004;
pub const NDIS_HD_SPLIT_CAPS_SUPPORTS_TCP_OPTIONS: ULONG = 0x00000008;
pub const NDIS_HD_SPLIT_ENABLE_HEADER_DATA_SPLIT: ULONG = 0x00000001;
pub const NDIS_WMI_OUTPUT_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_WMI_OUTPUT_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SupportedRevision: UCHAR,
    DataOffset: ULONG,
}}
pub type PNDIS_WMI_OUTPUT_INFO = *mut NDIS_WMI_OUTPUT_INFO;
pub const NDIS_PM_WOL_BITMAP_PATTERN_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_PM_WOL_MAGIC_PACKET_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_PM_WOL_IPV4_TCP_SYN_SUPPORTED: ULONG = 0x00000004;
pub const NDIS_PM_WOL_IPV6_TCP_SYN_SUPPORTED: ULONG = 0x00000008;
pub const NDIS_PM_WOL_IPV4_DEST_ADDR_WILDCARD_SUPPORTED: ULONG = 0x00000200;
pub const NDIS_PM_WOL_IPV6_DEST_ADDR_WILDCARD_SUPPORTED: ULONG = 0x00000800;
pub const NDIS_PM_WOL_EAPOL_REQUEST_ID_MESSAGE_SUPPORTED: ULONG = 0x00010000;
pub const NDIS_PM_PROTOCOL_OFFLOAD_ARP_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_PM_PROTOCOL_OFFLOAD_NS_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_PM_PROTOCOL_OFFLOAD_80211_RSN_REKEY_SUPPORTED: ULONG = 0x00000080;
pub const NDIS_PM_WAKE_ON_MEDIA_CONNECT_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_PM_WAKE_ON_MEDIA_DISCONNECT_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_WLAN_WAKE_ON_NLO_DISCOVERY_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_WLAN_WAKE_ON_AP_ASSOCIATION_LOST_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_WLAN_WAKE_ON_GTK_HANDSHAKE_ERROR_SUPPORTED: ULONG = 0x00000004;
pub const NDIS_WLAN_WAKE_ON_4WAY_HANDSHAKE_REQUEST_SUPPORTED: ULONG = 0x00000008;
pub const NDIS_WWAN_WAKE_ON_REGISTER_STATE_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_WWAN_WAKE_ON_SMS_RECEIVE_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_WWAN_WAKE_ON_USSD_RECEIVE_SUPPORTED: ULONG = 0x00000004;
pub const NDIS_WWAN_WAKE_ON_PACKET_STATE_SUPPORTED: ULONG = 0x00000008;
pub const NDIS_WWAN_WAKE_ON_UICC_CHANGE_SUPPORTED: ULONG = 0x00000010;
pub const NDIS_PM_WAKE_PACKET_INDICATION_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_PM_SELECTIVE_SUSPEND_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_PM_WOL_BITMAP_PATTERN_ENABLED: ULONG = 0x00000001;
pub const NDIS_PM_WOL_MAGIC_PACKET_ENABLED: ULONG = 0x00000002;
pub const NDIS_PM_WOL_IPV4_TCP_SYN_ENABLED: ULONG = 0x00000004;
pub const NDIS_PM_WOL_IPV6_TCP_SYN_ENABLED: ULONG = 0x00000008;
pub const NDIS_PM_WOL_IPV4_DEST_ADDR_WILDCARD_ENABLED: ULONG = 0x00000200;
pub const NDIS_PM_WOL_IPV6_DEST_ADDR_WILDCARD_ENABLED: ULONG = 0x00000800;
pub const NDIS_PM_WOL_EAPOL_REQUEST_ID_MESSAGE_ENABLED: ULONG = 0x00010000;
pub const NDIS_PM_PROTOCOL_OFFLOAD_ARP_ENABLED: ULONG = 0x00000001;
pub const NDIS_PM_PROTOCOL_OFFLOAD_NS_ENABLED: ULONG = 0x00000002;
pub const NDIS_PM_PROTOCOL_OFFLOAD_80211_RSN_REKEY_ENABLED: ULONG = 0x00000080;
pub const NDIS_PM_WAKE_ON_LINK_CHANGE_ENABLED: ULONG = 0x00000001;
pub const NDIS_PM_WAKE_ON_MEDIA_DISCONNECT_ENABLED: ULONG = 0x00000002;
pub const NDIS_PM_SELECTIVE_SUSPEND_ENABLED: ULONG = 0x00000010;
pub const NDIS_WLAN_WAKE_ON_NLO_DISCOVERY_ENABLED: ULONG = 0x00000001;
pub const NDIS_WLAN_WAKE_ON_AP_ASSOCIATION_LOST_ENABLED: ULONG = 0x00000002;
pub const NDIS_WLAN_WAKE_ON_GTK_HANDSHAKE_ERROR_ENABLED: ULONG = 0x00000004;
pub const NDIS_WLAN_WAKE_ON_4WAY_HANDSHAKE_REQUEST_ENABLED: ULONG = 0x00000008;
pub const NDIS_WWAN_WAKE_ON_REGISTER_STATE_ENABLED: ULONG = 0x00000001;
pub const NDIS_WWAN_WAKE_ON_SMS_RECEIVE_ENABLED: ULONG = 0x00000002;
pub const NDIS_WWAN_WAKE_ON_USSD_RECEIVE_ENABLED: ULONG = 0x00000004;
pub const NDIS_WWAN_WAKE_ON_PACKET_STATE_ENABLED: ULONG = 0x00000008;
pub const NDIS_WWAN_WAKE_ON_UICC_CHANGE_ENABLED: ULONG = 0x00000010;
pub const NDIS_PM_WOL_PRIORITY_LOWEST: ULONG = 0xFFFFFFFF;
pub const NDIS_PM_WOL_PRIORITY_NORMAL: ULONG = 0x10000000;
pub const NDIS_PM_WOL_PRIORITY_HIGHEST: ULONG = 0x00000001;
pub const NDIS_PM_PROTOCOL_OFFLOAD_PRIORITY_LOWEST: ULONG = 0xFFFFFFFF;
pub const NDIS_PM_PROTOCOL_OFFLOAD_PRIORITY_NORMAL: ULONG = 0x10000000;
pub const NDIS_PM_PROTOCOL_OFFLOAD_PRIORITY_HIGHEST: ULONG = 0x00000001;
ENUM!{enum NDIS_PM_WOL_PACKET {
    NdisPMWoLPacketUnspecified,
    NdisPMWoLPacketBitmapPattern,
    NdisPMWoLPacketMagicPacket,
    NdisPMWoLPacketIPv4TcpSyn,
    NdisPMWoLPacketIPv6TcpSyn,
    NdisPMWoLPacketEapolRequestIdMessage,
    NdisPMWoLPacketMaximum,
}}
pub type PNDIS_PM_WOL_PACKET = *mut NDIS_PM_WOL_PACKET;
ENUM!{enum NDIS_PM_PROTOCOL_OFFLOAD_TYPE {
    NdisPMProtocolOffloadIdUnspecified,
    NdisPMProtocolOffloadIdIPv4ARP,
    NdisPMProtocolOffloadIdIPv6NS,
    NdisPMProtocolOffload80211RSNRekey,
    NdisPMProtocolOffloadIdMaximum,
}}
pub type PNDIS_PM_PROTOCOL_OFFLOAD_TYPE = *mut NDIS_PM_PROTOCOL_OFFLOAD_TYPE;
pub const NDIS_PM_MAX_STRING_SIZE: usize = 64;
STRUCT!{struct NDIS_PM_COUNTED_STRING {
    Length: USHORT,
    String_: [WCHAR; NDIS_PM_MAX_STRING_SIZE],
}}
pub const NDIS_PM_CAPABILITIES_REVISION_1: UCHAR = 1;
pub const NDIS_PM_CAPABILITIES_REVISION_2: UCHAR = 2;
STRUCT!{struct NDIS_PM_CAPABILITIES {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SupportedWoLPacketPatterns: ULONG,
    NumTotalWoLPatterns: ULONG,
    MaxWoLPatternSize: ULONG,
    MaxWoLPatternOffset: ULONG,
    MaxWoLPacketSaveBuffer: ULONG,
    SupportedProtocolOffloads: ULONG,
    NumArpOffloadIPv4Addresses: ULONG,
    NumNSOffloadIPv6Addresses: ULONG,
    MinMagicPacketWakeUp: NDIS_DEVICE_POWER_STATE,
    MinPatternWakeUp: NDIS_DEVICE_POWER_STATE,
    MinLinkChangeWakeUp: NDIS_DEVICE_POWER_STATE,
    SupportedWakeUpEvents: ULONG,
    MediaSpecificWakeUpEvents: ULONG,
}}
pub type PNDIS_PM_CAPABILITIES = *mut NDIS_PM_CAPABILITIES;
pub const NDIS_PM_PARAMETERS_REVISION_1: UCHAR = 1;
pub const NDIS_PM_PARAMETERS_REVISION_2: UCHAR = 2;
STRUCT!{struct NDIS_PM_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    EnabledWoLPacketPatterns: ULONG,
    EnabledProtocolOffloads: ULONG,
    WakeUpFlags: ULONG,
    MediaSpecificWakeUpEvents: ULONG,
}}
pub type PNDIS_PM_PARAMETERS = *mut NDIS_PM_PARAMETERS;
pub const EAPOL_REQUEST_ID_WOL_FLAG_MUST_ENCRYPT: ULONG = 0x00000001;
pub const NDIS_PM_MAX_PATTERN_ID: ULONG = 0x0000FFFF;
pub const NDIS_PM_PRIVATE_PATTERN_ID: ULONG = 0x00000001;
pub const NDIS_PM_WOL_PATTERN_REVISION_1: UCHAR = 1;
pub const NDIS_PM_WOL_PATTERN_REVISION_2: UCHAR = 2;
STRUCT!{struct _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS {
    Flags: ULONG,
    IPv4SourceAddress: [UCHAR; 4],
    IPv4DestAddress: [UCHAR; 4],
    TCPSourcePortNumber: USHORT,
    TCPDestPortNumber: USHORT,
}}
STRUCT!{struct _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS {
    Flags: ULONG,
    IPv6SourceAddress: [UCHAR; 16],
    IPv6DestAddress: [UCHAR; 16],
    TCPSourcePortNumber: USHORT,
    TCPDestPortNumber: USHORT,
}}
STRUCT!{struct _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS {
    Flags: ULONG,
}}
STRUCT!{struct _WOL_BITMAP_PATTERN {
    Flags: ULONG,
    MaskOffset: ULONG,
    MaskSize: ULONG,
    PatternOffset: ULONG,
    PatternSize: ULONG,
}}
UNION!{union _WOL_PATTERN {
    [u32; 10],
    IPv4TcpSynParameters IPv4TcpSynParameters_mut: _IPV4_TCP_SYN_WOL_PACKET_PARAMETERS,
    IPv6TcpSynParameters IPv6TcpSynParameters_mut: _IPV6_TCP_SYN_WOL_PACKET_PARAMETERS,
    EapolRequestIdMessageParameters EapolRequestIdMessageParameters_mut:
        _EAPOL_REQUEST_ID_MESSAGE_WOL_PACKET_PARAMETERS,
    WoLBitMapPattern WoLBitMapPattern_mut: _WOL_BITMAP_PATTERN,
}}
STRUCT!{struct NDIS_PM_WOL_PATTERN {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    Priority: ULONG,
    WoLPacketType: NDIS_PM_WOL_PACKET,
    FriendlyName: NDIS_PM_COUNTED_STRING,
    PatternId: ULONG,
    NextWoLPatternOffset: ULONG,
    WoLPattern: _WOL_PATTERN,
}}
pub type PNDIS_PM_WOL_PATTERN = *mut NDIS_PM_WOL_PATTERN;
pub const DOT11_RSN_KEK_LENGTH: usize = 16;
pub const DOT11_RSN_KCK_LENGTH: usize = 16;
pub const NDIS_PM_PROTOCOL_OFFLOAD_REVISION_1: UCHAR = 1;
STRUCT!{struct _IPV4_ARP_PARAMETERS {
    Flags: ULONG,
    RemoteIPv4Address: [UCHAR; 4],
    HostIPv4Address: [UCHAR; 4],
    MacAddress: [UCHAR; 6],
}}
STRUCT!{struct _IPV6_NS_PARAMETERS {
    Flags: ULONG,
    RemoteIPv6Address: [UCHAR; 16],
    SolicitedNodeIPv6Address: [UCHAR; 16],
    MacAddress: [UCHAR; 6],
    TargetIPv6Addresses: [[UCHAR; 2]; 16],
}}
STRUCT!{struct _DOT11_RSN_REKEY_PARAMETERS {
    Flags: ULONG,
    KCK: [UCHAR; DOT11_RSN_KCK_LENGTH],
    KEK: [UCHAR; DOT11_RSN_KEK_LENGTH],
    KeyReplayCounter: ULONGLONG,
}}
UNION!{union _PROTOCOL_OFFLOAD_PARAMETERS {
    [u64; 10],
    IPv4ARPParameters IPv4ARPParameters_mut: _IPV4_ARP_PARAMETERS,
    IPv6NSParameters IPv6NSParameters_mut: _IPV6_NS_PARAMETERS,
    Dot11RSNRekeyParameters Dot11RSNRekeyParameters_mut: _DOT11_RSN_REKEY_PARAMETERS,
}}
STRUCT!{struct NDIS_PM_PROTOCOL_OFFLOAD {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    Priority: ULONG,
    ProtocolOffloadType: NDIS_PM_PROTOCOL_OFFLOAD_TYPE,
    FriendlyName: NDIS_PM_COUNTED_STRING,
    ProtocolOffloadId: ULONG,
    NextProtocolOffloadOffset: ULONG,
    ProtocolOffloadParameters: _PROTOCOL_OFFLOAD_PARAMETERS,
}}
pub type PNDIS_PM_PROTOCOL_OFFLOAD = *mut NDIS_PM_PROTOCOL_OFFLOAD;
ENUM!{enum NDIS_PM_WAKE_REASON_TYPE {
    NdisWakeReasonUnspecified = 0x0000,
    NdisWakeReasonPacket = 0x0001,
    NdisWakeReasonMediaDisconnect = 0x0002,
    NdisWakeReasonMediaConnect = 0x0003,
    NdisWakeReasonWlanNLODiscovery = 0x1000,
    NdisWakeReasonWlanAPAssociationLost = 0x1001,
    NdisWakeReasonWlanGTKHandshakeError = 0x1002,
    NdisWakeReasonWlan4WayHandshakeRequest = 0x1003,
    NdisWakeReasonWwanRegisterState = 0x2000,
    NdisWakeReasonWwanSMSReceive = 0x2001,
    NdisWakeReasonWwanUSSDReceive = 0x2002,
}}
pub type PNDIS_PM_WAKE_REASON_TYPE = *mut NDIS_PM_WAKE_REASON_TYPE;
pub const NDIS_PM_WAKE_REASON_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_PM_WAKE_REASON {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    WakeReason: NDIS_PM_WAKE_REASON_TYPE,
    InfoBufferOffset: ULONG,
    InfoBufferSize: ULONG,
}}
pub type PNDIS_PM_WAKE_REASON = *mut NDIS_PM_WAKE_REASON;
pub const NDIS_PM_WAKE_PACKET_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_PM_WAKE_PACKET {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PatternId: ULONG,
    PatternFriendlyName: NDIS_PM_COUNTED_STRING,
    OriginalPacketSize: ULONG,
    SavedPacketSize: ULONG,
    SavedPacketOffset: ULONG,
}}
pub type PNDIS_PM_WAKE_PACKET = *mut NDIS_PM_WAKE_PACKET;
ENUM!{enum NDIS_PM_ADMIN_CONFIG_STATE {
    NdisPMAdminConfigUnspecified = 0,
    NdisPMAdminConfigDisabled = 1,
    NdisPMAdminConfigEnabled = 2,
}}
pub type PNDIS_PM_ADMIN_CONFIG_STATE = *mut NDIS_PM_ADMIN_CONFIG_STATE;
pub const NDIS_WMI_PM_ADMIN_CONFIG_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_WMI_PM_ADMIN_CONFIG {
    Header: NDIS_OBJECT_HEADER,
    WakeOnPattern: NDIS_PM_ADMIN_CONFIG_STATE,
    WakeOnMagicPacket: NDIS_PM_ADMIN_CONFIG_STATE,
    DeviceSleepOnDisconnect: NDIS_PM_ADMIN_CONFIG_STATE,
    PMARPOffload: NDIS_PM_ADMIN_CONFIG_STATE,
    PMNSOffload: NDIS_PM_ADMIN_CONFIG_STATE,
    PMWiFiRekeyOffload: NDIS_PM_ADMIN_CONFIG_STATE,
}}
pub type PNDIS_WMI_PM_ADMIN_CONFIG = *mut NDIS_WMI_PM_ADMIN_CONFIG;
ENUM!{enum NDIS_PM_CAPABILITY_STATE {
    NdisPMAdminConfigUnsupported = 0,
    NdisPMAdminConfigInactive = 1,
    NdisPMAdminConfigActive = 2,
}}
pub type PNDIS_PM_CAPABILITY_STATE = *mut NDIS_PM_CAPABILITY_STATE;
pub const NDIS_WMI_PM_ACTIVE_CAPABILITIES_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_WMI_PM_ACTIVE_CAPABILITIES {
    Header: NDIS_OBJECT_HEADER,
    WakeOnPattern: NDIS_PM_CAPABILITY_STATE,
    WakeOnMagicPacket: NDIS_PM_CAPABILITY_STATE,
    DeviceSleepOnDisconnect: NDIS_PM_CAPABILITY_STATE,
    PMARPOffload: NDIS_PM_CAPABILITY_STATE,
    PMNSOffload: NDIS_PM_CAPABILITY_STATE,
    PMWiFiRekeyOffload: NDIS_PM_CAPABILITY_STATE,
}}
pub type PNDIS_WMI_PM_ACTIVE_CAPABILITIES = *mut NDIS_WMI_PM_ACTIVE_CAPABILITIES;
pub const NDIS_RECEIVE_FILTER_MAC_HEADER_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_RECEIVE_FILTER_IPV4_HEADER_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_RECEIVE_FILTER_IPV6_HEADER_SUPPORTED: ULONG = 0x00000004;
pub const NDIS_RECEIVE_FILTER_ARP_HEADER_SUPPORTED: ULONG = 0x00000008;
pub const NDIS_RECEIVE_FILTER_UDP_HEADER_SUPPORTED: ULONG = 0x00000010;
pub const NDIS_RECEIVE_FILTER_MAC_HEADER_DEST_ADDR_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_RECEIVE_FILTER_MAC_HEADER_SOURCE_ADDR_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_RECEIVE_FILTER_MAC_HEADER_PROTOCOL_SUPPORTED: ULONG = 0x00000004;
pub const NDIS_RECEIVE_FILTER_MAC_HEADER_VLAN_ID_SUPPORTED: ULONG = 0x00000008;
pub const NDIS_RECEIVE_FILTER_MAC_HEADER_PRIORITY_SUPPORTED: ULONG = 0x00000010;
pub const NDIS_RECEIVE_FILTER_MAC_HEADER_PACKET_TYPE_SUPPORTED: ULONG = 0x00000020;
pub const NDIS_RECEIVE_FILTER_ARP_HEADER_OPERATION_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_RECEIVE_FILTER_ARP_HEADER_SPA_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_RECEIVE_FILTER_ARP_HEADER_TPA_SUPPORTED: ULONG = 0x00000004;
pub const NDIS_RECEIVE_FILTER_IPV4_HEADER_PROTOCOL_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_RECEIVE_FILTER_IPV6_HEADER_PROTOCOL_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_RECEIVE_FILTER_UDP_HEADER_DEST_PORT_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_RECEIVE_FILTER_TEST_HEADER_FIELD_EQUAL_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_RECEIVE_FILTER_TEST_HEADER_FIELD_MASK_EQUAL_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_RECEIVE_FILTER_TEST_HEADER_FIELD_NOT_EQUAL_SUPPORTED: ULONG = 0x00000004;
pub const NDIS_RECEIVE_FILTER_MSI_X_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_RECEIVE_FILTER_VM_QUEUE_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_RECEIVE_FILTER_LOOKAHEAD_SPLIT_SUPPORTED: ULONG = 0x00000004;
pub const NDIS_RECEIVE_FILTER_DYNAMIC_PROCESSOR_AFFINITY_CHANGE_SUPPORTED: ULONG = 0x00000008;
pub const NDIS_RECEIVE_FILTER_INTERRUPT_VECTOR_COALESCING_SUPPORTED: ULONG = 0x00000010;
pub const NDIS_RECEIVE_FILTER_IMPLAT_MIN_OF_QUEUES_MODE: ULONG = 0x00000040;
pub const NDIS_RECEIVE_FILTER_IMPLAT_SUM_OF_QUEUES_MODE: ULONG = 0x00000080;
pub const NDIS_RECEIVE_FILTER_PACKET_COALESCING_SUPPORTED_ON_DEFAULT_QUEUE: ULONG = 0x00000100;
pub const NDIS_RECEIVE_FILTER_ANY_VLAN_SUPPORTED: ULONG = 0x00000020;
pub const NDIS_RECEIVE_FILTER_VMQ_FILTERS_ENABLED: ULONG = 0x00000001;
pub const NDIS_RECEIVE_FILTER_PACKET_COALESCING_FILTERS_ENABLED: ULONG = 0x00000002;
pub const NDIS_RECEIVE_FILTER_VM_QUEUES_ENABLED: ULONG = 0x00000001;
pub const NDIS_RECEIVE_FILTER_CAPABILITIES_REVISION_1: UCHAR = 1;
pub const NDIS_RECEIVE_FILTER_CAPABILITIES_REVISION_2: UCHAR = 2;
STRUCT!{struct NDIS_RECEIVE_FILTER_CAPABILITIES {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    EnabledFilterTypes: ULONG,
    EnabledQueueTypes: ULONG,
    NumQueues: ULONG,
    SupportedQueueProperties: ULONG,
    SupportedFilterTests: ULONG,
    SupportedHeaders: ULONG,
    SupportedMacHeaderFields: ULONG,
    MaxMacHeaderFilters: ULONG,
    MaxQueueGroups: ULONG,
    MaxQueuesPerQueueGroup: ULONG,
    MinLookaheadSplitSize: ULONG,
    MaxLookaheadSplitSize: ULONG,
    SupportedARPHeaderFields: ULONG,
    SupportedIPv4HeaderFields: ULONG,
    SupportedIPv6HeaderFields: ULONG,
    SupportedUdpHeaderFields: ULONG,
    MaxFieldTestsPerPacketCoalescingFilter: ULONG,
    MaxPacketCoalescingFilters: ULONG,
    NdisReserved: ULONG,
}}
pub type PNDIS_RECEIVE_FILTER_CAPABILITIES = *mut NDIS_RECEIVE_FILTER_CAPABILITIES;
pub const NDIS_NIC_SWITCH_CAPS_VLAN_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_NIC_SWITCH_CAPS_PER_VPORT_INTERRUPT_MODERATION_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_NIC_SWITCH_CAPS_ASYMMETRIC_QUEUE_PAIRS_FOR_NONDEFAULT_VPORT_SUPPORTED: ULONG =
    0x00000004;
pub const NDIS_NIC_SWITCH_CAPS_VF_RSS_SUPPORTED: ULONG = 0x00000008;
pub const NDIS_NIC_SWITCH_CAPS_SINGLE_VPORT_POOL: ULONG = 0x00000010;
pub const NDIS_NIC_SWITCH_CAPS_RSS_PARAMETERS_PER_PF_VPORT_SUPPORTED: ULONG = 0x00000020;
pub const NDIS_NIC_SWITCH_CAPS_NIC_SWITCH_WITHOUT_IOV_SUPPORTED: ULONG = 0x00000040;
pub const NDIS_NIC_SWITCH_CAPS_RSS_ON_PF_VPORTS_SUPPORTED: ULONG = 0x00000080;
pub const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_INDIRECTION_TABLE_SUPPORTED: ULONG = 0x00000100;
pub const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_FUNCTION_SUPPORTED: ULONG = 0x00000200;
pub const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_TYPE_SUPPORTED: ULONG = 0x00000400;
pub const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_KEY_SUPPORTED: ULONG = 0x00000800;
pub const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_INDIRECTION_TABLE_SIZE_RESTRICTED: ULONG =
    0x00001000;
pub const NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_MASK: ULONG =
    NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_KEY_SUPPORTED |
    NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_FUNCTION_SUPPORTED |
    NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_HASH_TYPE_SUPPORTED |
    NDIS_NIC_SWITCH_CAPS_RSS_PER_PF_VPORT_INDIRECTION_TABLE_SUPPORTED;
pub const NDIS_NIC_SWITCH_CAPABILITIES_REVISION_1: UCHAR = 1;
pub const NDIS_NIC_SWITCH_CAPABILITIES_REVISION_2: UCHAR = 2;
pub const NDIS_NIC_SWITCH_CAPABILITIES_REVISION_3: UCHAR = 3;
STRUCT!{struct NDIS_NIC_SWITCH_CAPABILITIES {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    NdisReserved1: ULONG,
    NumTotalMacAddresses: ULONG,
    NumMacAddressesPerPort: ULONG,
    NumVlansPerPort: ULONG,
    NdisReserved2: ULONG,
    NdisReserved3: ULONG,
    NicSwitchCapabilities: ULONG,
    MaxNumSwitches: ULONG,
    MaxNumVPorts: ULONG,
    NdisReserved4: ULONG,
    MaxNumVFs: ULONG,
    MaxNumQueuePairs: ULONG,
    NdisReserved5: ULONG,
    NdisReserved6: ULONG,
    NdisReserved7: ULONG,
    MaxNumQueuePairsPerNonDefaultVPort: ULONG,
    NdisReserved8: ULONG,
    NdisReserved9: ULONG,
    NdisReserved10: ULONG,
    NdisReserved11: ULONG,
    NdisReserved12: ULONG,
    MaxNumMacAddresses: ULONG,
    NdisReserved13: ULONG,
    NdisReserved14: ULONG,
    NdisReserved15: ULONG,
    NdisReserved16: ULONG,
    NdisReserved17: ULONG,
    MaxNumRssCapableNonDefaultPFVPorts: ULONG,
    NumberOfIndirectionTableEntriesForDefaultVPort: ULONG,
    NumberOfIndirectionTableEntriesPerNonDefaultPFVPort: ULONG,
    MaxNumQueuePairsForDefaultVPort: ULONG,
}}
pub type PNDIS_NIC_SWITCH_CAPABILITIES = *mut NDIS_NIC_SWITCH_CAPABILITIES;
pub const NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    EnabledFilterTypes: ULONG,
    EnabledQueueTypes: ULONG,
}}
pub type PNDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS = *mut NDIS_RECEIVE_FILTER_GLOBAL_PARAMETERS;
pub type NDIS_RECEIVE_QUEUE_ID = ULONG;
pub type PNDIS_RECEIVE_QUEUE_ID = *mut ULONG;
pub type NDIS_RECEIVE_QUEUE_GROUP_ID = ULONG;
pub type PNDIS_RECEIVE_QUEUE_GROUP_ID = *mut ULONG;
pub type NDIS_RECEIVE_FILTER_ID = ULONG;
pub type PNDIS_RECEIVE_FILTER_ID = *mut ULONG;
pub const NDIS_DEFAULT_RECEIVE_QUEUE_ID: NDIS_RECEIVE_QUEUE_ID = 0;
pub const NDIS_DEFAULT_RECEIVE_QUEUE_GROUP_ID: NDIS_RECEIVE_QUEUE_GROUP_ID = 0;
pub const NDIS_DEFAULT_RECEIVE_FILTER_ID: NDIS_RECEIVE_FILTER_ID = 0;
ENUM!{enum NDIS_RECEIVE_FILTER_TYPE {
    NdisReceiveFilterTypeUndefined,
    NdisReceiveFilterTypeVMQueue,
    NdisReceiveFilterTypePacketCoalescing,
    NdisReceiveFilterTypeMaximum,
}}
pub type PNDIS_RECEIVE_FILTER_TYPE = *mut NDIS_RECEIVE_FILTER_TYPE;
ENUM!{enum NDIS_FRAME_HEADER {
    NdisFrameHeaderUndefined,
    NdisFrameHeaderMac,
    NdisFrameHeaderArp,
    NdisFrameHeaderIPv4,
    NdisFrameHeaderIPv6,
    NdisFrameHeaderUdp,
    NdisFrameHeaderMaximum,
}}
pub type PNDIS_FRAME_HEADER = *mut NDIS_FRAME_HEADER;
ENUM!{enum NDIS_MAC_HEADER_FIELD {
    NdisMacHeaderFieldUndefined,
    NdisMacHeaderFieldDestinationAddress,
    NdisMacHeaderFieldSourceAddress,
    NdisMacHeaderFieldProtocol,
    NdisMacHeaderFieldVlanId,
    NdisMacHeaderFieldPriority,
    NdisMacHeaderFieldPacketType,
    NdisMacHeaderFieldMaximum,
}}
pub type PNDIS_MAC_HEADER_FIELD = *mut NDIS_MAC_HEADER_FIELD;
ENUM!{enum NDIS_MAC_PACKET_TYPE {
    NdisMacPacketTypeUndefined = 0,
    NdisMacPacketTypeUnicast = 1,
    NdisMacPacketTypeMulticast = 2,
    NdisMacPacketTypeBroadcast = 3,
    NdisMacPacketTypeMaximum,
}}
pub type PNDIS_MAC_PACKET_TYPE = *mut NDIS_MAC_PACKET_TYPE;
ENUM!{enum NDIS_ARP_HEADER_FIELD {
    NdisARPHeaderFieldUndefined,
    NdisARPHeaderFieldOperation,
    NdisARPHeaderFieldSPA,
    NdisARPHeaderFieldTPA,
    NdisARPHeaderFieldMaximum,
}}
pub type PNDIS_ARP_HEADER_FIELD = *mut NDIS_ARP_HEADER_FIELD;
ENUM!{enum NDIS_IPV4_HEADER_FIELD {
    NdisIPv4HeaderFieldUndefined,
    NdisIPv4HeaderFieldProtocol,
    NdisIPv4HeaderFieldMaximum,
}}
pub type PNDIS_IPV4_HEADER_FIELD = *mut NDIS_IPV4_HEADER_FIELD;
ENUM!{enum NDIS_IPV6_HEADER_FIELD {
    NdisIPv6HeaderFieldUndefined,
    NdisIPv6HeaderFieldProtocol,
    NdisIPv6HeaderFieldMaximum,
}}
pub type PNDIS_IPV6_HEADER_FIELD = *mut NDIS_IPV6_HEADER_FIELD;
ENUM!{enum NDIS_UDP_HEADER_FIELD {
    NdisUdpHeaderFieldUndefined,
    NdisUdpHeaderFieldDestinationPort,
    NdisUdpHeaderFieldMaximum,
}}
pub type PNDIS_UDP_HEADER_FIELD = *mut NDIS_UDP_HEADER_FIELD;
ENUM!{enum NDIS_RECEIVE_FILTER_TEST {
    NdisReceiveFilterTestUndefined,
    NdisReceiveFilterTestEqual,
    NdisReceiveFilterTestMaskEqual,
    NdisReceiveFilterTestNotEqual,
    NdisReceiveFilterTestMaximum,
}}
pub type PNDIS_RECEIVE_FILTER_TEST = *mut NDIS_RECEIVE_FILTER_TEST;
pub const NDIS_RECEIVE_FILTER_FIELD_MAC_HEADER_VLAN_UNTAGGED_OR_ZERO: ULONG = 0x00000001;
pub const NDIS_RECEIVE_FILTER_FIELD_PARAMETERS_REVISION_1: UCHAR = 1;
pub const NDIS_RECEIVE_FILTER_FIELD_PARAMETERS_REVISION_2: UCHAR = 2;
UNION!{union _HEADER_FIELD {
    [u32; 1],
    MacHeaderField MacHeaderField_mut: NDIS_MAC_HEADER_FIELD,
    ArpHeaderField ArpHeaderField_mut: NDIS_ARP_HEADER_FIELD,
    IPv4HeaderField IPv4HeaderField_mut: NDIS_IPV4_HEADER_FIELD,
    IPv6HeaderField IPv6HeaderField_mut: NDIS_IPV6_HEADER_FIELD,
    UdpHeaderField UdpHeaderField_mut: NDIS_UDP_HEADER_FIELD,
}}
UNION!{union _FIELD_VALUE {
    [u64; 2],
    FieldByteValue FieldByteValue_mut: UCHAR,
    FieldShortValue FieldShortValue_mut: USHORT,
    FieldLongValue FieldLongValue_mut: ULONG,
    FieldLong64Value FieldLong64Value_mut: ULONG64,
    FieldByteArrayValue FieldByteArrayValue_mut: [UCHAR; 16],
}}
UNION!{union _RESULT_VALUE {
    [u64; 2],
    ResultByteValue ResultByteValue_mut: UCHAR,
    ResultShortValue ResultShortValue_mut: USHORT,
    ResultLongValue ResultLongValue_mut: ULONG,
    ResultLong64Value ResultLong64Value_mut: ULONG64,
    ResultByteArrayValue ResultByteArrayValue_mut: [UCHAR; 16],
}}
STRUCT!{struct NDIS_RECEIVE_FILTER_FIELD_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    FrameHeader: NDIS_FRAME_HEADER,
    ReceiveFilterTest: NDIS_RECEIVE_FILTER_TEST,
    HeaderField: _HEADER_FIELD,
    FieldValue: _FIELD_VALUE,
    ResultValue: _RESULT_VALUE,
}}
pub type PNDIS_RECEIVE_FILTER_FIELD_PARAMETERS = *mut NDIS_RECEIVE_FILTER_FIELD_PARAMETERS;
pub type NDIS_NIC_SWITCH_VPORT_ID = ULONG;
pub type PNDIS_NIC_SWITCH_VPORT_ID = *mut ULONG;
pub const NDIS_RECEIVE_FILTER_FLAGS_RESERVED: ULONG = 0x00000001;
pub const NDIS_RECEIVE_FILTER_PACKET_ENCAPSULATION_GRE: ULONG = 0x00000002;
pub const NDIS_RECEIVE_FILTER_PACKET_ENCAPSULATION: ULONG = 0x00000002;
pub const NDIS_RECEIVE_FILTER_PARAMETERS_REVISION_1: UCHAR = 1;
pub const NDIS_RECEIVE_FILTER_PARAMETERS_REVISION_2: UCHAR = 2;
STRUCT!{struct NDIS_RECEIVE_FILTER_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    FilterType: NDIS_RECEIVE_FILTER_TYPE,
    QueueId: NDIS_RECEIVE_QUEUE_ID,
    FilterId: NDIS_RECEIVE_FILTER_ID,
    FieldParametersArrayOffset: ULONG,
    FieldParametersArrayNumElements: ULONG,
    FieldParametersArrayElementSize: ULONG,
    RequestedFilterIdBitCount: ULONG,
    MaxCoalescingDelay: ULONG,
    VPortId: NDIS_NIC_SWITCH_VPORT_ID,
}}
pub type PNDIS_RECEIVE_FILTER_PARAMETERS = *mut NDIS_RECEIVE_FILTER_PARAMETERS;
pub const NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    QueueId: NDIS_RECEIVE_QUEUE_ID,
    FilterId: NDIS_RECEIVE_FILTER_ID,
}}
pub type PNDIS_RECEIVE_FILTER_CLEAR_PARAMETERS = *mut NDIS_RECEIVE_FILTER_CLEAR_PARAMETERS;
ENUM!{enum NDIS_RECEIVE_QUEUE_TYPE {
    NdisReceiveQueueTypeUnspecified,
    NdisReceiveQueueTypeVMQueue,
    NdisReceiveQueueTypeMaximum,
}}
pub type PNDIS_RECEIVE_QUEUE_TYPE = *mut NDIS_RECEIVE_QUEUE_TYPE;
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_PER_QUEUE_RECEIVE_INDICATION: ULONG = 0x00000001;
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_LOOKAHEAD_SPLIT_REQUIRED: ULONG = 0x00000002;
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_FLAGS_CHANGED: ULONG = 0x00010000;
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_PROCESSOR_AFFINITY_CHANGED: ULONG = 0x00020000;
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_SUGGESTED_RECV_BUFFER_NUMBERS_CHANGED: ULONG = 0x00040000;
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_NAME_CHANGED: ULONG = 0x00080000;
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_INTERRUPT_COALESCING_DOMAIN_ID_CHANGED: ULONG = 0x00100000;
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_QOS_SQ_ID_CHANGED: ULONG = 0x00200000;
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_CHANGE_MASK: ULONG = 0xFFFF0000;
pub type NDIS_QUEUE_NAME = NDIS_IF_COUNTED_STRING;
pub type PNDIS_QUEUE_NAME = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_VM_NAME = NDIS_IF_COUNTED_STRING;
pub type PNDIS_VM_NAME = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_VM_FRIENDLYNAME = NDIS_IF_COUNTED_STRING;
pub type PNDIS_VM_FRIENDLYNAME = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_SWITCH_PORT_PROPERTY_PROFILE_NAME = NDIS_IF_COUNTED_STRING;
pub type PNDIS_SWITCH_PORT_PROPERTY_PROFILE_NAME = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_SWITCH_PORT_PROPERTY_PROFILE_CDN_LABEL = NDIS_IF_COUNTED_STRING;
pub type PNDIS_SWITCH_PORT_PROPERTY_PROFILE_CDN_LABEL = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_SWITCH_NAME = NDIS_IF_COUNTED_STRING;
pub type PNDIS_SWITCH_NAME = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_SWITCH_FRIENDLYNAME = NDIS_IF_COUNTED_STRING;
pub type PNDIS_SWITCH_FRIENDLYNAME = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_SWITCH_PORT_NAME = NDIS_IF_COUNTED_STRING;
pub type PNDIS_SWITCH_PORT_NAME = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_SWITCH_PORT_FRIENDLYNAME = NDIS_IF_COUNTED_STRING;
pub type PNDIS_SWITCH_PORT_FRIENDLYNAME = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_SWITCH_NIC_NAME = NDIS_IF_COUNTED_STRING;
pub type PNDIS_SWITCH_NIC_NAME = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_SWITCH_NIC_FRIENDLYNAME = NDIS_IF_COUNTED_STRING;
pub type PNDIS_SWITCH_NIC_FRIENDLYNAME = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_SWITCH_EXTENSION_FRIENDLYNAME = NDIS_IF_COUNTED_STRING;
pub type PNDIS_SWITCH_EXTENSION_FRIENDLYNAME = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_VENDOR_NAME = NDIS_IF_COUNTED_STRING;
pub type PNDIS_VENDOR_NAME = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_QOS_SQ_ID = ULONG;
pub type PNDIS_QOS_SQ_ID = *mut ULONG;
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_REVISION_1: UCHAR = 1;
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_REVISION_2: UCHAR = 2;
pub const NDIS_RECEIVE_QUEUE_PARAMETERS_REVISION_3: UCHAR = 3;
STRUCT!{struct NDIS_RECEIVE_QUEUE_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    QueueType: NDIS_RECEIVE_QUEUE_TYPE,
    QueueId: NDIS_RECEIVE_QUEUE_ID,
    QueueGroupId: NDIS_RECEIVE_QUEUE_GROUP_ID,
    ProcessorAffinity: GROUP_AFFINITY,
    NumSuggestedReceiveBuffers: ULONG,
    MSIXTableEntry: ULONG,
    LookaheadSize: ULONG,
    VmName: NDIS_VM_NAME,
    QueueName: NDIS_QUEUE_NAME,
    PortId: ULONG,
    InterruptCoalescingDomainId: ULONG,
    QosSqId: NDIS_QOS_SQ_ID,
}}
pub type PNDIS_RECEIVE_QUEUE_PARAMETERS = *mut NDIS_RECEIVE_QUEUE_PARAMETERS;
pub const NDIS_RECEIVE_QUEUE_FREE_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_RECEIVE_QUEUE_FREE_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    QueueId: NDIS_RECEIVE_QUEUE_ID,
}}
pub type PNDIS_RECEIVE_QUEUE_FREE_PARAMETERS = *mut NDIS_RECEIVE_QUEUE_FREE_PARAMETERS;
ENUM!{enum NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE {
    NdisReceiveQueueOperationalStateUndefined,
    NdisReceiveQueueOperationalStateRunning,
    NdisReceiveQueueOperationalStatePaused,
    NdisReceiveQueueOperationalStateDmaStopped,
    NdisReceiveQueueOperationalStateMaximum,
}}
pub type PNDIS_RECEIVE_QUEUE_OPERATIONAL_STATE = *mut NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE;
pub const NDIS_RECEIVE_QUEUE_INFO_REVISION_1: UCHAR = 1;
pub const NDIS_RECEIVE_QUEUE_INFO_REVISION_2: UCHAR = 2;
STRUCT!{struct NDIS_RECEIVE_QUEUE_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    QueueType: NDIS_RECEIVE_QUEUE_TYPE,
    QueueId: NDIS_RECEIVE_QUEUE_ID,
    QueueGroupId: NDIS_RECEIVE_QUEUE_GROUP_ID,
    QueueState: NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE,
    ProcessorAffinity: GROUP_AFFINITY,
    NumSuggestedReceiveBuffers: ULONG,
    MSIXTableEntry: ULONG,
    LookaheadSize: ULONG,
    VmName: NDIS_VM_NAME,
    QueueName: NDIS_QUEUE_NAME,
    NumFilters: ULONG,
    InterruptCoalescingDomainId: ULONG,
}}
pub type PNDIS_RECEIVE_QUEUE_INFO = *mut NDIS_RECEIVE_QUEUE_INFO;
pub const NDIS_RECEIVE_QUEUE_INFO_ARRAY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_RECEIVE_QUEUE_INFO_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    FirstElementOffset: ULONG,
    NumElements: ULONG,
    ElementSize: ULONG,
}}
pub type PNDIS_RECEIVE_QUEUE_INFO_ARRAY = *mut NDIS_RECEIVE_QUEUE_INFO_ARRAY;
pub const NDIS_RECEIVE_FILTER_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_RECEIVE_FILTER_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    FilterType: NDIS_RECEIVE_FILTER_TYPE,
    FilterId: NDIS_RECEIVE_FILTER_ID,
}}
pub type PNDIS_RECEIVE_FILTER_INFO = *mut NDIS_RECEIVE_FILTER_INFO;
pub const NDIS_RECEIVE_FILTER_INFO_ARRAY_REVISION_1: UCHAR = 1;
pub const NDIS_RECEIVE_FILTER_INFO_ARRAY_REVISION_2: UCHAR = 2;
pub const NDIS_RECEIVE_FILTER_INFO_ARRAY_VPORT_ID_SPECIFIED: ULONG = 0x00000001;
STRUCT!{struct NDIS_RECEIVE_FILTER_INFO_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    QueueId: NDIS_RECEIVE_QUEUE_ID,
    FirstElementOffset: ULONG,
    NumElements: ULONG,
    ElementSize: ULONG,
    Flags: ULONG,
    VPortId: NDIS_NIC_SWITCH_VPORT_ID,
}}
pub type PNDIS_RECEIVE_FILTER_INFO_ARRAY = *mut NDIS_RECEIVE_FILTER_INFO_ARRAY;
pub const NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    QueueId: NDIS_RECEIVE_QUEUE_ID,
    CompletionStatus: NDIS_STATUS,
}}
pub type PNDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS =
    *mut NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_PARAMETERS;
pub const NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    FirstElementOffset: ULONG,
    NumElements: ULONG,
    ElementSize: ULONG,
}}
pub type PNDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY =
    *mut NDIS_RECEIVE_QUEUE_ALLOCATION_COMPLETE_ARRAY;
pub const NDIS_RECEIVE_SCALE_CAPABILITIES_REVISION_1: UCHAR = 1;
pub const NDIS_RECEIVE_SCALE_CAPABILITIES_REVISION_2: UCHAR = 2;
pub const NDIS_RECEIVE_SCALE_CAPABILITIES_REVISION_3: UCHAR = 3;
pub const NDIS_RSS_CAPS_MESSAGE_SIGNALED_INTERRUPTS: ULONG = 0x01000000;
pub const NDIS_RSS_CAPS_CLASSIFICATION_AT_ISR: ULONG = 0x02000000;
pub const NDIS_RSS_CAPS_CLASSIFICATION_AT_DPC: ULONG = 0x04000000;
pub const NDIS_RSS_CAPS_USING_MSI_X: ULONG = 0x08000000;
pub const NDIS_RSS_CAPS_RSS_AVAILABLE_ON_PORTS: ULONG = 0x10000000;
pub const NDIS_RSS_CAPS_SUPPORTS_MSI_X: ULONG = 0x20000000;
pub const NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV4: ULONG = 0x00000100;
pub const NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV6: ULONG = 0x00000200;
pub const NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV6_EX: ULONG = 0x00000400;
STRUCT!{struct NDIS_RECEIVE_SCALE_CAPABILITIES {
    Header: NDIS_OBJECT_HEADER,
    CapabilitiesFlags: ULONG,
    NumberOfInterruptMessages: ULONG,
    NumberOfReceiveQueues: ULONG,
    NumberOfIndirectionTableEntries: USHORT,
}}
pub type PNDIS_RECEIVE_SCALE_CAPABILITIES = *mut NDIS_RECEIVE_SCALE_CAPABILITIES;
pub const NdisHashFunctionToeplitz: ULONG = 0x00000001;
pub const NdisHashFunctionReserved1: ULONG = 0x00000002;
pub const NdisHashFunctionReserved2: ULONG = 0x00000004;
pub const NdisHashFunctionReserved3: ULONG = 0x00000008;
pub const NDIS_HASH_FUNCTION_MASK: ULONG = 0x000000FF;
pub const NDIS_HASH_TYPE_MASK: ULONG = 0x00FFFF00;
#[inline]
pub fn NDIS_RSS_HASH_FUNC_FROM_HASH_INFO(_HashInfo: ULONG) -> ULONG {
    _HashInfo & NDIS_HASH_FUNCTION_MASK
}
#[inline]
pub fn NDIS_RSS_HASH_TYPE_FROM_HASH_INFO(_HashInfo: ULONG) -> ULONG {
    _HashInfo & NDIS_HASH_TYPE_MASK
}
#[inline]
pub fn NDIS_RSS_HASH_INFO_FROM_TYPE_AND_FUNC(_HashInfo: ULONG, _HashFunction: ULONG) -> ULONG {
    _HashInfo & _HashFunction
}
pub const NDIS_HASH_IPV4: ULONG = 0x00000100;
pub const NDIS_HASH_TCP_IPV4: ULONG = 0x00000200;
pub const NDIS_HASH_IPV6: ULONG = 0x00000400;
pub const NDIS_HASH_IPV6_EX: ULONG = 0x00000800;
pub const NDIS_HASH_TCP_IPV6: ULONG = 0x00001000;
pub const NDIS_HASH_TCP_IPV6_EX: ULONG = 0x00002000;
pub const NDIS_RSS_PARAM_FLAG_BASE_CPU_UNCHANGED: USHORT = 0x0001;
pub const NDIS_RSS_PARAM_FLAG_HASH_INFO_UNCHANGED: USHORT = 0x0002;
pub const NDIS_RSS_PARAM_FLAG_ITABLE_UNCHANGED: USHORT = 0x0004;
pub const NDIS_RSS_PARAM_FLAG_HASH_KEY_UNCHANGED: USHORT = 0x0008;
pub const NDIS_RSS_PARAM_FLAG_DISABLE_RSS: USHORT = 0x0010;
pub const NDIS_RSS_PARAM_FLAG_DEFAULT_PROCESSOR_UNCHANGED: USHORT = 0x0020;
pub const NDIS_RSS_INDIRECTION_TABLE_SIZE_REVISION_1: USHORT = 128;
pub const NDIS_RSS_HASH_SECRET_KEY_SIZE_REVISION_1: USHORT = 40;
pub const NDIS_RECEIVE_SCALE_PARAMETERS_REVISION_1: UCHAR = 1;
pub const NDIS_RECEIVE_SCALE_PARAMETERS_REVISION_2: UCHAR = 2;
pub const NDIS_RECEIVE_SCALE_PARAMETERS_REVISION_3: UCHAR = 3;
STRUCT!{struct NDIS_RECEIVE_SCALE_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: USHORT,
    BaseCpuNumber: USHORT,
    HashInformation: ULONG,
    IndirectionTableSize: USHORT,
    IndirectionTableOffset: ULONG,
    HashSecretKeySize: USHORT,
    HashSecretKeyOffset: ULONG,
    ProcessorMasksOffset: ULONG,
    NumberOfProcessorMasks: ULONG,
    ProcessorMasksEntrySize: ULONG,
    DefaultProcessorNumber: PROCESSOR_NUMBER,
}}
pub type PNDIS_RECEIVE_SCALE_PARAMETERS = *mut NDIS_RECEIVE_SCALE_PARAMETERS;
pub const NDIS_RSS_INDIRECTION_TABLE_MAX_SIZE_REVISION_1: USHORT = 128;
pub const NDIS_RSS_HASH_SECRET_KEY_MAX_SIZE_REVISION_1: USHORT = 40;
pub const NDIS_RSS_INDIRECTION_TABLE_MAX_SIZE_REVISION_2: USHORT = 128 * 4;
pub const NDIS_RSS_HASH_SECRET_KEY_MAX_SIZE_REVISION_2: USHORT = 40;
pub const NDIS_RSS_INDIRECTION_TABLE_MAX_SIZE_REVISION_3: USHORT = 128 * 4;
pub const NDIS_RSS_HASH_SECRET_KEY_MAX_SIZE_REVISION_3: USHORT = 40;
pub const NDIS_RECEIVE_HASH_FLAG_ENABLE_HASH: ULONG = 0x00000001;
pub const NDIS_RECEIVE_HASH_FLAG_HASH_INFO_UNCHANGED: ULONG = 0x00000002;
pub const NDIS_RECEIVE_HASH_FLAG_HASH_KEY_UNCHANGED: ULONG = 0x00000004;
pub const NDIS_RECEIVE_HASH_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_RECEIVE_HASH_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    HashInformation: ULONG,
    HashSecretKeySize: USHORT,
    HashSecretKeyOffset: ULONG,
}}
pub type PNDIS_RECEIVE_HASH_PARAMETERS = *mut NDIS_RECEIVE_HASH_PARAMETERS;
ENUM!{enum NDIS_PROCESSOR_VENDOR {
    NdisProcessorVendorUnknown,
    NdisProcessorVendorGenuinIntel,
    NdisProcessorVendorGenuineIntel = NdisProcessorVendorGenuinIntel,
    NdisProcessorVendorAuthenticAMD,
}}
pub type PNDIS_PROCESSOR_VENDOR = *mut NDIS_PROCESSOR_VENDOR;
STRUCT!{struct NDIS_RSS_PROCESSOR {
    ProcNum: PROCESSOR_NUMBER,
    PreferenceIndex: USHORT,
    Reserved: USHORT,
}}
pub type PNDIS_RSS_PROCESSOR = *mut NDIS_RSS_PROCESSOR;
pub const NDIS_RSS_PROCESSOR_INFO_REVISION_1: UCHAR = 1;
pub const NDIS_RSS_PROCESSOR_INFO_REVISION_2: UCHAR = 2;
ENUM!{enum NDIS_RSS_PROFILE {
    NdisRssProfileClosest = 1,
    NdisRssProfileClosestStatic,
    NdisRssProfileNuma,
    NdisRssProfileNumaStatic,
    NdisRssProfileConservative,
    NdisRssProfileMaximum,
}}
pub type PNDIS_RSS_PROFILE = *mut NDIS_RSS_PROFILE;
STRUCT!{struct NDIS_RSS_PROCESSOR_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    RssBaseProcessor: PROCESSOR_NUMBER,
    MaxNumRssProcessors: ULONG,
    PreferredNumaNode: USHORT,
    RssProcessorArrayOffset: ULONG,
    RssProcessorCount: ULONG,
    RssProcessorEntrySize: ULONG,
    RssMaxProcessor: PROCESSOR_NUMBER,
    RssProfile: NDIS_RSS_PROFILE,
}}
pub type PNDIS_RSS_PROCESSOR_INFO = *mut NDIS_RSS_PROCESSOR_INFO;
STRUCT!{struct NDIS_PROCESSOR_INFO_EX {
    ProcNum: PROCESSOR_NUMBER,
    SocketId: ULONG,
    CoreId: ULONG,
    HyperThreadId: ULONG,
    NodeId: USHORT,
    NodeDistance: USHORT,
}}
pub type PNDIS_PROCESSOR_INFO_EX = *mut NDIS_PROCESSOR_INFO_EX;
pub const NDIS_SYSTEM_PROCESSOR_INFO_EX_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SYSTEM_PROCESSOR_INFO_EX {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    ProcessorVendor: NDIS_PROCESSOR_VENDOR,
    NumSockets: ULONG,
    NumCores: ULONG,
    NumCoresPerSocket: ULONG,
    MaxHyperThreadingProcsPerCore: ULONG,
    ProcessorInfoOffset: ULONG,
    NumberOfProcessors: ULONG,
    ProcessorInfoEntrySize: ULONG,
}}
pub type PNDIS_SYSTEM_PROCESSOR_INFO_EX = *mut NDIS_SYSTEM_PROCESSOR_INFO_EX;
ENUM!{enum NDIS_HYPERVISOR_PARTITION_TYPE {
    NdisHypervisorPartitionTypeUnknown,
    NdisHypervisorPartitionTypeMsHvParent,
    NdisHypervisorPartitionMsHvChild,
    NdisHypervisorPartitionTypeMax,
}}
pub type PNDIS_HYPERVISOR_PARTITION_TYPE = *mut NDIS_HYPERVISOR_PARTITION_TYPE;
pub const NDIS_HYPERVISOR_INFO_FLAG_HYPERVISOR_PRESENT: ULONG = 0x00000001;
pub const NDIS_HYPERVISOR_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_HYPERVISOR_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PartitionType: NDIS_HYPERVISOR_PARTITION_TYPE,
}}
pub type PNDIS_HYPERVISOR_INFO = *mut NDIS_HYPERVISOR_INFO;
STRUCT!{struct NDIS_WMI_GROUP_AFFINITY {
    Mask: ULONG64,
    Group: USHORT,
    Reserved: [USHORT; 3],
}}
pub type PNDIS_WMI_GROUP_AFFINITY = *mut NDIS_WMI_GROUP_AFFINITY;
pub const NDIS_WMI_RECEIVE_QUEUE_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_WMI_RECEIVE_QUEUE_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    QueueType: NDIS_RECEIVE_QUEUE_TYPE,
    QueueId: NDIS_RECEIVE_QUEUE_ID,
    QueueGroupId: NDIS_RECEIVE_QUEUE_GROUP_ID,
    ProcessorAffinity: NDIS_WMI_GROUP_AFFINITY,
    NumSuggestedReceiveBuffers: ULONG,
    MSIXTableEntry: ULONG,
    LookaheadSize: ULONG,
    VmName: NDIS_VM_NAME,
    QueueName: NDIS_QUEUE_NAME,
}}
pub type PNDIS_WMI_RECEIVE_QUEUE_PARAMETERS = *mut NDIS_WMI_RECEIVE_QUEUE_PARAMETERS;
pub const NDIS_WMI_RECEIVE_QUEUE_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_WMI_RECEIVE_QUEUE_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    QueueType: NDIS_RECEIVE_QUEUE_TYPE,
    QueueId: NDIS_RECEIVE_QUEUE_ID,
    QueueGroupId: NDIS_RECEIVE_QUEUE_GROUP_ID,
    QueueState: NDIS_RECEIVE_QUEUE_OPERATIONAL_STATE,
    ProcessorAffinity: NDIS_WMI_GROUP_AFFINITY,
    NumSuggestedReceiveBuffers: ULONG,
    MSIXTableEntry: ULONG,
    LookaheadSize: ULONG,
    VmName: NDIS_VM_NAME,
    QueueName: NDIS_QUEUE_NAME,
}}
pub type PNDIS_WMI_RECEIVE_QUEUE_INFO = *mut NDIS_WMI_RECEIVE_QUEUE_INFO;
STRUCT!{struct NDIS_NDK_PERFORMANCE_COUNTERS {
    Connect: ULONG64,
    Accept: ULONG64,
    ConnectFailure: ULONG64,
    ConnectionError: ULONG64,
    ActiveConnection: ULONG64,
    Reserved01: ULONG64,
    Reserved02: ULONG64,
    Reserved03: ULONG64,
    Reserved04: ULONG64,
    Reserved05: ULONG64,
    Reserved06: ULONG64,
    Reserved07: ULONG64,
    Reserved08: ULONG64,
    Reserved09: ULONG64,
    Reserved10: ULONG64,
    Reserved11: ULONG64,
    Reserved12: ULONG64,
    Reserved13: ULONG64,
    Reserved14: ULONG64,
    Reserved15: ULONG64,
    Reserved16: ULONG64,
    Reserved17: ULONG64,
    Reserved18: ULONG64,
    Reserved19: ULONG64,
    Reserved20: ULONG64,
    CQError: ULONG64,
    RDMAInOctets: ULONG64,
    RDMAOutOctets: ULONG64,
    RDMAInFrames: ULONG64,
    RDMAOutFrames: ULONG64,
}}
pub type PNDIS_NDK_PERFORMANCE_COUNTERS = *mut NDIS_NDK_PERFORMANCE_COUNTERS;
pub const NDIS_NDK_CAPABILITIES_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_NDK_CAPABILITIES {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    MaxQpCount: ULONG,
    MaxCqCount: ULONG,
    MaxMrCount: ULONG,
    MaxPdCount: ULONG,
    MaxInboundReadLimit: ULONG,
    MaxOutboundReadLimit: ULONG,
    MaxMwCount: ULONG,
    MaxSrqCount: ULONG,
    MissingCounterMask: ULONG64,
    NdkInfo: *mut NDK_ADAPTER_INFO,
}}
pub type PNDIS_NDK_CAPABILITIES = *mut NDIS_NDK_CAPABILITIES;
pub const OID_NDK_SET_STATE: ULONG = 0xFC040201;
pub const OID_NDK_STATISTICS: ULONG = 0xFC040202;
pub const OID_NDK_CONNECTIONS: ULONG = 0xFC040203;
pub const OID_NDK_LOCAL_ENDPOINTS: ULONG = 0xFC040204;
STRUCT!{struct NDK_WMI_ADAPTER_INFO {
    Version: NDK_VERSION,
    VendorId: UINT32,
    DeviceId: UINT32,
    MaxRegistrationSize: ULONGLONG,
    MaxWindowSize: ULONGLONG,
    FRMRPageCount: ULONG,
    MaxInitiatorRequestSge: ULONG,
    MaxReceiveRequestSge: ULONG,
    MaxReadRequestSge: ULONG,
    MaxTransferLength: ULONG,
    MaxInlineDataSize: ULONG,
    MaxInboundReadLimit: ULONG,
    MaxOutboundReadLimit: ULONG,
    MaxReceiveQueueDepth: ULONG,
    MaxInitiatorQueueDepth: ULONG,
    MaxSrqDepth: ULONG,
    MaxCqDepth: ULONG,
    LargeRequestThreshold: ULONG,
    MaxCallerData: ULONG,
    MaxCalleeData: ULONG,
    AdapterFlags: ULONG,
}}
pub type PNDK_WMI_ADAPTER_INFO = *mut NDK_WMI_ADAPTER_INFO;
STRUCT!{struct NDIS_WMI_NDK_CAPABILITIES {
    MaxQpCount: ULONG,
    MaxCqCount: ULONG,
    MaxMrCount: ULONG,
    MaxPdCount: ULONG,
    MaxInboundReadLimit: ULONG,
    MaxOutboundReadLimit: ULONG,
    MaxMwCount: ULONG,
    MaxSrqCount: ULONG,
    MissingCounterMask: ULONG64,
    NdkInfo: NDK_WMI_ADAPTER_INFO,
}}
pub type PNDIS_WMI_NDK_CAPABILITIES = *mut NDIS_WMI_NDK_CAPABILITIES;
DEFINE_GUID!{GUID_NDIS_NDK_CAPABILITIES,
    0x7969ba4d, 0xdd80, 0x4bc7, 0xb3, 0xe6, 0x68, 0x04, 0x39, 0x97, 0xe5, 0x19}
DEFINE_GUID!{GUID_NDIS_NDK_STATE,
    0x530c69c9, 0x2f51, 0x49de, 0xa1, 0xaf, 0x08, 0x8d, 0x54, 0xff, 0xa4, 0x74}
STRUCT!{struct NDIS_NDK_STATISTICS_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    CounterSet: NDIS_NDK_PERFORMANCE_COUNTERS,
}}
STRUCT!{struct NDIS_NDK_CONNECTION_ENTRY {
    Local: SOCKADDR_INET,
    Remote: SOCKADDR_INET,
    UserModeOwner: BOOLEAN,
    OwnerPid: ULONG,
}}
STRUCT!{struct NDIS_NDK_CONNECTIONS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    Count: ULONG,
    NDConnectionsMappedtoTCPConnections: BOOLEAN,
    Connections: [NDIS_NDK_CONNECTION_ENTRY; 1],
}}
STRUCT!{struct NDIS_NDK_LOCAL_ENDPOINT_ENTRY {
    Local: SOCKADDR_INET,
    UserModeOwner: BOOLEAN,
    Listener: BOOLEAN,
    OwnerPid: ULONG,
}}
pub const NDIS_NDK_LOCAL_ENDPOINTS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_NDK_LOCAL_ENDPOINTS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    Count: ULONG,
    NDLocalEndpointsMappedtoTCPLocalEndpoints: BOOLEAN,
    LocalEndpoints: [NDIS_NDK_LOCAL_ENDPOINT_ENTRY; 1],
}}
pub const OID_QOS_HARDWARE_CAPABILITIES: ULONG = 0xFC050001;
pub const OID_QOS_CURRENT_CAPABILITIES: ULONG = 0xFC050002;
pub const OID_QOS_PARAMETERS: ULONG = 0xFC050003;
pub const OID_QOS_OPERATIONAL_PARAMETERS: ULONG = 0xFC050004;
pub const OID_QOS_REMOTE_PARAMETERS: ULONG = 0xFC050005;
pub const NDIS_QOS_MAXIMUM_PRIORITIES: usize = 8;
pub const NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES: usize = 8;
pub const NDIS_QOS_CAPABILITIES_STRICT_TSA_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_QOS_CAPABILITIES_MACSEC_BYPASS_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_QOS_CAPABILITIES_CEE_DCBX_SUPPORTED: ULONG = 0x00000004;
pub const NDIS_QOS_CAPABILITIES_IEEE_DCBX_SUPPORTED: ULONG = 0x00000008;
pub const NDIS_QOS_CAPABILITIES_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_QOS_CAPABILITIES {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    MaxNumTrafficClasses: ULONG,
    MaxNumEtsCapableTrafficClasses: ULONG,
    MaxNumPfcEnabledTrafficClasses: ULONG,
}}
pub type PNDIS_QOS_CAPABILITIES = *mut NDIS_QOS_CAPABILITIES;
pub const NDIS_QOS_CLASSIFICATION_SET_BY_MINIPORT_MASK: ULONG = 0xFF000000;
pub const NDIS_QOS_CLASSIFICATION_ENFORCED_BY_MINIPORT: ULONG = 0x01000000;
pub const NDIS_QOS_CONDITION_RESERVED: USHORT = 0x0;
pub const NDIS_QOS_CONDITION_DEFAULT: USHORT = 0x1;
pub const NDIS_QOS_CONDITION_TCP_PORT: USHORT = 0x2;
pub const NDIS_QOS_CONDITION_UDP_PORT: USHORT = 0x3;
pub const NDIS_QOS_CONDITION_TCP_OR_UDP_PORT: USHORT = 0x4;
pub const NDIS_QOS_CONDITION_ETHERTYPE: USHORT = 0x5;
pub const NDIS_QOS_CONDITION_NETDIRECT_PORT: USHORT = 0x6;
pub const NDIS_QOS_CONDITION_MAXIMUM: USHORT = 0x7;
pub const NDIS_QOS_ACTION_PRIORITY: USHORT = 0x0;
pub const NDIS_QOS_ACTION_MAXIMUM: USHORT = 0x1;
pub const NDIS_QOS_CLASSIFICATION_ELEMENT_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_QOS_CLASSIFICATION_ELEMENT {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    ConditionSelector: USHORT,
    ConditionField: USHORT,
    ActionSelector: USHORT,
    ActionField: USHORT,
}}
pub type PNDIS_QOS_CLASSIFICATION_ELEMENT = *mut NDIS_QOS_CLASSIFICATION_ELEMENT;
pub const NDIS_QOS_PARAMETERS_ETS_CHANGED: ULONG = 0x00000001;
pub const NDIS_QOS_PARAMETERS_ETS_CONFIGURED: ULONG = 0x00000002;
pub const NDIS_QOS_PARAMETERS_PFC_CHANGED: ULONG = 0x00000100;
pub const NDIS_QOS_PARAMETERS_PFC_CONFIGURED: ULONG = 0x00000200;
pub const NDIS_QOS_PARAMETERS_CLASSIFICATION_CHANGED: ULONG = 0x00010000;
pub const NDIS_QOS_PARAMETERS_CLASSIFICATION_CONFIGURED: ULONG = 0x00020000;
pub const NDIS_QOS_PARAMETERS_WILLING: ULONG = 0x80000000;
pub const NDIS_QOS_TSA_STRICT: UCHAR = 0x0;
pub const NDIS_QOS_TSA_CBS: UCHAR = 0x1;
pub const NDIS_QOS_TSA_ETS: UCHAR = 0x2;
pub const NDIS_QOS_TSA_MAXIMUM: UCHAR = 0x3;
pub const NDIS_QOS_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_QOS_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    NumTrafficClasses: ULONG,
    PriorityAssignmentTable: [UCHAR; NDIS_QOS_MAXIMUM_PRIORITIES],
    TcBandwidthAssignmentTable: [UCHAR; NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES],
    TsaAssignmentTable: [UCHAR; NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES],
    PfcEnable: ULONG,
    NumClassificationElements: ULONG,
    ClassificationElementSize: ULONG,
    FirstClassificationElementOffset: ULONG,
}}
pub type PNDIS_QOS_PARAMETERS = *mut NDIS_QOS_PARAMETERS;
pub type NDIS_NIC_SWITCH_FRIENDLYNAME = NDIS_IF_COUNTED_STRING;
pub type PNDIS_NIC_SWITCH_FRIENDLYNAME = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_VPORT_NAME = NDIS_IF_COUNTED_STRING;
pub type PNDIS_VPORT_NAME = *mut NDIS_IF_COUNTED_STRING;
pub type NDIS_NIC_SWITCH_ID = ULONG;
pub type PNDIS_NIC_SWITCH_ID = *mut ULONG;
pub type NDIS_SRIOV_FUNCTION_ID = USHORT;
pub type PNDIS_SRIOV_FUNCTION_ID = *mut USHORT;
pub type NDIS_VF_RID = ULONG;
pub type PNDIS_VF_RID = *mut ULONG;
pub const NDIS_PF_FUNCTION_ID: USHORT = -1i16 as u16;
pub const NDIS_INVALID_VF_FUNCTION_ID: USHORT = -1i16 as u16;
pub const NDIS_INVALID_RID: ULONG = -1i32 as u32;
pub const NDIS_DEFAULT_VPORT_ID: ULONG = 0;
pub const NDIS_INVALID_VPORT_ID: ULONG = -1i32 as u32;
pub const NDIS_DEFAULT_SWITCH_ID: ULONG = 0;
pub const NDIS_INVALID_SWITCH_ID: ULONG = -1i32 as u32;
ENUM!{enum NDIS_NIC_SWITCH_TYPE {
    NdisNicSwitchTypeUnspecified,
    NdisNicSwitchTypeExternal,
    NdisNicSwitchTypeMax,
}}
pub type PNDIS_NIC_SWITCH_TYPE = *mut NDIS_NIC_SWITCH_TYPE;
pub const NDIS_NIC_SWITCH_PARAMETERS_CHANGE_MASK: ULONG = 0xFFFF0000;
pub const NDIS_NIC_SWITCH_PARAMETERS_SWITCH_NAME_CHANGED: ULONG = 0x00010000;
pub const NDIS_NIC_SWITCH_PARAMETERS_DEFAULT_NUMBER_OF_QUEUE_PAIRS_FOR_DEFAULT_VPORT: ULONG = 1;
pub const NDIS_NIC_SWITCH_PARAMETERS_REVISION_1: UCHAR = 1;
pub const NDIS_NIC_SWITCH_PARAMETERS_REVISION_2: UCHAR = 2;
STRUCT!{struct NDIS_NIC_SWITCH_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SwitchType: NDIS_NIC_SWITCH_TYPE,
    SwitchId: NDIS_NIC_SWITCH_ID,
    SwitchFriendlyName: NDIS_NIC_SWITCH_FRIENDLYNAME,
    NumVFs: ULONG,
    NdisReserved1: ULONG,
    NdisReserved2: ULONG,
    NdisReserved3: ULONG,
    NumQueuePairsForDefaultVPort: ULONG,
}}
pub type PNDIS_NIC_SWITCH_PARAMETERS = *mut NDIS_NIC_SWITCH_PARAMETERS;
pub const NDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SwitchId: NDIS_NIC_SWITCH_ID,
}}
pub type PNDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS = *mut NDIS_NIC_SWITCH_DELETE_SWITCH_PARAMETERS;
pub const NDIS_NIC_SWITCH_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_NIC_SWITCH_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SwitchType: NDIS_NIC_SWITCH_TYPE,
    SwitchId: NDIS_NIC_SWITCH_ID,
    SwitchFriendlyName: NDIS_NIC_SWITCH_FRIENDLYNAME,
    NumVFs: ULONG,
    NumAllocatedVFs: ULONG,
    NumVPorts: ULONG,
    NumActiveVPorts: ULONG,
    NumQueuePairsForDefaultVPort: ULONG,
    NumQueuePairsForNonDefaultVPorts: ULONG,
    NumActiveDefaultVPortMacAddresses: ULONG,
    NumActiveNonDefaultVPortMacAddresses: ULONG,
    NumActiveDefaultVPortVlanIds: ULONG,
    NumActiveNonDefaultVPortVlanIds: ULONG,
}}
pub type PNDIS_NIC_SWITCH_INFO = *mut NDIS_NIC_SWITCH_INFO;
pub const NDIS_NIC_SWITCH_INFO_ARRAY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_NIC_SWITCH_INFO_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    FirstElementOffset: ULONG,
    NumElements: ULONG,
    ElementSize: ULONG,
}}
pub type PNDIS_NIC_SWITCH_INFO_ARRAY = *mut NDIS_NIC_SWITCH_INFO_ARRAY;
ENUM!{enum NDIS_NIC_SWITCH_VPORT_STATE {
    NdisNicSwitchVPortStateUndefined,
    NdisNicSwitchVPortStateActivated,
    NdisNicSwitchVPortStateDeactivated,
    NdisNicSwitchVPortStateMaximum,
}}
pub type PNDIS_NIC_SWITCH_VPORT_STATE = *mut NDIS_NIC_SWITCH_VPORT_STATE;
ENUM!{enum NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION {
    NdisNicSwitchVPortInterruptModerationUndefined = 0,
    NdisNicSwitchVPortInterruptModerationAdaptive = 1,
    NdisNicSwitchVPortInterruptModerationOff = 2,
    NdisNicSwitchVPortInterruptModerationLow = 100,
    NdisNicSwitchVPortInterruptModerationMedium = 200,
    NdisNicSwitchVPortInterruptModerationHigh = 300,
}}
pub type PNDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION =
    *mut NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION;
pub type NDIS_SWITCH_PORT_ID = UINT32;
pub type PNDIS_SWITCH_PORT_ID = *mut UINT32;
pub type NDIS_SWITCH_NIC_INDEX = USHORT;
pub type PNDIS_SWITCH_NIC_INDEX = *mut USHORT;
STRUCT!{struct NDIS_NDK_REQUEST_PARAMETERS {
    RdmaRequested: BOOLEAN,
    SwitchPortId: NDIS_SWITCH_PORT_ID,
    IfIndex: NET_IFINDEX,
    MacAddress: [UCHAR; NDIS_MAX_PHYS_ADDRESS_LENGTH],
    VlanId: UINT,
    NdkReserved: NDIS_NDK_CAPABILITIES,
}}
pub type PNDIS_NDK_REQUEST_PARAMETERS = *mut NDIS_NDK_REQUEST_PARAMETERS;
STRUCT!{struct NDIS_NDK_RESPONSE_PARAMETERS {
    CapabilitiesAvailable: BOOLEAN,
    ReceivedCapabilities: NDIS_NDK_CAPABILITIES,
}}
pub type PNDIS_NDK_RESPONSE_PARAMETERS = *mut NDIS_NDK_RESPONSE_PARAMETERS;
STRUCT!{struct NDIS_NDK_PARAMETERS {
    NdkRequest: NDIS_NDK_REQUEST_PARAMETERS,
    NdkResponse: NDIS_NDK_RESPONSE_PARAMETERS,
}}
pub type PNDIS_NDK_PARAMETERS = *mut NDIS_NDK_PARAMETERS;
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_LOOKAHEAD_SPLIT_ENABLED: ULONG = 0x00000001;
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_PACKET_DIRECT_RX_ONLY: ULONG = 0x00000002;
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_CHANGE_MASK: ULONG = 0xFFFF0000;
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_FLAGS_CHANGED: ULONG = 0x00010000;
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_NAME_CHANGED: ULONG = 0x00020000;
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_INT_MOD_CHANGED: ULONG = 0x00040000;
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_STATE_CHANGED: ULONG = 0x00080000;
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_PROCESSOR_AFFINITY_CHANGED: ULONG = 0x00100000;
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_NDK_PARAMS_CHANGED: ULONG = 0x00200000;
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_QOS_SQ_ID_CHANGED: ULONG = 0x00400000;
pub const NDIS_NIC_SWITCH_VPORT_PARAMS_NUM_QUEUE_PAIRS_CHANGED: ULONG = 0x00800000;
pub const NDIS_NIC_SWITCH_VPORT_PARAMETERS_REVISION_1: UCHAR = 1;
pub const NDIS_NIC_SWITCH_VPORT_PARAMETERS_REVISION_2: UCHAR = 2;
STRUCT!{struct NDIS_NIC_SWITCH_VPORT_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SwitchId: NDIS_NIC_SWITCH_ID,
    VPortId: NDIS_NIC_SWITCH_VPORT_ID,
    VPortName: NDIS_VPORT_NAME,
    AttachedFunctionId: NDIS_SRIOV_FUNCTION_ID,
    NumQueuePairs: ULONG,
    InterruptModeration: NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION,
    VPortState: NDIS_NIC_SWITCH_VPORT_STATE,
    ProcessorAffinity: GROUP_AFFINITY,
    LookaheadSize: ULONG,
    NdkParams: NDIS_NDK_PARAMETERS,
    QosSqId: NDIS_QOS_SQ_ID,
}}
pub type PNDIS_NIC_SWITCH_VPORT_PARAMETERS = *mut NDIS_NIC_SWITCH_VPORT_PARAMETERS;
pub const NDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    VPortId: NDIS_NIC_SWITCH_VPORT_ID,
}}
pub type PNDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS = *mut NDIS_NIC_SWITCH_DELETE_VPORT_PARAMETERS;
pub const NDIS_NIC_SWITCH_VPORT_INFO_LOOKAHEAD_SPLIT_ENABLED: ULONG = 0x00000001;
pub const NDIS_NIC_SWITCH_VPORT_INFO_PACKET_DIRECT_RX_ONLY: ULONG = 0x00000002;
pub const NDIS_NIC_SWITCH_VPORT_INFO_GFT_ENABLED: ULONG = 0x00000004;
pub const NDIS_NIC_SWITCH_VPORT_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_NIC_SWITCH_VPORT_INFO {
    Header: NDIS_OBJECT_HEADER,
    VPortId: NDIS_NIC_SWITCH_VPORT_ID,
    Flags: ULONG,
    SwitchId: NDIS_NIC_SWITCH_ID,
    VPortName: NDIS_VPORT_NAME,
    AttachedFunctionId: NDIS_SRIOV_FUNCTION_ID,
    NumQueuePairs: ULONG,
    InterruptModeration: NDIS_NIC_SWITCH_VPORT_INTERRUPT_MODERATION,
    VPortState: NDIS_NIC_SWITCH_VPORT_STATE,
    ProcessorAffinity: GROUP_AFFINITY,
    LookaheadSize: ULONG,
    NumFilters: ULONG,
}}
pub type PNDIS_NIC_SWITCH_VPORT_INFO = *mut NDIS_NIC_SWITCH_VPORT_INFO;
pub const NDIS_NIC_SWITCH_VPORT_INFO_ARRAY_ENUM_ON_SPECIFIC_FUNCTION: ULONG = 0x00000001;
pub const NDIS_NIC_SWITCH_VPORT_INFO_ARRAY_ENUM_ON_SPECIFIC_SWITCH: ULONG = 0x00000002;
pub const NDIS_NIC_SWITCH_VPORT_INFO_ARRAY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_NIC_SWITCH_VPORT_INFO_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SwitchId: NDIS_NIC_SWITCH_ID,
    AttachedFunctionId: NDIS_SRIOV_FUNCTION_ID,
    FirstElementOffset: ULONG,
    NumElements: ULONG,
    ElementSize: ULONG,
}}
pub type PNDIS_NIC_SWITCH_VPORT_INFO_ARRAY = *mut NDIS_NIC_SWITCH_VPORT_INFO_ARRAY;
pub const NDIS_NIC_SWITCH_VF_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_NIC_SWITCH_VF_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SwitchId: NDIS_NIC_SWITCH_ID,
    VMName: NDIS_VM_NAME,
    VMFriendlyName: NDIS_VM_FRIENDLYNAME,
    NicName: NDIS_SWITCH_NIC_NAME,
    MacAddressLength: USHORT,
    PermanentMacAddress: [UCHAR; NDIS_MAX_PHYS_ADDRESS_LENGTH],
    CurrentMacAddress: [UCHAR; NDIS_MAX_PHYS_ADDRESS_LENGTH],
    VFId: NDIS_SRIOV_FUNCTION_ID,
    RequestorId: NDIS_VF_RID,
}}
pub type PNDIS_NIC_SWITCH_VF_PARAMETERS = *mut NDIS_NIC_SWITCH_VF_PARAMETERS;
pub const NDIS_NIC_SWITCH_FREE_VF_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_NIC_SWITCH_FREE_VF_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    VFId: NDIS_SRIOV_FUNCTION_ID,
}}
pub type PNDIS_NIC_SWITCH_FREE_VF_PARAMETERS = *mut NDIS_NIC_SWITCH_FREE_VF_PARAMETERS;
pub const NDIS_NIC_SWITCH_VF_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_NIC_SWITCH_VF_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SwitchId: NDIS_NIC_SWITCH_ID,
    VMName: NDIS_VM_NAME,
    VMFriendlyName: NDIS_VM_FRIENDLYNAME,
    NicName: NDIS_SWITCH_NIC_NAME,
    MacAddressLength: USHORT,
    PermanentMacAddress: [UCHAR; NDIS_MAX_PHYS_ADDRESS_LENGTH],
    CurrentMacAddress: [UCHAR; NDIS_MAX_PHYS_ADDRESS_LENGTH],
    VFId: NDIS_SRIOV_FUNCTION_ID,
    RequestorId: NDIS_VF_RID,
}}
pub type PNDIS_NIC_SWITCH_VF_INFO = *mut NDIS_NIC_SWITCH_VF_INFO;
pub const NDIS_NIC_SWITCH_VF_INFO_ARRAY_ENUM_ON_SPECIFIC_SWITCH: ULONG = 0x00000001;
pub const NDIS_NIC_SWITCH_VF_INFO_ARRAY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_NIC_SWITCH_VF_INFO_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SwitchId: NDIS_NIC_SWITCH_ID,
    FirstElementOffset: ULONG,
    NumElements: ULONG,
    ElementSize: ULONG,
}}
pub type PNDIS_NIC_SWITCH_VF_INFO_ARRAY = *mut NDIS_NIC_SWITCH_VF_INFO_ARRAY;
pub const NDIS_SRIOV_CAPS_SRIOV_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_SRIOV_CAPS_PF_MINIPORT: ULONG = 0x00000002;
pub const NDIS_SRIOV_CAPS_VF_MINIPORT: ULONG = 0x00000004;
pub const NDIS_SRIOV_CAPABILITIES_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SRIOV_CAPABILITIES {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SriovCapabilities: ULONG,
}}
pub type PNDIS_SRIOV_CAPABILITIES = *mut NDIS_SRIOV_CAPABILITIES;
pub const NDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    VFId: NDIS_SRIOV_FUNCTION_ID,
    Offset: ULONG,
    Length: ULONG,
    BufferOffset: ULONG,
}}
pub type PNDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS =
    *mut NDIS_SRIOV_READ_VF_CONFIG_SPACE_PARAMETERS;
pub const NDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    VFId: NDIS_SRIOV_FUNCTION_ID,
    Offset: ULONG,
    Length: ULONG,
    BufferOffset: ULONG,
}}
pub type PNDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS =
    *mut NDIS_SRIOV_WRITE_VF_CONFIG_SPACE_PARAMETERS;
pub const NDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    VFId: NDIS_SRIOV_FUNCTION_ID,
    BlockId: ULONG,
    Length: ULONG,
    BufferOffset: ULONG,
}}
pub type PNDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS =
    *mut NDIS_SRIOV_READ_VF_CONFIG_BLOCK_PARAMETERS;
pub const NDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    VFId: NDIS_SRIOV_FUNCTION_ID,
    BlockId: ULONG,
    Length: ULONG,
    BufferOffset: ULONG,
}}
pub type PNDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS =
    *mut NDIS_SRIOV_WRITE_VF_CONFIG_BLOCK_PARAMETERS;
pub const NDIS_SRIOV_RESET_VF_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SRIOV_RESET_VF_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    VFId: NDIS_SRIOV_FUNCTION_ID,
}}
pub type PNDIS_SRIOV_RESET_VF_PARAMETERS = *mut NDIS_SRIOV_RESET_VF_PARAMETERS;
pub const NDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    VFId: NDIS_SRIOV_FUNCTION_ID,
    PowerState: NDIS_DEVICE_POWER_STATE,
    WakeEnable: BOOLEAN,
}}
pub type PNDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS = *mut NDIS_SRIOV_SET_VF_POWER_STATE_PARAMETERS;
pub const NDIS_SRIOV_CONFIG_STATE_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SRIOV_CONFIG_STATE_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    BlockId: ULONG,
    Length: ULONG,
}}
pub type PNDIS_SRIOV_CONFIG_STATE_PARAMETERS = *mut NDIS_SRIOV_CONFIG_STATE_PARAMETERS;
pub const NDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO {
    Header: NDIS_OBJECT_HEADER,
    VFId: NDIS_SRIOV_FUNCTION_ID,
    VendorId: USHORT,
    DeviceId: USHORT,
}}
pub type PNDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO = *mut NDIS_SRIOV_VF_VENDOR_DEVICE_ID_INFO;
pub const NDIS_SRIOV_PROBED_BARS_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SRIOV_PROBED_BARS_INFO {
    Header: NDIS_OBJECT_HEADER,
    BaseRegisterValuesOffset: ULONG,
}}
pub type PNDIS_SRIOV_PROBED_BARS_INFO = *mut NDIS_SRIOV_PROBED_BARS_INFO;
pub const NDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    FilterId: NDIS_RECEIVE_FILTER_ID,
    SourceQueueId: NDIS_RECEIVE_QUEUE_ID,
    SourceVPortId: NDIS_NIC_SWITCH_VPORT_ID,
    DestQueueId: NDIS_RECEIVE_QUEUE_ID,
    DestVPortId: NDIS_NIC_SWITCH_VPORT_ID,
}}
pub type PNDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS =
    *mut NDIS_RECEIVE_FILTER_MOVE_FILTER_PARAMETERS;
pub const NDIS_SRIOV_BAR_RESOURCES_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SRIOV_BAR_RESOURCES_INFO {
    Header: NDIS_OBJECT_HEADER,
    VFId: NDIS_SRIOV_FUNCTION_ID,
    BarIndex: USHORT,
    BarResourcesOffset: ULONG,
}}
pub type PNDIS_SRIOV_BAR_RESOURCES_INFO = *mut NDIS_SRIOV_BAR_RESOURCES_INFO;
pub const NDIS_SRIOV_PF_LUID_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SRIOV_PF_LUID_INFO {
    Header: NDIS_OBJECT_HEADER,
    Luid: LUID,
}}
pub type PNDIS_SRIOV_PF_LUID_INFO = *mut NDIS_SRIOV_PF_LUID_INFO;
pub const NDIS_SRIOV_VF_SERIAL_NUMBER_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SRIOV_VF_SERIAL_NUMBER_INFO {
    Header: NDIS_OBJECT_HEADER,
    SerialNumber: ULONG,
}}
pub type PNDIS_SRIOV_VF_SERIAL_NUMBER_INFO = *mut NDIS_SRIOV_VF_SERIAL_NUMBER_INFO;
pub const NDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO {
    Header: NDIS_OBJECT_HEADER,
    BlockMask: ULONG64,
}}
pub type PNDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO =
    *mut NDIS_SRIOV_VF_INVALIDATE_CONFIG_BLOCK_INFO;
STRUCT!{struct NDIS_SRIOV_OVERLYING_ADAPTER_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    IfIndex: ULONG,
    NdisReserved1: ULONG,
    NdisReserved2: ULONG,
}}
pub type PNDIS_SRIOV_OVERLYING_ADAPTER_INFO = *mut NDIS_SRIOV_OVERLYING_ADAPTER_INFO;
pub const NDIS_SRIOV_OVERLYING_ADAPTER_INFO_VERSION_1: UCHAR = 1;
ENUM!{enum NDIS_ISOLATION_MODE {
    NdisIsolationModeNone = 0,
    NdisIsolationModeNativeVirtualSubnet = 1,
    NdisIsolationModeExternalVirtualSubnet = 2,
    NdisIsolationModeVlan = 3,
}}
pub type PNDIS_ISOLATION_MODE = *mut NDIS_ISOLATION_MODE;
pub type NDIS_ROUTING_DOMAIN_ID = GUID;
pub type PNDIS_ROUTING_DOMAIN_ID = *mut GUID;
pub const NDIS_ISOLATION_NAME_MAX_STRING_SIZE: usize = 127;
STRUCT!{struct NDIS_ISOLATION_NAME {
    Length: USHORT,
    String_: [WCHAR; NDIS_ISOLATION_NAME_MAX_STRING_SIZE + 1],
}}
pub type NDIS_ISOLATION_ID_NAME = NDIS_ISOLATION_NAME;
pub type PNDIS_ISOLATION_ID_NAME = *mut NDIS_ISOLATION_NAME;
pub type NDIS_ROUTING_DOMAIN_NAME = NDIS_ISOLATION_NAME;
pub type PNDIS_ROUTING_DOMAIN_NAME = *mut NDIS_ISOLATION_NAME;
STRUCT!{struct NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    IsolationIdName: NDIS_ISOLATION_ID_NAME,
    IsolationId: UINT32,
}}
BITFIELD!(NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY IsolationId: UINT32 [
    VirtualSubnetId set_VirtualSubnetId[0..24],
    VlanId set_VlanId[0..12],
]);
pub type PNDIS_ROUTING_DOMAIN_ISOLATION_ENTRY = *mut NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY;
pub const NDIS_ROUTING_DOMAIN_ISOLATION_ENTRY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_ROUTING_DOMAIN_ENTRY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    RoutingDomainId: NDIS_ROUTING_DOMAIN_ID,
    RoutingDomainName: NDIS_ROUTING_DOMAIN_NAME,
    NumIsolationEntries: ULONG,
    FirstIsolationEntryOffset: ULONG,
}}
pub type PNDIS_ROUTING_DOMAIN_ENTRY = *mut NDIS_ROUTING_DOMAIN_ENTRY;
pub const NDIS_ROUTING_DOMAIN_ENTRY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_ISOLATION_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    IsolationMode: NDIS_ISOLATION_MODE,
    AllowUntaggedTraffic: BOOLEAN,
    NumRoutingDomainEntries: ULONG,
    FirstRoutingDomainEntryOffset: ULONG,
}}
pub type PNDIS_ISOLATION_PARAMETERS = *mut NDIS_ISOLATION_PARAMETERS;
pub const NDIS_ISOLATION_PARAMETERS_REVISION_1: UCHAR = 1;
pub type NDIS_SWITCH_OBJECT_INSTANCE_ID = GUID;
pub type PNDIS_SWITCH_OBJECT_INSTANCE_ID = *mut GUID;
pub type NDIS_SWITCH_OBJECT_ID = GUID;
pub type PNDIS_SWITCH_OBJECT_ID = *mut GUID;
pub type NDIS_SWITCH_OBJECT_VERSION = USHORT;
pub type PNDIS_SWITCH_OBJECT_VERSION = *mut USHORT;
pub type NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION = USHORT;
pub type PNDIS_SWITCH_OBJECT_SERIALIZATION_VERSION = *mut USHORT;
pub const NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION_1: UCHAR = 1;
ENUM!{enum NDIS_SWITCH_PORT_PROPERTY_TYPE {
    NdisSwitchPortPropertyTypeUndefined,
    NdisSwitchPortPropertyTypeCustom,
    NdisSwitchPortPropertyTypeSecurity,
    NdisSwitchPortPropertyTypeVlan,
    NdisSwitchPortPropertyTypeProfile,
    NdisSwitchPortPropertyTypeIsolation,
    NdisSwitchPortPropertyTypeRoutingDomain,
    NdisSwitchPortPropertyTypeMaximum,
}}
pub const NDIS_SWITCH_PORT_PROPERTY_SECURITY_REVISION_1: UCHAR = 1;
pub const NDIS_SWITCH_PORT_PROPERTY_SECURITY_REVISION_2: UCHAR = 2;
STRUCT!{struct NDIS_SWITCH_PORT_PROPERTY_SECURITY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    AllowMacSpoofing: BOOLEAN,
    AllowIeeePriorityTag: BOOLEAN,
    VirtualSubnetId: UINT32,
    AllowTeaming: BOOLEAN,
    DynamicIPAddressLimit: UINT32,
}}
pub type PNDIS_SWITCH_PORT_PROPERTY_SECURITY = *mut NDIS_SWITCH_PORT_PROPERTY_SECURITY;
ENUM!{enum NDIS_SWITCH_PORT_VLAN_MODE {
    NdisSwitchPortVlanModeUnknown = 0,
    NdisSwitchPortVlanModeAccess = 1,
    NdisSwitchPortVlanModeTrunk = 2,
    NdisSwitchPortVlanModePrivate = 3,
    NdisSwitchPortVlanModeMax = 4,
}}
pub type PNDIS_SWITCH_PORT_VLAN_MODE = *mut NDIS_SWITCH_PORT_VLAN_MODE;
ENUM!{enum NDIS_SWITCH_PORT_PVLAN_MODE {
    NdisSwitchPortPvlanModeUndefined = 0,
    NdisSwitchPortPvlanModeIsolated,
    NdisSwitchPortPvlanModeCommunity,
    NdisSwitchPortPvlanModePromiscuous,
}}
pub type PNDIS_SWITCH_PORT_PVLAN_MODE = *mut NDIS_SWITCH_PORT_PVLAN_MODE;
pub const NDIS_SWITCH_PORT_PROPERTY_VLAN_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PORT_PROPERTY_VLAN_u_VlanProperties {
    AccessVlanId: UINT16,
    NativeVlanId: UINT16,
    PruneVlanIdArray: [UINT64; 64],
    TrunkVlanIdArray: [UINT64; 64],
}}
UNION!{union NDIS_SWITCH_PORT_PROPERTY_VLAN_u_PvlanProperties_u {
    [u64; 64],
    SecondaryVlanId SecondaryVlanId_mut: UINT16,
    SecondaryVlanIdArray SecondaryVlanIdArray_mut: [UINT64; 64],
}}
STRUCT!{struct NDIS_SWITCH_PORT_PROPERTY_VLAN_u_PvlanProperties {
    PvlanMode: NDIS_SWITCH_PORT_PVLAN_MODE,
    PrimaryVlanId: UINT16,
    u: NDIS_SWITCH_PORT_PROPERTY_VLAN_u_PvlanProperties_u,
}}
UNION!{union NDIS_SWITCH_PORT_PROPERTY_VLAN_u {
    [u64; 129],
    VlanProperties VlanProperties_mut: NDIS_SWITCH_PORT_PROPERTY_VLAN_u_VlanProperties,
    PvlanProperties PvlanProperties_mut: NDIS_SWITCH_PORT_PROPERTY_VLAN_u_PvlanProperties,
}}
STRUCT!{struct NDIS_SWITCH_PORT_PROPERTY_VLAN {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    OperationMode: NDIS_SWITCH_PORT_VLAN_MODE,
    u: NDIS_SWITCH_PORT_PROPERTY_VLAN_u,
}}
pub type PNDIS_SWITCH_PORT_PROPERTY_VLAN = *mut NDIS_SWITCH_PORT_PROPERTY_VLAN;
pub const NDIS_SWITCH_PORT_PROPERTY_PROFILE_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PORT_PROPERTY_PROFILE_PciLocation {
    BitFields: UINT32,
}}
BITFIELD!(NDIS_SWITCH_PORT_PROPERTY_PROFILE_PciLocation BitFields: UINT32 [
    PciSegmentNumber set_PciSegmentNumber[0..16],
    PciBusNumber set_PciBusNumber[16..24],
    PciDeviceNumber set_PciDeviceNumber[24..29],
    PciFunctionNumber set_PciFunctionNumber[29..32],
]);
STRUCT!{struct NDIS_SWITCH_PORT_PROPERTY_PROFILE {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    ProfileName: NDIS_SWITCH_PORT_PROPERTY_PROFILE_NAME,
    ProfileId: GUID,
    VendorName: NDIS_VENDOR_NAME,
    VendorId: GUID,
    ProfileData: UINT32,
    NetCfgInstanceId: GUID,
    PciLocation: NDIS_SWITCH_PORT_PROPERTY_PROFILE_PciLocation,
    CdnLabelId: UINT32,
    CdnLabel: NDIS_SWITCH_PORT_PROPERTY_PROFILE_CDN_LABEL,
}}
pub type PNDIS_SWITCH_PORT_PROPERTY_PROFILE = *mut NDIS_SWITCH_PORT_PROPERTY_PROFILE;
pub const NDIS_SWITCH_PORT_PROPERTY_ISOLATION_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PORT_PROPERTY_ISOLATION {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    IsolationMode: NDIS_ISOLATION_MODE,
    AllowUntaggedTraffic: BOOLEAN,
    DefaultIsolationId: UINT32,
}}
pub type PNDIS_SWITCH_PORT_PROPERTY_ISOLATION = *mut NDIS_SWITCH_PORT_PROPERTY_ISOLATION;
pub const NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    RoutingDomainId: NDIS_ROUTING_DOMAIN_ID,
    RoutingDomainName: NDIS_ROUTING_DOMAIN_NAME,
    NumIsolationEntries: ULONG,
    FirstIsolationEntryOffset: USHORT,
}}
pub type PNDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN = *mut NDIS_SWITCH_PORT_PROPERTY_ROUTING_DOMAIN;
pub const NDIS_SWITCH_PORT_PROPERTY_CUSTOM_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PORT_PROPERTY_CUSTOM {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PropertyBufferLength: ULONG,
    PropertyBufferOffset: ULONG,
}}
pub type PNDIS_SWITCH_PORT_PROPERTY_CUSTOM = *mut NDIS_SWITCH_PORT_PROPERTY_CUSTOM;
pub const NDIS_SWITCH_PORT_PROPERTY_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PORT_PROPERTY_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PortId: NDIS_SWITCH_PORT_ID,
    PropertyType: NDIS_SWITCH_PORT_PROPERTY_TYPE,
    PropertyId: NDIS_SWITCH_OBJECT_ID,
    PropertyVersion: NDIS_SWITCH_OBJECT_VERSION,
    SerializationVersion: NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION,
    PropertyInstanceId: NDIS_SWITCH_OBJECT_INSTANCE_ID,
    PropertyBufferLength: ULONG,
    PropertyBufferOffset: ULONG,
    Reserved: ULONG,
}}
pub type PNDIS_SWITCH_PORT_PROPERTY_PARAMETERS = *mut NDIS_SWITCH_PORT_PROPERTY_PARAMETERS;
#[inline]
pub fn NDIS_SWITCH_CREATE_PROPERTY_VERSION(_VersionMajor_: UCHAR, _VersionMinor_: UCHAR) ->
    USHORT {
    ((_VersionMajor_ as USHORT) << 8) + (_VersionMinor_ as USHORT)
}
pub const NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PortId: NDIS_SWITCH_PORT_ID,
    PropertyType: NDIS_SWITCH_PORT_PROPERTY_TYPE,
    PropertyId: NDIS_SWITCH_OBJECT_ID,
    PropertyInstanceId: NDIS_SWITCH_OBJECT_INSTANCE_ID,
}}
pub type PNDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS =
    *mut NDIS_SWITCH_PORT_PROPERTY_DELETE_PARAMETERS;
pub const NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PortId: NDIS_SWITCH_PORT_ID,
    PropertyType: NDIS_SWITCH_PORT_PROPERTY_TYPE,
    PropertyId: NDIS_SWITCH_OBJECT_ID,
    SerializationVersion: NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION,
    FirstPropertyOffset: ULONG,
    NumProperties: ULONG,
    Reserved: USHORT,
}}
pub type PNDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS =
    *mut NDIS_SWITCH_PORT_PROPERTY_ENUM_PARAMETERS;
pub const NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PropertyVersion: NDIS_SWITCH_OBJECT_VERSION,
    PropertyInstanceId: NDIS_SWITCH_OBJECT_INSTANCE_ID,
    QwordAlignedPropertyBufferLength: ULONG,
    PropertyBufferLength: ULONG,
    PropertyBufferOffset: ULONG,
}}
pub type PNDIS_SWITCH_PORT_PROPERTY_ENUM_INFO = *mut NDIS_SWITCH_PORT_PROPERTY_ENUM_INFO;
ENUM!{enum NDIS_SWITCH_PORT_FEATURE_STATUS_TYPE {
    NdisSwitchPortFeatureStatusTypeUndefined,
    NdisSwitchPortFeatureStatusTypeCustom,
    NdisSwitchPortFeatureStatusTypeMaximum,
}}
pub type PNDIS_SWITCH_PORT_FEATURE_STATUS_TYPE = *mut NDIS_SWITCH_PORT_FEATURE_STATUS_TYPE;
STRUCT!{struct NDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PortId: NDIS_SWITCH_PORT_ID,
    FeatureStatusType: NDIS_SWITCH_PORT_FEATURE_STATUS_TYPE,
    FeatureStatusId: NDIS_SWITCH_OBJECT_ID,
    FeatureStatusVersion: NDIS_SWITCH_OBJECT_VERSION,
    SerializationVersion: NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION,
    FeatureStatusInstanceId: NDIS_SWITCH_OBJECT_INSTANCE_ID,
    FeatureStatusBufferLength: ULONG,
    FeatureStatusBufferOffset: ULONG,
    Reserved: ULONG,
}}
pub type PNDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS =
    *mut NDIS_SWITCH_PORT_FEATURE_STATUS_PARAMETERS;
#[inline]
pub fn NDIS_SWITCH_CREATE_FEATURE_STATUS_VERSION(_VersionMajor_: UCHAR, _VersionMinor_: UCHAR) ->
    USHORT {
    ((_VersionMajor_ as USHORT) << 8) + (_VersionMinor_ as USHORT)
}
pub const NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    FeatureStatusBufferLength: ULONG,
    FeatureStatusBufferOffset: ULONG,
}}
pub type PNDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM = *mut NDIS_SWITCH_PORT_FEATURE_STATUS_CUSTOM;
ENUM!{enum NDIS_SWITCH_PROPERTY_TYPE {
    NdisSwitchPropertyTypeUndefined,
    NdisSwitchPropertyTypeCustom,
    NdisSwitchPropertyTypeMaximum,
}}
pub type PNDIS_SWITCH_PROPERTY_TYPE = *mut NDIS_SWITCH_PROPERTY_TYPE;
pub const NDIS_SWITCH_PROPERTY_CUSTOM_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PROPERTY_CUSTOM {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PropertyBufferLength: ULONG,
    PropertyBufferOffset: ULONG,
}}
pub type PNDIS_SWITCH_PROPERTY_CUSTOM = *mut NDIS_SWITCH_PROPERTY_CUSTOM;
pub const NDIS_SWITCH_PROPERTY_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PROPERTY_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PropertyType: NDIS_SWITCH_PROPERTY_TYPE,
    PropertyId: NDIS_SWITCH_OBJECT_ID,
    PropertyVersion: NDIS_SWITCH_OBJECT_VERSION,
    SerializationVersion: NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION,
    PropertyInstanceId: NDIS_SWITCH_OBJECT_INSTANCE_ID,
    PropertyBufferLength: ULONG,
    PropertyBufferOffset: ULONG,
}}
pub type PNDIS_SWITCH_PROPERTY_PARAMETERS = *mut NDIS_SWITCH_PROPERTY_PARAMETERS;
pub const NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PropertyType: NDIS_SWITCH_PROPERTY_TYPE,
    PropertyId: NDIS_SWITCH_OBJECT_ID,
    PropertyInstanceId: NDIS_SWITCH_OBJECT_INSTANCE_ID,
}}
pub type PNDIS_SWITCH_PROPERTY_DELETE_PARAMETERS = *mut NDIS_SWITCH_PROPERTY_DELETE_PARAMETERS;
pub const NDIS_SWITCH_PROPERTY_ENUM_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PROPERTY_ENUM_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PropertyInstanceId: NDIS_SWITCH_OBJECT_INSTANCE_ID,
    PropertyVersion: NDIS_SWITCH_OBJECT_VERSION,
    QwordAlignedPropertyBufferLength: ULONG,
    PropertyBufferLength: ULONG,
    PropertyBufferOffset: ULONG,
}}
pub type PNDIS_SWITCH_PROPERTY_ENUM_INFO = *mut NDIS_SWITCH_PROPERTY_ENUM_INFO;
pub const NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PropertyType: NDIS_SWITCH_PROPERTY_TYPE,
    PropertyId: NDIS_SWITCH_OBJECT_ID,
    SerializationVersion: NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION,
    FirstPropertyOffset: ULONG,
    NumProperties: ULONG,
}}
pub type PNDIS_SWITCH_PROPERTY_ENUM_PARAMETERS = *mut NDIS_SWITCH_PROPERTY_ENUM_PARAMETERS;
pub const NDIS_SWITCH_FEATURE_STATUS_PARAMETERS_REVISION_1: UCHAR = 1;
ENUM!{enum NDIS_SWITCH_FEATURE_STATUS_TYPE {
    NdisSwitchFeatureStatusTypeUndefined,
    NdisSwitchFeatureStatusTypeCustom,
    NdisSwitchFeatureStatusTypeMaximum,
}}
pub type PNDIS_SWITCH_FEATURE_STATUS_TYPE = *mut NDIS_SWITCH_FEATURE_STATUS_TYPE;
STRUCT!{struct NDIS_SWITCH_FEATURE_STATUS_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    FeatureStatusType: NDIS_SWITCH_FEATURE_STATUS_TYPE,
    FeatureStatusId: NDIS_SWITCH_OBJECT_ID,
    FeatureStatusInstanceId: NDIS_SWITCH_OBJECT_INSTANCE_ID,
    FeatureStatusVersion: NDIS_SWITCH_OBJECT_VERSION,
    SerializationVersion: NDIS_SWITCH_OBJECT_SERIALIZATION_VERSION,
    FeatureStatusBufferOffset: ULONG,
    FeatureStatusBufferLength: ULONG,
}}
pub type PNDIS_SWITCH_FEATURE_STATUS_PARAMETERS = *mut NDIS_SWITCH_FEATURE_STATUS_PARAMETERS;
pub const NDIS_SWITCH_FEATURE_STATUS_CUSTOM_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_FEATURE_STATUS_CUSTOM {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    FeatureStatusCustomBufferLength: ULONG,
    FeatureStatusCustomBufferOffset: ULONG,
}}
pub type PNDIS_SWITCH_FEATURE_STATUS_CUSTOM = *mut NDIS_SWITCH_FEATURE_STATUS_CUSTOM;
pub const NDIS_SWITCH_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SwitchName: NDIS_SWITCH_NAME,
    SwitchFriendlyName: NDIS_SWITCH_FRIENDLYNAME,
    NumSwitchPorts: UINT32,
    IsActive: BOOLEAN,
}}
pub type PNDIS_SWITCH_PARAMETERS = *mut NDIS_SWITCH_PARAMETERS;
ENUM!{enum NDIS_SWITCH_PORT_TYPE {
    NdisSwitchPortTypeGeneric = 0,
    NdisSwitchPortTypeExternal = 1,
    NdisSwitchPortTypeSynthetic = 2,
    NdisSwitchPortTypeEmulated = 3,
    NdisSwitchPortTypeInternal = 4,
}}
ENUM!{enum NDIS_SWITCH_PORT_STATE {
    NdisSwitchPortStateUnknown = 0,
    NdisSwitchPortStateCreated = 1,
    NdisSwitchPortStateTeardown = 2,
    NdisSwitchPortStateDeleted = 3,
}}
pub const NDIS_SWITCH_PORT_PARAMETERS_FLAG_UNTRUSTED_INTERNAL_PORT: ULONG = 0x1;
pub const NDIS_SWITCH_PORT_PARAMETERS_FLAG_RESTORING_PORT: ULONG = 0x2;
STRUCT!{struct NDIS_SWITCH_PORT_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PortId: NDIS_SWITCH_PORT_ID,
    PortName: NDIS_SWITCH_PORT_NAME,
    PortFriendlyName: NDIS_SWITCH_PORT_FRIENDLYNAME,
    PortType: NDIS_SWITCH_PORT_TYPE,
    IsValidationPort: BOOLEAN,
    PortState: NDIS_SWITCH_PORT_STATE,
}}
pub type PNDIS_SWITCH_PORT_PARAMETERS = *mut NDIS_SWITCH_PORT_PARAMETERS;
pub const NDIS_SWITCH_PORT_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_PORT_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    FirstElementOffset: USHORT,
    NumElements: ULONG,
    ElementSize: ULONG,
}}
pub type PNDIS_SWITCH_PORT_ARRAY = *mut NDIS_SWITCH_PORT_ARRAY;
pub const NDIS_SWITCH_PORT_ARRAY_REVISION_1: UCHAR = 1;
pub const NDIS_SWITCH_NIC_FLAGS_NIC_INITIALIZING: ULONG = 0x00000001;
pub const NDIS_SWITCH_NIC_FLAGS_NIC_SUSPENDED: ULONG = 0x00000002;
pub const NDIS_SWITCH_NIC_FLAGS_MAPPED_NIC_UPDATED: ULONG = 0x00000004;
ENUM!{enum NDIS_SWITCH_NIC_TYPE {
    NdisSwitchNicTypeExternal = 0,
    NdisSwitchNicTypeSynthetic = 1,
    NdisSwitchNicTypeEmulated = 2,
    NdisSwitchNicTypeInternal = 3,
}}
ENUM!{enum NDIS_SWITCH_NIC_STATE {
    NdisSwitchNicStateUnknown = 0,
    NdisSwitchNicStateCreated = 1,
    NdisSwitchNicStateConnected = 2,
    NdisSwitchNicStateDisconnected = 3,
    NdisSwitchNicStateDeleted = 4,
}}
STRUCT!{struct NDIS_SWITCH_NIC_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    NicName: NDIS_SWITCH_NIC_NAME,
    NicFriendlyName: NDIS_SWITCH_NIC_FRIENDLYNAME,
    PortId: NDIS_SWITCH_PORT_ID,
    NicIndex: NDIS_SWITCH_NIC_INDEX,
    NicType: NDIS_SWITCH_NIC_TYPE,
    NicState: NDIS_SWITCH_NIC_STATE,
    VmName: NDIS_VM_NAME,
    VmFriendlyName: NDIS_VM_FRIENDLYNAME,
    NetCfgInstanceId: GUID,
    MTU: ULONG,
    NumaNodeId: USHORT,
    PermanentMacAddress: [UCHAR; NDIS_MAX_PHYS_ADDRESS_LENGTH],
    VMMacAddress: [UCHAR; NDIS_MAX_PHYS_ADDRESS_LENGTH],
    CurrentMacAddress: [UCHAR; NDIS_MAX_PHYS_ADDRESS_LENGTH],
    VFAssigned: BOOLEAN,
    NdisReserved: [ULONG64; 2],
}}
pub type PNDIS_SWITCH_NIC_PARAMETERS = *mut NDIS_SWITCH_NIC_PARAMETERS;
pub const NDIS_SWITCH_NIC_PARAMETERS_REVISION_1: UCHAR = 1;
pub const NDIS_SWITCH_NIC_PARAMETERS_REVISION_2: UCHAR = 2;
STRUCT!{struct NDIS_SWITCH_NIC_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    FirstElementOffset: USHORT,
    NumElements: ULONG,
    ElementSize: ULONG,
}}
pub type PNDIS_SWITCH_NIC_ARRAY = *mut NDIS_SWITCH_NIC_ARRAY;
pub const NDIS_SWITCH_NIC_ARRAY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_OID_REQUEST {
    dummy: usize,
}}
pub type PNDIS_OID_REQUEST = *mut NDIS_OID_REQUEST;
STRUCT!{struct NDIS_SWITCH_NIC_OID_REQUEST {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SourcePortId: NDIS_SWITCH_PORT_ID,
    SourceNicIndex: NDIS_SWITCH_NIC_INDEX,
    DestinationPortId: NDIS_SWITCH_PORT_ID,
    DestinationNicIndex: NDIS_SWITCH_NIC_INDEX,
    OidRequest: PNDIS_OID_REQUEST,
}}
pub type PNDIS_SWITCH_NIC_OID_REQUEST = *mut NDIS_SWITCH_NIC_OID_REQUEST;
pub const NDIS_SWITCH_NIC_OID_REQUEST_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_SWITCH_NIC_SAVE_STATE {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    PortId: NDIS_SWITCH_PORT_ID,
    NicIndex: NDIS_SWITCH_NIC_INDEX,
    ExtensionId: GUID,
    ExtensionFriendlyName: NDIS_SWITCH_EXTENSION_FRIENDLYNAME,
    FeatureClassId: GUID,
    SaveDataSize: USHORT,
    SaveDataOffset: USHORT,
    SaveDataSizeOverflow: ULONG,
}}
pub type PNDIS_SWITCH_NIC_SAVE_STATE = *mut NDIS_SWITCH_NIC_SAVE_STATE;
pub const NDIS_SWITCH_NIC_SAVE_STATE_REVISION_1: UCHAR = 1;
pub const NDIS_SWITCH_NIC_SAVE_STATE_REVISION_2: UCHAR = 2;
pub const NDIS_PORT_STATE_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_PORT_STATE {
    Header: NDIS_OBJECT_HEADER,
    MediaConnectState: NDIS_MEDIA_CONNECT_STATE,
    XmitLinkSpeed: ULONG64,
    RcvLinkSpeed: ULONG64,
    Direction: NET_IF_DIRECTION_TYPE,
    SendControlState: NDIS_PORT_CONTROL_STATE,
    RcvControlState: NDIS_PORT_CONTROL_STATE,
    SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    Flags: ULONG,
}}
pub type PNDIS_PORT_STATE = *mut NDIS_PORT_STATE;
pub const NDIS_PORT_CHAR_USE_DEFAULT_AUTH_SETTINGS: ULONG = 0x00000001;
pub const NDIS_PORT_CHARACTERISTICS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_PORT_CHARACTERISTICS {
    Header: NDIS_OBJECT_HEADER,
    PortNumber: NDIS_PORT_NUMBER,
    Flags: ULONG,
    Type: NDIS_PORT_TYPE,
    MediaConnectState: NDIS_MEDIA_CONNECT_STATE,
    XmitLinkSpeed: ULONG64,
    RcvLinkSpeed: ULONG64,
    Direction: NET_IF_DIRECTION_TYPE,
    SendControlState: NDIS_PORT_CONTROL_STATE,
    RcvControlState: NDIS_PORT_CONTROL_STATE,
    SendAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
    RcvAuthorizationState: NDIS_PORT_AUTHORIZATION_STATE,
}}
pub type PNDIS_PORT_CHARACTERISTICS = *mut NDIS_PORT_CHARACTERISTICS;
STRUCT!{struct NDIS_PORT {
    Next: PNDIS_PORT,
    NdisReserved: PVOID,
    MiniportReserved: PVOID,
    ProtocolReserved: PVOID,
    PortCharacteristics: NDIS_PORT_CHARACTERISTICS,
}}
pub type PNDIS_PORT = *mut NDIS_PORT;
pub const NDIS_PORT_ARRAY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_PORT_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    NumberOfPorts: ULONG,
    OffsetFirstPort: ULONG,
    ElementSize: ULONG,
    Ports: [NDIS_PORT_CHARACTERISTICS; 1],
}}
pub type PNDIS_PORT_ARRAY = *mut NDIS_PORT_ARRAY;
pub const ETHERNET_LENGTH_OF_ADDRESS: usize = 6;
ENUM!{enum NDIS_GFP_TABLE_TYPE {
    NdisGfpTableTypeUndefined,
    NdisGfpTableTypeWildcardIngress,
    NdisGfpTableTypeWildcardEgress,
    NdisGfpTableTypeExactMatchIngress,
    NdisGfpTableTypeExactMatchEgress,
    NdisGfpTableTypePacketDirect,
    NdisGfpTableTypeMax,
}}
pub type PNDIS_GFP_TABLE_TYPE = *mut NDIS_GFP_TABLE_TYPE;
pub const NDIS_GFP_HEADER_PRESENT_ETHERNET: ULONG = 0x00000001;
pub const NDIS_GFP_HEADER_PRESENT_IPV4: ULONG = 0x00000002;
pub const NDIS_GFP_HEADER_PRESENT_IPV6: ULONG = 0x00000004;
pub const NDIS_GFP_HEADER_PRESENT_TCP: ULONG = 0x00000008;
pub const NDIS_GFP_HEADER_PRESENT_UDP: ULONG = 0x00000010;
pub const NDIS_GFP_HEADER_PRESENT_ICMP: ULONG = 0x00000020;
pub const NDIS_GFP_HEADER_PRESENT_NO_ENCAP: ULONG = 0x00000040;
pub const NDIS_GFP_HEADER_PRESENT_IP_IN_IP_ENCAP: ULONG = 0x00000080;
pub const NDIS_GFP_HEADER_PRESENT_IP_IN_GRE_ENCAP: ULONG = 0x00000100;
pub const NDIS_GFP_HEADER_PRESENT_NVGRE_ENCAP: ULONG = 0x00000200;
pub const NDIS_GFP_HEADER_PRESENT_VXLAN_ENCAP: ULONG = 0x00000400;
pub const NDIS_GFP_HEADER_FIELD_DEST_MAC_ADDR: ULONG64 = 0x00000001;
pub const NDIS_GFP_HEADER_FIELD_SRC_MAC_ADDR: ULONG64 = 0x00000002;
pub const NDIS_GFP_HEADER_FIELD_ETH_TYPE: ULONG64 = 0x00000004;
pub const NDIS_GFP_HEADER_FIELD_CUSTOMER_VLAN_ID: ULONG64 = 0x00000008;
pub const NDIS_GFP_HEADER_FIELD_PROVIDER_VLAN_ID: ULONG64 = 0x00000010;
pub const NDIS_GFP_HEADER_FIELD_8021P_PRIORITY: ULONG64 = 0x00000020;
pub const NDIS_GFP_HEADER_FIELD_SRC_IP_ADDR: ULONG64 = 0x00000040;
pub const NDIS_GFP_HEADER_FIELD_DEST_IP_ADDR: ULONG64 = 0x00000080;
pub const NDIS_GFP_HEADER_FIELD_TTL: ULONG64 = 0x00000100;
pub const NDIS_GFP_HEADER_FIELD_IP_PROTOCOL: ULONG64 = 0x00000200;
pub const NDIS_GFP_HEADER_FIELD_IP_DSCP: ULONG64 = 0x00000400;
pub const NDIS_GFP_HEADER_FIELD_TRANSPORT_SRC_PORT: ULONG64 = 0x00000800;
pub const NDIS_GFP_HEADER_FIELD_TRANSPORT_DEST_PORT: ULONG64 = 0x00001000;
pub const NDIS_GFP_HEADER_FIELD_TCP_FLAGS: ULONG64 = 0x00002000;
pub const NDIS_GFP_HEADER_FIELD_TENANT_ID: ULONG64 = 0x00004000;
pub const NDIS_GFP_HEADER_FIELD_ENTROPY: ULONG64 = 0x00008000;
pub const NDIS_GFP_HEADER_FIELD_ICMP_TYPE: ULONG64 = 0x00010000;
pub const NDIS_GFP_HEADER_FIELD_ICMP_CODE: ULONG64 = 0x00020000;
pub const NDIS_GFP_HEADER_FIELD_OOB_VLAN: ULONG64 = 0x00040000;
pub const NDIS_GFP_HEADER_FIELD_OOB_TENANT_ID: ULONG64 = 0x00080000;
pub const NDIS_GFP_HEADER_FIELD_GRE_PROTOCOL: ULONG64 = 0x00100000;
pub const NDIS_GFP_ENCAPSULATION_TYPE_NOT_ENCAPSULATED: ULONG = 0x00000001;
pub const NDIS_GFP_ENCAPSULATION_TYPE_IP_IN_IP: ULONG = 0x00000002;
pub const NDIS_GFP_ENCAPSULATION_TYPE_IP_IN_GRE: ULONG = 0x00000004;
pub const NDIS_GFP_ENCAPSULATION_TYPE_NVGRE: ULONG = 0x00000008;
pub const NDIS_GFP_ENCAPSULATION_TYPE_VXLAN: ULONG = 0x00000010;
pub type NDIS_GFP_PROFILE_ID = ULONG;
pub type PNDIS_GFP_PROFILE_ID = *mut ULONG;
pub const NDIS_GFP_UNDEFINED_PROFILE_ID: ULONG = 0;
pub const NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE_IS_TTL_ONE: ULONG = 0x00000001;
pub const NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    HeadersPresent: ULONG,
    MatchFields: ULONG64,
}}
pub type PNDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE =
    *mut NDIS_GFP_HEADER_GROUP_EXACT_MATCH_PROFILE;
pub const NDIS_GFP_EXACT_MATCH_PROFILE_RDMA_FLOW: ULONG = 0x00000001;
pub const NDIS_GFP_EXACT_MATCH_PROFILE_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFP_EXACT_MATCH_PROFILE {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableType: NDIS_GFP_TABLE_TYPE,
    ProfileId: NDIS_GFP_PROFILE_ID,
    NumSupportedEntries: ULONG,
    HeaderGroupExactMatchProfileArrayOffset: ULONG,
    HeaderGroupExactMatchProfileArrayNumElements: ULONG,
    HeaderGroupExactMatchProfileArrayElementSize: ULONG,
}}
pub type PNDIS_GFP_EXACT_MATCH_PROFILE = *mut NDIS_GFP_EXACT_MATCH_PROFILE;
STRUCT!{struct NDIS_GFP_ETHERNET_HEADER_FIELDS {
    DestinationMacAddress: [UINT8; ETHERNET_LENGTH_OF_ADDRESS],
    SourceMacAddress: [UINT8; ETHERNET_LENGTH_OF_ADDRESS],
    EthType: UINT16,
    CustomerVlanId: UINT16,
    ProviderVlanId: UINT16,
    Priority: UINT8,
}}
pub type PNDIS_GFP_ETHERNET_HEADER_FIELDS = *mut NDIS_GFP_ETHERNET_HEADER_FIELDS;
pub const NDIS_GFP_HEADER_GROUP_EXACT_MATCH_IS_TTL_ONE: ULONG = 0x00000001;
pub const NDIS_GFP_HEADER_GROUP_EXACT_MATCH_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFP_HEADER_GROUP_EXACT_MATCH_IPAddress_IPv4Address {
    SourceIPAddress: IN_ADDR,
    DestinationIPAddress: IN_ADDR,
}}
STRUCT!{struct NDIS_GFP_HEADER_GROUP_EXACT_MATCH_IPAddress_IPv6Address {
    SourceIPAddress: IN6_ADDR,
    DestinationIPAddress: IN6_ADDR,
}}
UNION!{union NDIS_GFP_HEADER_GROUP_EXACT_MATCH_IPAddress {
    [u32; 8],
    IPv4Address IPv4Address_mut: NDIS_GFP_HEADER_GROUP_EXACT_MATCH_IPAddress_IPv4Address,
    IPv6Address IPv6Address_mut: NDIS_GFP_HEADER_GROUP_EXACT_MATCH_IPAddress_IPv6Address,
}}
STRUCT!{struct NDIS_GFP_HEADER_GROUP_EXACT_MATCH_TransportOrEncapsulation_Udp {
    SourcePort: USHORT,
    DestinationPort: USHORT,
}}
STRUCT!{struct NDIS_GFP_HEADER_GROUP_EXACT_MATCH_TransportOrEncapsulation_Tcp {
    SourcePort: USHORT,
    DestinationPort: USHORT,
    TcpFlags: UINT8,
}}
STRUCT!{struct NDIS_GFP_HEADER_GROUP_EXACT_MATCH_TransportOrEncapsulation_Icmp {
    Type: UINT8,
    Code: UINT8,
}}
STRUCT!{struct NDIS_GFP_HEADER_GROUP_EXACT_MATCH_TransportOrEncapsulation_Encapsulation {
    TenantId: ULONG,
    GreProtocol: USHORT,
}}
UNION!{union NDIS_GFP_HEADER_GROUP_EXACT_MATCH_TransportOrEncapsulation {
    [u32; 2],
    Udp Udp_mut: NDIS_GFP_HEADER_GROUP_EXACT_MATCH_TransportOrEncapsulation_Udp,
    Tcp Tcp_mut: NDIS_GFP_HEADER_GROUP_EXACT_MATCH_TransportOrEncapsulation_Tcp,
    Icmp Icmp_mut: NDIS_GFP_HEADER_GROUP_EXACT_MATCH_TransportOrEncapsulation_Icmp,
    Encapsulation Encapsulation_mut:
        NDIS_GFP_HEADER_GROUP_EXACT_MATCH_TransportOrEncapsulation_Encapsulation,
}}
STRUCT!{struct NDIS_GFP_HEADER_GROUP_EXACT_MATCH {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    HeadersPresent: ULONG,
    MatchFields: ULONG64,
    EthernetFields: NDIS_GFP_ETHERNET_HEADER_FIELDS,
    IPAddress: NDIS_GFP_HEADER_GROUP_EXACT_MATCH_IPAddress,
    Dscp: UINT8,
    IPProtocol: UINT8,
    TransportOrEncapsulation: NDIS_GFP_HEADER_GROUP_EXACT_MATCH_TransportOrEncapsulation,
}}
pub type PNDIS_GFP_HEADER_GROUP_EXACT_MATCH = *mut NDIS_GFP_HEADER_GROUP_EXACT_MATCH;
ENUM!{enum NDIS_GFP_WILDCARD_MATCH_TYPE {
    NdisGfpWildcardMatchTypeUndefined,
    NdisGfpWildcardMatchTypeEqual,
    NdisGfpWildcardMatchTypeMaskEqual,
    NdisGfpWildcardMatchTypeInRange,
    NdisGfpWildcardMatchTypeMax,
}}
pub type PNDIS_GFP_WILDCARD_MATCH_TYPE = *mut NDIS_GFP_WILDCARD_MATCH_TYPE;
pub const NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE_IS_TTL_ONE: ULONG = 0x00000001;
pub const NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    HeadersPresent: ULONG,
    MatchFields: ULONG64,
    SourceIPv4AddressMatchType: NDIS_GFP_WILDCARD_MATCH_TYPE,
    DestinationIPv4AddressMatchType: NDIS_GFP_WILDCARD_MATCH_TYPE,
    SourceIPv6AddressMatchType: NDIS_GFP_WILDCARD_MATCH_TYPE,
    DestinationIPv6AddressMatchType: NDIS_GFP_WILDCARD_MATCH_TYPE,
    SourcePortMatchType: NDIS_GFP_WILDCARD_MATCH_TYPE,
    DestinationPortMatchType: NDIS_GFP_WILDCARD_MATCH_TYPE,
    TcpFlags: UINT8,
}}
pub type PNDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE =
    *mut NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_PROFILE;
pub const NDIS_GFP_WILDCARD_MATCH_PROFILE_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFP_WILDCARD_MATCH_PROFILE {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableType: NDIS_GFP_TABLE_TYPE,
    ProfileId: NDIS_GFP_PROFILE_ID,
    NumSupportedEntries: ULONG,
    HeaderGroupWildcardMatchProfileArrayOffset: ULONG,
    HeaderGroupWildcardMatchProfileArrayNumElements: ULONG,
    HeaderGroupWildcardMatchProfileArrayElementSize: ULONG,
}}
pub type PNDIS_GFP_WILDCARD_MATCH_PROFILE = *mut NDIS_GFP_WILDCARD_MATCH_PROFILE;
UNION!{union NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH_MatchValue {
    [u32; 1],
    PrefixLength PrefixLength_mut: ULONG,
    RangeSize RangeSize_mut: ULONG,
}}
STRUCT!{struct NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH {
    MatchType: NDIS_GFP_WILDCARD_MATCH_TYPE,
    IPAddress: IN_ADDR,
    MatchValue: NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH_MatchValue,
}}
pub type PNDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH = *mut NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH;
STRUCT!{struct NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH {
    SourceIPv4Address: NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH,
    DestinationIPv4Address: NDIS_GFP_IPV4_ADDRESS_WILDCARD_MATCH,
}}
pub type PNDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH =
    *mut NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH;
UNION!{union NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH_MatchValue {
    [u32; 1],
    PrefixLength PrefixLength_mut: ULONG,
    RangeSize RangeSize_mut: ULONG,
}}
STRUCT!{struct NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH {
    MatchType: NDIS_GFP_WILDCARD_MATCH_TYPE,
    IPAddress: IN6_ADDR,
    MatchValue: NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH_MatchValue,
}}
pub type PNDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH = *mut NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH;
STRUCT!{struct NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH {
    SourceIPv6Address: NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH,
    DestinationIPv6Address: NDIS_GFP_IPV6_ADDRESS_WILDCARD_MATCH,
}}
pub type PNDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH =
    *mut NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH;
UNION!{union NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH {
    [u32; 12],
    IPv4SrcAndDestAddress IPv4SrcAndDestAddress_mut:
        NDIS_GFP_IPV4_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH,
    IPv6SrcAndDestAddress IPv6SrcAndDestAddress_mut:
        NDIS_GFP_IPV6_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH,
}}
pub type PNDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH =
    *mut NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH;
STRUCT!{struct NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH {
    MatchType: NDIS_GFP_WILDCARD_MATCH_TYPE,
    Port: USHORT,
    Range: USHORT,
}}
pub type PNDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH = *mut NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH;
STRUCT!{struct NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH {
    SourcePort: NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH,
    DestinationPort: NDIS_GFP_TRANSPORT_PORT_WILDCARD_MATCH,
}}
pub type PNDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH =
    *mut NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH;
pub const NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_IS_TTL_ONE: ULONG = 0x00000001;
pub const NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_TransportOrEncapsulation_UdpHeader {
    UdpSrcAndDestPort: NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH,
}}
STRUCT!{struct NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_TransportOrEncapsulation_TcpHeader {
    TcpSrcAndDestPort: NDIS_GFP_TRANSPORT_SRC_AND_DEST_PORT_WILDCARD_MATCH,
}}
STRUCT!{struct NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_TransportOrEncapsulation_IcmpHeader {
    Type: UINT8,
    Code: UINT8,
}}
STRUCT!{struct NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_TransportOrEncapsulation_Encapsulation {
    TenantId: ULONG,
    GreProtocol: USHORT,
}}
UNION!{union NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_TransportOrEncapsulation {
    [u32; 5],
    UdpHeader UdpHeader_mut:
        NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_TransportOrEncapsulation_UdpHeader,
    TcpHeader TcpHeader_mut:
        NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_TransportOrEncapsulation_TcpHeader,
    IcmpHeader IcmpHeader_mut:
        NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_TransportOrEncapsulation_IcmpHeader,
    Encapsulation Encapsulation_mut:
        NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_TransportOrEncapsulation_Encapsulation,
}}
STRUCT!{struct NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    ProfileId: NDIS_GFP_PROFILE_ID,
    HeadersPresent: ULONG,
    MatchFields: ULONG64,
    EthernetFields: NDIS_GFP_ETHERNET_HEADER_FIELDS,
    IPSrcAndDestAddress: NDIS_GFP_IP_SRC_AND_DEST_ADDRESS_WILDCARD_MATCH,
    Dscp: UINT8,
    IPProtocol: UINT8,
    TransportOrEncapsulation: NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH_TransportOrEncapsulation,
}}
pub type PNDIS_GFP_HEADER_GROUP_WILDCARD_MATCH = *mut NDIS_GFP_HEADER_GROUP_WILDCARD_MATCH;
pub const NDIS_PD_QUEUE_COUNT_DYNAMIC: ULONG = -1i32 as u32;
pub const NDIS_PD_CAPS_RECEIVE_FILTER_COUNTERS_SUPPORTED: ULONG = 0x00000001;
pub const NDIS_PD_CAPS_DRAIN_NOTIFICATIONS_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_PD_CAPS_NOTIFICATION_MODERATION_INTERVAL_SUPPORTED: ULONG = 0x00000004;
pub const NDIS_PD_CAPS_NOTIFICATION_MODERATION_COUNT_SUPPORTED: ULONG = 0x00000008;
STRUCT!{struct NDIS_PD_CAPABILITIES {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    MaximumTxPartialBufferCount: ULONG,
    MaximumRxPartialBufferCount: ULONG,
    RxFilterContextWidth: UCHAR,
    CapabilityFlags: ULONG,
    MaxNumberOfRxQueues: ULONG,
    MaxNumberOfTxQueues: ULONG,
    MaxNumberOfRxQueuesForDefaultVport: ULONG,
    MaxNumberOfTxQueuesForDefaultVport: ULONG,
    MaxNumberOfRxQueuesPerNonDefaultVport: ULONG,
    MaxNumberOfTxQueuesPerNonDefaultVport: ULONG,
    ExactMatchProfileArrayOffset: ULONG,
    ExactMatchProfileArrayNumElements: ULONG,
    ExactMatchProfileArrayElementSize: ULONG,
    WildcardMatchProfileArrayOffset: ULONG,
    WildcardMatchProfileArrayNumElements: ULONG,
    WildcardMatchProfileArrayElementSize: ULONG,
    MinimumModerationInterval: ULONG,
    MaximumModerationInterval: ULONG,
    ModerationIntervalGranularity: ULONG,
    MaxRxQueueSize: ULONG,
    MaxTxQueueSize: ULONG,
}}
STRUCT!{struct NDIS_PD_CONFIG {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    Enabled: BOOLEAN,
    CapabilitiesOffset: ULONG,
    CapabilitiesSize: ULONG,
}}
pub const NDIS_PD_CONFIG_REVISION_1: UCHAR = 1;
pub const PACKET_DIRECT_KEYWORD: &'static str = "*PacketDirect";
pub type NDIS_GFT_FLOW_ENTRY_ID = ULONG_PTR;
pub type PNDIS_GFT_FLOW_ENTRY_ID = *mut ULONG_PTR;
pub const NDIS_GFT_UNDEFINED_FLOW_ENTRY_ID: NDIS_GFT_FLOW_ENTRY_ID = 0;
pub type NDIS_GFT_TABLE_ID = ULONG;
pub type PNDIS_GFT_TABLE_ID = *mut ULONG;
pub const NDIS_GFT_UNDEFINED_TABLE_ID: NDIS_GFT_TABLE_ID = 0;
pub const NDIS_GFT_TABLE_INCLUDE_EXTERNAL_VPPORT: ULONG = 0x00000001;
pub const NDIS_GFT_TABLE_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_TABLE_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableId: NDIS_GFT_TABLE_ID,
    TableType: NDIS_GFP_TABLE_TYPE,
    NextTableId: NDIS_GFT_TABLE_ID,
}}
pub type PNDIS_GFT_TABLE_PARAMETERS = *mut NDIS_GFT_TABLE_PARAMETERS;
pub const NDIS_GFT_TABLE_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_TABLE_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableId: NDIS_GFT_TABLE_ID,
    TableType: NDIS_GFP_TABLE_TYPE,
    NextTableId: NDIS_GFT_TABLE_ID,
    NumFlowEntries: ULONG,
}}
pub type PNDIS_GFT_TABLE_INFO = *mut NDIS_GFT_TABLE_INFO;
pub const NDIS_GFT_TABLE_INFO_ARRAY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_TABLE_INFO_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableArrayOffset: ULONG,
    TableArrayNumElements: ULONG,
    TableArrayElementSize: ULONG,
}}
pub type PNDIS_GFT_TABLE_INFO_ARRAY = *mut NDIS_GFT_TABLE_INFO_ARRAY;
pub const NDIS_GFT_DELETE_TABLE_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_DELETE_TABLE_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableId: NDIS_GFT_TABLE_ID,
}}
pub type PNDIS_GFT_DELETE_TABLE_PARAMETERS = *mut NDIS_GFT_DELETE_TABLE_PARAMETERS;
pub type NDIS_GFT_COUNTER_ID = ULONG;
pub type PNDIS_GFT_COUNTER_ID = *mut ULONG;
pub const NDIS_GFT_UNDEFINED_COUNTER_ID: NDIS_GFT_COUNTER_ID = 0;
pub const NDIS_GFT_MAX_COUNTER_OBJECTS_PER_FLOW_ENTRY: usize = 8;
ENUM!{enum NDIS_GFT_COUNTER_UPDATE_FREQUENCY {
    NdisGftCounterUpdateFrequencyUndefined,
    NdisGftCounterUpdateFrequencyOnQuery,
    NdisGftCounterUpdateFrequencyPerUpdatePeriod,
    NdisGftCounterUpdateFrequencyPerPacket,
    NdisGftCounterUpdateFrequencyMax,
}}
pub type PNDIS_GFT_COUNTER_UPDATE_FREQUENCY = *mut NDIS_GFT_COUNTER_UPDATE_FREQUENCY;
ENUM!{enum NDIS_GFT_COUNTER_TYPE {
    NdisGftCounterTypeUndefined,
    NdisGftCounterTypePacketCounter,
    NdisGftCounterTypeByteCounter,
    NdisGftCounterTypePacketAndByteCounter,
    NdisGftCounterTypeMax,
}}
pub type PNDIS_GFT_COUNTER_TYPE = *mut NDIS_GFT_COUNTER_TYPE;
STRUCT!{struct NDIS_GFT_PACKET_COUNTER_VALUE {
    Packets: ULONG64,
    LastUpdate: LARGE_INTEGER,
}}
pub type PNDIS_GFT_PACKET_COUNTER_VALUE = *mut NDIS_GFT_PACKET_COUNTER_VALUE;
STRUCT!{struct NDIS_GFT_BYTE_COUNTER_VALUE {
    Bytes: ULONG64,
    LastUpdate: LARGE_INTEGER,
}}
pub type PNDIS_GFT_BYTE_COUNTER_VALUE = *mut NDIS_GFT_BYTE_COUNTER_VALUE;
STRUCT!{struct NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE {
    Packets: ULONG64,
    Bytes: ULONG64,
    LastUpdate: LARGE_INTEGER,
}}
pub type PNDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE = *mut NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE;
pub const NDIS_GFT_COUNTER_PARAMETERS_CLIENT_SPECIFIED_ADDRESS: ULONG = 0x00000001;
pub const NDIS_GFT_COUNTER_PARAMETERS_REVISION_1: UCHAR = 1;
UNION!{union NDIS_GFT_COUNTER_PARAMETERS_CounterValuesBufferStart {
    [usize; 1],
    PacketCounters PacketCounters_mut: PNDIS_GFT_PACKET_COUNTER_VALUE,
    ByteCounters ByteCounters_mut: PNDIS_GFT_BYTE_COUNTER_VALUE,
    PacketAndByteCounters PacketAndByteCounters_mut: PNDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE,
}}
STRUCT!{struct NDIS_GFT_COUNTER_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableId: NDIS_GFT_TABLE_ID,
    CounterUpdateFrequency: NDIS_GFT_COUNTER_UPDATE_FREQUENCY,
    CounterType: NDIS_GFT_COUNTER_TYPE,
    CounterIdStart: NDIS_GFT_COUNTER_ID,
    NumCounters: ULONG,
    UpdatePeriod: ULONG,
    CounterValuesBufferStart: NDIS_GFT_COUNTER_PARAMETERS_CounterValuesBufferStart,
}}
pub type PNDIS_GFT_COUNTER_PARAMETERS = *mut NDIS_GFT_COUNTER_PARAMETERS;
pub const NDIS_GFT_FREE_COUNTER_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_FREE_COUNTER_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableId: NDIS_GFT_TABLE_ID,
    CounterIdStart: NDIS_GFT_COUNTER_ID,
    NumCounters: ULONG,
    LastCounterValueArrayOffset: ULONG,
    LastCounterValueArrayNumElements: ULONG,
    LastCounterValueArrayElementSize: ULONG,
}}
pub type PNDIS_GFT_FREE_COUNTER_PARAMETERS = *mut NDIS_GFT_FREE_COUNTER_PARAMETERS;
pub const NDIS_GFT_COUNTER_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_COUNTER_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    CounterIdStart: NDIS_GFT_COUNTER_ID,
    NumCounters: ULONG,
    CounterUpdateFrequency: NDIS_GFT_COUNTER_UPDATE_FREQUENCY,
    CounterType: NDIS_GFT_COUNTER_TYPE,
    UpdatePeriod: ULONG,
}}
pub type PNDIS_GFT_COUNTER_INFO = *mut NDIS_GFT_COUNTER_INFO;
pub const NDIS_GFT_COUNTER_INFO_ARRAY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_COUNTER_INFO_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableId: NDIS_GFT_TABLE_ID,
    CounterInfoArrayOffset: ULONG,
    CounterInfoArrayNumElements: ULONG,
    CounterInfoArrayElementSize: ULONG,
}}
pub type PNDIS_GFT_COUNTER_INFO_ARRAY = *mut NDIS_GFT_COUNTER_INFO_ARRAY;
UNION!{union NDIS_GFT_COUNTER_VALUE_CounterValue {
    [u64; 3],
    Packets Packets_mut: NDIS_GFT_PACKET_COUNTER_VALUE,
    Bytes Bytes_mut: NDIS_GFT_BYTE_COUNTER_VALUE,
    PacketsAndBytes PacketsAndBytes_mut: NDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE,
}}
STRUCT!{struct NDIS_GFT_COUNTER_VALUE {
    CounterType: NDIS_GFT_COUNTER_TYPE,
    CounterValue: NDIS_GFT_COUNTER_VALUE_CounterValue,
}}
pub type PNDIS_GFT_COUNTER_VALUE = *mut NDIS_GFT_COUNTER_VALUE;
pub const NDIS_GFT_COUNTER_VALUE_ARRAY_UPDATE_MEMORY_MAPPED_COUNTERS: ULONG = 0x00000001;
pub const NDIS_GFT_COUNTER_VALUE_ARRAY_GET_VALUES: ULONG = 0x00000002;
ENUM!{enum NDIS_GFT_COUNTER_VALUE_QUERY_METHOD {
    NdisGftQueryValueQueryMethodUndefined,
    NdisGftQueryValueQueryMethodUsingCounterIds,
    NdisGftQueryValueQueryMethodUsingFlowEntryIds,
    NdisGftQueryValueQueryMethodVPortFlowEntries,
    NdisGftQueryValueQueryMethodAllFlowEntries,
    NdisGftQueryValueQueryMethodMax,
}}
pub type PNDIS_GFT_COUNTER_VALUE_QUERY_METHOD = *mut NDIS_GFT_COUNTER_VALUE_QUERY_METHOD;
pub const NDIS_GFT_COUNTER_VALUE_ARRAY_REVISION_1: UCHAR = 1;
UNION!{union NDIS_GFT_COUNTER_VALUE_ARRAY_StartId {
    [usize; 1],
    FlowEntryId FlowEntryId_mut: NDIS_GFT_FLOW_ENTRY_ID,
    CounterId CounterId_mut: NDIS_GFT_COUNTER_ID,
}}
STRUCT!{struct NDIS_GFT_COUNTER_VALUE_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableId: NDIS_GFT_TABLE_ID,
    StartId: NDIS_GFT_COUNTER_VALUE_ARRAY_StartId,
    NumCounters: ULONG,
    CounterValueArrayOffset: ULONG,
    CounterValueArrayNumElements: ULONG,
    CounterValueArrayElementSize: ULONG,
}}
pub type PNDIS_GFT_COUNTER_VALUE_ARRAY = *mut NDIS_GFT_COUNTER_VALUE_ARRAY;
pub const NDIS_GFT_STATISTICS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_STATISTICS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableId: NDIS_GFT_TABLE_ID,
    VPortId: NDIS_NIC_SWITCH_VPORT_ID,
    ProviderFlowEntryId: NDIS_GFT_FLOW_ENTRY_ID,
    Packets: ULONG64,
    Bytes: ULONG64,
    L1CacheHits: ULONG64,
    L2CacheHits: ULONG64,
    L3CacheHits: ULONG64,
    L1CacheMisses: ULONG64,
    L2CacheMisses: ULONG64,
    L3CacheMisses: ULONG64,
}}
pub type PNDIS_GFT_STATISTICS = *mut NDIS_GFT_STATISTICS;
ENUM!{enum NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION {
    NdisGftHeaderGroupTranspositionActionUndefined,
    NdisGftHeaderGroupTranspositionActionModify,
    NdisGftHeaderGroupTranspositionActionIgnore,
    NdisGftHeaderGroupTranspositionActionPush,
    NdisGftHeaderGroupTranspositionActionPop,
    NdisGftHeaderGroupTranspositionActionMax,
}}
pub type PNDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION =
    *mut NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION;
pub const NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE_DECREMENT_TTL_IF_NOT_ONE: ULONG = 0x00000001;
pub const NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    Action: NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION,
    HeadersPresent: ULONG,
    HeaderFields: ULONG,
}}
pub type PNDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE =
    *mut NDIS_GFT_HEADER_GROUP_TRANSPOSITION_PROFILE;
pub type NDIS_GFT_CUSTOM_ACTION_TYPE = ULONG;
pub type PNDIS_GFT_CUSTOM_ACTION_TYPE = *mut ULONG;
pub const NDIS_GFT_UNDEFINED_CUSTOM_ACTION: NDIS_GFT_CUSTOM_ACTION_TYPE = 0;
pub const NDIS_GFT_RESERVED_CUSTOM_ACTIONS: NDIS_GFT_CUSTOM_ACTION_TYPE = 256;
pub const NDIS_GFT_CUSTOM_ACTION_PROFILE_REVISION_1: UCHAR = 1;
UNION!{union NDIS_GFT_CUSTOM_ACTION_PROFILE_u {
    [usize; 1],
    Alignment Alignment_mut: ULONG_PTR,
    ActionProfileData ActionProfileData_mut: [UCHAR; 1],
}}
STRUCT!{struct NDIS_GFT_CUSTOM_ACTION_PROFILE {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableType: NDIS_GFP_TABLE_TYPE,
    ProfileId: NDIS_GFP_PROFILE_ID,
    Type: NDIS_GFT_CUSTOM_ACTION_TYPE,
    Length: ULONG,
    u: NDIS_GFT_CUSTOM_ACTION_PROFILE_u,
}}
pub type PNDIS_GFT_CUSTOM_ACTION_PROFILE = *mut NDIS_GFT_CUSTOM_ACTION_PROFILE;
pub const NDIS_GFT_HTP_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT: ULONG = 0x00000001;
pub const NDIS_GFT_HTP_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT: ULONG = 0x00000002;
pub const NDIS_GFT_HTP_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE: ULONG = 0x00000004;
pub const NDIS_GFT_HTP_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE: ULONG = 0x00000008;
pub const NDIS_GFT_HTP_COPY_ALL_PACKETS: ULONG = 0x00000010;
pub const NDIS_GFT_HTP_COPY_FIRST_PACKET: ULONG = 0x00000020;
pub const NDIS_GFT_HTP_COPY_WHEN_TCP_FLAG_SET: ULONG = 0x00000040;
pub const NDIS_GFT_HTP_CUSTOM_ACTION_PRESENT: ULONG = 0x00000080;
pub const NDIS_GFT_HTP_META_ACTION_BEFORE_HEADER_TRANSPOSITION: ULONG = 0x00000100;
pub const NDIS_GFT_HEADER_TRANSPOSITION_PROFILE_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_HEADER_TRANSPOSITION_PROFILE {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableType: NDIS_GFP_TABLE_TYPE,
    ProfileId: NDIS_GFP_PROFILE_ID,
    HeaderGroupTranspositionProfileArrayOffset: ULONG,
    HeaderGroupTranspositionProfileArrayNumElements: ULONG,
    HeaderGroupTranspositionProfileArrayElementSize: ULONG,
    CustomActionProfileOffset: ULONG,
}}
pub type PNDIS_GFT_HEADER_TRANSPOSITION_PROFILE = *mut NDIS_GFT_HEADER_TRANSPOSITION_PROFILE;
pub const NDIS_GFT_HEADER_GROUP_TRANSPOSITION_DECREMENT_TTL_IF_NOT_ONE: ULONG = 0x00000001;
pub const NDIS_GFT_HEADER_GROUP_TRANSPOSITION_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_HEADER_GROUP_TRANSPOSITION_IPAddress_IPv4Address {
    SourceIPAddress: IN_ADDR,
    DestinationIPAddress: IN_ADDR,
}}
STRUCT!{struct NDIS_GFT_HEADER_GROUP_TRANSPOSITION_IPAddress_IPv6Address {
    SourceIPAddress: IN6_ADDR,
    DestinationIPAddress: IN6_ADDR,
}}
UNION!{union NDIS_GFT_HEADER_GROUP_TRANSPOSITION_IPAddress {
    [u32; 8],
    IPv4Address IPv4Address_mut: NDIS_GFT_HEADER_GROUP_TRANSPOSITION_IPAddress_IPv4Address,
    IPv6Address IPv6Address_mut: NDIS_GFT_HEADER_GROUP_TRANSPOSITION_IPAddress_IPv6Address,
}}
STRUCT!{struct NDIS_GFT_HEADER_GROUP_TRANSPOSITION_TransportOrEncapsulation_Udp {
    SourcePort: USHORT,
    DestinationPort: USHORT,
}}
STRUCT!{struct NDIS_GFT_HEADER_GROUP_TRANSPOSITION_TransportOrEncapsulation_Tcp {
    SourcePort: SHORT,
    DestinationPort: USHORT,
}}
STRUCT!{struct NDIS_GFT_HEADER_GROUP_TRANSPOSITION_TransportOrEncapsulation_Encapsulation {
    TenantId: ULONG,
    GreProtocol: USHORT,
    Entropy: USHORT,
}}
UNION!{union NDIS_GFT_HEADER_GROUP_TRANSPOSITION_TransportOrEncapsulation {
    [u32; 2],
    Udp Udp_mut: NDIS_GFT_HEADER_GROUP_TRANSPOSITION_TransportOrEncapsulation_Udp,
    Tcp Tcp_mut: NDIS_GFT_HEADER_GROUP_TRANSPOSITION_TransportOrEncapsulation_Tcp,
    Encapsulation Encapsulation_mut:
        NDIS_GFT_HEADER_GROUP_TRANSPOSITION_TransportOrEncapsulation_Encapsulation,
}}
STRUCT!{struct NDIS_GFT_HEADER_GROUP_TRANSPOSITION {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    Action: NDIS_GFT_HEADER_GROUP_TRANSPOSITION_ACTION,
    HeadersPresent: ULONG,
    HeaderFields: ULONG64,
    EthernetFields: NDIS_GFP_ETHERNET_HEADER_FIELDS,
    IPAddress: NDIS_GFT_HEADER_GROUP_TRANSPOSITION_IPAddress,
    Ttl: UINT8,
    Dscp: UINT8,
    IPProtocol: UINT8,
    TransportOrEncapsulation: NDIS_GFT_HEADER_GROUP_TRANSPOSITION_TransportOrEncapsulation,
}}
pub type PNDIS_GFT_HEADER_GROUP_TRANSPOSITION = *mut NDIS_GFT_HEADER_GROUP_TRANSPOSITION;
ENUM!{enum NDIS_GFT_FLOW_ENTRY_CACHE_HINT {
    NdisGftFlowEntryCacheHintUndefined = 0,
    NdisGftFlowEntryCacheHintLowFrequency = 100,
    NdisGftFlowEntryCacheHintMediumFrequency = 200,
    NdisGftFlowEntryCacheHintHighFrequency = 300,
    NdisGftFlowEntryCacheHintMax = 1000,
}}
pub type PNDIS_GFT_FLOW_ENTRY_CACHE_HINT = *mut NDIS_GFT_FLOW_ENTRY_CACHE_HINT;
ENUM!{enum NDIS_GFT_FLOW_ENTRY_STATE {
    NdisGftFlowEntryStateUndefined,
    NdisGftFlowEntryStateDeactivated,
    NdisGftFlowEntryStateActivated,
    NdisGftFlowEntryStateMax,
}}
pub type PNDIS_GFT_FLOW_ENTRY_STATE = *mut NDIS_GFT_FLOW_ENTRY_STATE;
pub const NDIS_GFT_CUSTOM_ACTION_LAST_ACTION: ULONG = 0x00000001;
pub const NDIS_GFT_CUSTOM_ACTION_REVISION_1: UCHAR = 1;
UNION!{union NDIS_GFT_CUSTOM_ACTION_u {
    [u64; 1],
    Alignment Alignment_mut: ULONG_PTR,
    ActionData ActionData_mut: [UCHAR; 1],
}}
STRUCT!{struct NDIS_GFT_CUSTOM_ACTION {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    ProfileId: NDIS_GFP_PROFILE_ID,
    Type: NDIS_GFT_CUSTOM_ACTION_TYPE,
    Length: ULONG,
    u: NDIS_GFT_CUSTOM_ACTION_u,
}}
pub type PNDIS_GFT_CUSTOM_ACTION = *mut NDIS_GFT_CUSTOM_ACTION;
pub const NDIS_GFT_EMFE_ADD_IN_ACTIVATED_STATE: ULONG = 0x00000001;
pub const NDIS_GFT_EMFE_MATCH_AND_ACTION_MUST_BE_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_GFT_EMFE_RDMA_FLOW: ULONG = 0x00000004;
pub const NDIS_GFT_EMFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT: ULONG = 0x00001000;
pub const NDIS_GFT_EMFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT: ULONG = 0x00002000;
pub const NDIS_GFT_EMFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE: ULONG = 0x00004000;
pub const NDIS_GFT_EMFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE: ULONG = 0x00008000;
pub const NDIS_GFT_EMFE_COPY_ALL_PACKETS: ULONG = 0x00010000;
pub const NDIS_GFT_EMFE_COPY_FIRST_PACKET: ULONG = 0x00020000;
pub const NDIS_GFT_EMFE_COPY_WHEN_TCP_FLAG_SET: ULONG = 0x00040000;
pub const NDIS_GFT_EMFE_CUSTOM_ACTION_PRESENT: ULONG = 0x00080000;
pub const NDIS_GFT_EMFE_META_ACTION_BEFORE_HEADER_TRANSPOSITION: ULONG = 0x00100000;
pub const NDIS_GFT_EMFE_COPY_AFTER_TCP_FIN_FLAG_SET: ULONG = 0x00200000;
pub const NDIS_GFT_EMFE_COPY_AFTER_TCP_RST_FLAG_SET: ULONG = 0x00400000;
pub const NDIS_GFT_EMFE_COPY_CONDITION_CHANGED: ULONG = 0x01000000;
pub const NDIS_GFT_EMFE_ALL_VPORT_FLOW_ENTRIES: ULONG = 0x02000000;
pub const NDIS_GFT_EMFE_COUNTER_ALLOCATE: ULONG = 0x00000001;
pub const NDIS_GFT_EMFE_COUNTER_MEMORY_MAPPED: ULONG = 0x00000002;
pub const NDIS_GFT_EMFE_COUNTER_CLIENT_SPECIFIED_ADDRESS: ULONG = 0x00000004;
pub const NDIS_GFT_EXACT_MATCH_FLOW_ENTRY_REVISION_1: UCHAR = 1;
UNION!{union NDIS_GFT_EXACT_MATCH_FLOW_ENTRY_CounterValueBuffer {
    [u64; 1],
    PacketCounterAddress PacketCounterAddress_mut: PNDIS_GFT_PACKET_COUNTER_VALUE,
    ByteCounterAddress ByteCounterAddress_mut: PNDIS_GFT_BYTE_COUNTER_VALUE,
    PacketAndByteCounterAddress PacketAndByteCounterAddress_mut:
        PNDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE,
}}
STRUCT!{struct NDIS_GFT_EXACT_MATCH_FLOW_ENTRY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableId: NDIS_GFT_TABLE_ID,
    VPortId: NDIS_NIC_SWITCH_VPORT_ID,
    MatchProfileId: NDIS_GFP_PROFILE_ID,
    MatchRequestStatus: NDIS_STATUS,
    ActionRequestStatus: NDIS_STATUS,
    CounterFlags: ULONG,
    CounterUpdateFrequency: NDIS_GFT_COUNTER_UPDATE_FREQUENCY,
    CounterType: NDIS_GFT_COUNTER_TYPE,
    UpdatePeriod: ULONG,
    CounterValueBuffer: NDIS_GFT_EXACT_MATCH_FLOW_ENTRY_CounterValueBuffer,
    HeaderTranspositionProfileId: NDIS_GFP_PROFILE_ID,
    RedirectionVPortId: NDIS_NIC_SWITCH_VPORT_ID,
    TtlIsOneRedirectionVPortId: NDIS_NIC_SWITCH_VPORT_ID,
    NumCounterObjects: ULONG,
    CounterIdArray: [NDIS_GFT_COUNTER_ID; NDIS_GFT_MAX_COUNTER_OBJECTS_PER_FLOW_ENTRY],
    CacheHint: NDIS_GFT_FLOW_ENTRY_CACHE_HINT,
    ClientFlowEntryId: NDIS_GFT_FLOW_ENTRY_ID,
    ProviderFlowEntryId: NDIS_GFT_FLOW_ENTRY_ID,
    FlowEntryState: NDIS_GFT_FLOW_ENTRY_STATE,
    HeaderGroupExactMatchArrayOffset: ULONG,
    HeaderGroupExactMatchArrayNumElements: ULONG,
    HeaderGroupExactMatchArrayElementSize: ULONG,
    HeaderGroupTranspositionArrayOffset: ULONG,
    HeaderGroupTranspositionArrayNumElements: ULONG,
    HeaderGroupTranspositionArrayElementSize: ULONG,
    CustomActionOffset: ULONG,
}}
pub type PNDIS_GFT_EXACT_MATCH_FLOW_ENTRY = *mut NDIS_GFT_EXACT_MATCH_FLOW_ENTRY;
ENUM!{enum NDIS_GFT_WILDCARD_ACTION {
    NdisGftWildcardActionUndefined,
    NdisGftWildcardActionAllow,
    NdisGftWildcardActionDrop,
    NdisGftWildcardActionMax,
}}
pub type PNDIS_GFT_WILDCARD_ACTION = *mut NDIS_GFT_WILDCARD_ACTION;
pub const NDIS_GFT_WCFE_ADD_IN_ACTIVATED_STATE: ULONG = 0x00000001;
pub const NDIS_GFT_WCFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT: ULONG = 0x00000002;
pub const NDIS_GFT_WCFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT: ULONG = 0x00000004;
pub const NDIS_GFT_WCFE_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE: ULONG = 0x00000008;
pub const NDIS_GFT_WCFE_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE: ULONG = 0x00000010;
pub const NDIS_GFT_WCFE_COPY_ALL_PACKETS: ULONG = 0x00000020;
pub const NDIS_GFT_WCFE_CUSTOM_ACTION_PRESENT: ULONG = 0x00000040;
pub const NDIS_GFT_WCFE_COUNTER_ALLOCATE: ULONG = 0x00000001;
pub const NDIS_GFT_WCFE_COUNTER_MEMORY_MAPPED: ULONG = 0x00000002;
pub const NDIS_GFT_WCFE_COUNTER_CLIENT_SPECIFIED_ADDRESS: ULONG = 0x00000004;
pub const NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY_REVISION_1: UCHAR = 1;
UNION!{union NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY_CounterValueBuffer {
    [u64; 1],
    PacketCounterAddress PacketCounterAddress_mut: PNDIS_GFT_PACKET_COUNTER_VALUE,
    ByteCounterAddress ByteCounterAddress_mut: PNDIS_GFT_BYTE_COUNTER_VALUE,
    PacketAndByteCounterAddress PacketAndByteCounterAddress_mut:
        PNDIS_GFT_PACKET_AND_BYTE_COUNTER_VALUE,
}}
STRUCT!{struct NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableId: NDIS_GFT_TABLE_ID,
    VPortId: NDIS_NIC_SWITCH_VPORT_ID,
    MatchProfileId: NDIS_GFP_PROFILE_ID,
    MatchRequestStatus: NDIS_STATUS,
    ActionRequestStatus: NDIS_STATUS,
    CounterFlags: ULONG,
    CounterUpdateFrequency: NDIS_GFT_COUNTER_UPDATE_FREQUENCY,
    CounterType: NDIS_GFT_COUNTER_TYPE,
    UpdatePeriod: ULONG,
    CounterValueBuffer: NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY_CounterValueBuffer,
    Priority: ULONG,
    Action: NDIS_GFT_WILDCARD_ACTION,
    RedirectionVPortId: NDIS_NIC_SWITCH_VPORT_ID,
    TtlIsOneRedirectionVPortId: NDIS_NIC_SWITCH_VPORT_ID,
    NumCounterObjects: ULONG,
    CounterIdArray: NDIS_GFT_COUNTER_ID,
    CacheHint: NDIS_GFT_FLOW_ENTRY_CACHE_HINT,
    ClientFlowEntryId: NDIS_GFT_FLOW_ENTRY_ID,
    ProviderFlowEntryId: NDIS_GFT_FLOW_ENTRY_ID,
    FlowState: NDIS_GFT_FLOW_ENTRY_STATE,
    HeaderGroupWildcardMatchArrayOffset: ULONG,
    HeaderGroupWildcardMatchArrayNumElements: ULONG,
    HeaderGroupWildcardMatchArrayElementSize: ULONG,
    CustomActionOffset: ULONG,
}}
pub type PNDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY = *mut NDIS_GFT_WILDCARD_MATCH_FLOW_ENTRY;
ENUM!{enum NDIS_GFT_PROFILE_TYPE {
    NdisGftProfileTypeUndefined,
    NdisGftProfileTypeExactMatch,
    NdisGftProfileTypeHeaderTransposition,
    NdisGftProfileTypeWildcardMatch,
    NdisGftProfileTypeMax,
}}
pub type PNDIS_GFT_PROFILE_TYPE = *mut NDIS_GFT_PROFILE_TYPE;
pub const NDIS_GFT_PROFILE_INFO_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_PROFILE_INFO {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    ProfileType: NDIS_GFT_PROFILE_TYPE,
    TableType: NDIS_GFP_TABLE_TYPE,
    ProfileId: NDIS_GFP_PROFILE_ID,
    NumSupportedFlowEntries: ULONG,
    NumCurrentFlowEntries: ULONG,
    HeaderGroupArrayOffset: ULONG,
    HeaderGroupArrayNumElements: ULONG,
    HeaderGroupArrayElementSize: ULONG,
}}
pub type PNDIS_GFT_PROFILE_INFO = *mut NDIS_GFT_PROFILE_INFO;
pub const NDIS_GFT_PROFILE_INFO_ARRAY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_PROFILE_INFO_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    ProfileInfoArrayOffset: ULONG,
    ProfileInfoArrayNumElements: ULONG,
    ProfileInfoArrayElementSize: ULONG,
}}
pub type PNDIS_GFT_PROFILE_INFO_ARRAY = *mut NDIS_GFT_PROFILE_INFO_ARRAY;
pub const NDIS_GFT_DELETE_PROFILE_ALL_PROFILES: ULONG = 0x00000001;
pub const NDIS_GFT_DELETE_PROFILE_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_DELETE_PROFILE_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    ProfileId: NDIS_GFP_PROFILE_ID,
}}
pub type PNDIS_GFT_DELETE_PROFILE_PARAMETERS = *mut NDIS_GFT_DELETE_PROFILE_PARAMETERS;
ENUM!{enum NDIS_GFT_FLOW_ENTRY_TYPE {
    NdisGftFlowEntryTypeUndefined,
    NdisGftFlowEntryTypeExactMatch,
    NdisGftFlowEntryTypeWildcard,
    NdisGftFlowEntryTypeMax,
}}
pub type PNDIS_GFT_FLOW_ENTRY_TYPE = *mut NDIS_GFT_FLOW_ENTRY_TYPE;
pub const NDIS_GFT_FLOW_ENTRY_ARRAY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_FLOW_ENTRY_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    EntryType: NDIS_GFT_FLOW_ENTRY_TYPE,
    FlowEntryArrayOffset: ULONG,
    FlowEntryArrayNumElements: ULONG,
    FlowEntryArrayElementSize: ULONG,
}}
pub type PNDIS_GFT_FLOW_ENTRY_ARRAY = *mut NDIS_GFT_FLOW_ENTRY_ARRAY;
pub const NDIS_GFT_FLOW_ENTRY_INFO_ALL_FLOW_ENTRIES: ULONG = 0x00000001;
pub const NDIS_GFT_FLOW_ENTRY_INFO_ARRAY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_FLOW_ENTRY_INFO_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableId: NDIS_GFT_TABLE_ID,
    VPortId: NDIS_NIC_SWITCH_VPORT_ID,
    ProviderFlowEntryIdStart: NDIS_GFT_FLOW_ENTRY_ID,
    FlowEntryIdCount: ULONG,
    FlowEntryInfoArrayOffset: ULONG,
    FlowEntryInfoArrayNumElements: ULONG,
    FlowEntryInfoArrayElementSize: ULONG,
}}
pub type PNDIS_GFT_FLOW_ENTRY_INFO_ARRAY = *mut NDIS_GFT_FLOW_ENTRY_INFO_ARRAY;
pub const NDIS_GFT_FLOW_ENTRY_ID_ALL_NIC_SWITCH_FLOW_ENTRIES: ULONG = 0x00000001;
pub const NDIS_GFT_FLOW_ENTRY_ID_ALL_TABLE_FLOW_ENTRIES: ULONG = 0x00000002;
pub const NDIS_GFT_FLOW_ENTRY_ID_ALL_VPORT_FLOW_ENTRIES: ULONG = 0x00000004;
pub const NDIS_GFT_FLOW_ENTRY_ID_RANGE_DEFINED: ULONG = 0x00000008;
pub const NDIS_GFT_FLOW_ENTRY_ID_ARRAY_DEFINED: ULONG = 0x00000010;
pub const NDIS_GFT_FLOW_ENTRY_ID_ARRAY_COUNTER_VALUES: ULONG = 0x00010000;
STRUCT!{struct NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER {
    FlowEntryId: NDIS_GFT_FLOW_ENTRY_ID,
    CounterValue: NDIS_GFT_COUNTER_VALUE,
}}
pub type PNDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER = *mut NDIS_GFT_FLOW_ENTRY_ID_AND_COUNTER;
pub const NDIS_GFT_FLOW_ENTRY_ID_ARRAY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_FLOW_ENTRY_ID_ARRAY_IdArray_FlowEntryIdArray {
    ProviderFlowEntryIdArrayOffset: ULONG,
    ProviderFlowEntryIdArrayNumElements: ULONG,
    ProviderFlowEntryIdArrayElementSize: ULONG,
}}
STRUCT!{struct NDIS_GFT_FLOW_ENTRY_ID_ARRAY_IdArray_FlowEntryIdAndCounterArray {
    ProviderFlowEntryIdAndCounterArrayOffset: ULONG,
    ProviderFlowEntryIdAndCounterArrayNumElements: ULONG,
    ProviderFlowEntryIdAndCounterArrayElementSize: ULONG,
}}
UNION!{union NDIS_GFT_FLOW_ENTRY_ID_ARRAY_IdArray {
    [u32; 3],
    FlowEntryIdArray FlowEntryIdArray_mut: NDIS_GFT_FLOW_ENTRY_ID_ARRAY_IdArray_FlowEntryIdArray,
    FlowEntryIdAndCounterArray FlowEntryIdAndCounterArray_mut:
        NDIS_GFT_FLOW_ENTRY_ID_ARRAY_IdArray_FlowEntryIdAndCounterArray,
}}
STRUCT!{struct NDIS_GFT_FLOW_ENTRY_ID_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    TableId: NDIS_GFT_TABLE_ID,
    VPortId: NDIS_NIC_SWITCH_VPORT_ID,
    IdArray: NDIS_GFT_FLOW_ENTRY_ID_ARRAY_IdArray,
}}
pub type PNDIS_GFT_FLOW_ENTRY_ID_ARRAY = *mut NDIS_GFT_FLOW_ENTRY_ID_ARRAY;
pub const NDIS_GFT_OFFLOAD_PARAMETERS_ENABLE_OFFLOAD: ULONG = 0x00000001;
pub const NDIS_GFT_OFFLOAD_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_OFFLOAD_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    ExceptionVPortId: NDIS_NIC_SWITCH_VPORT_ID,
    CopyLookaheadLength: ULONG,
    SampleLookaheadLength: ULONG,
}}
pub type PNDIS_GFT_OFFLOAD_PARAMETERS = *mut NDIS_GFT_OFFLOAD_PARAMETERS;
pub const NDIS_GFT_OFFLOAD_CAPS_ADD_FLOW_ENTRY_DEACTIVATED_PREFERRED: ULONG = 0x00000001;
pub const NDIS_GFT_OFFLOAD_CAPS_RATE_LIMITING_QUEUE_SUPPORTED: ULONG = 0x00000002;
pub const NDIS_GFT_OFFLOAD_CAPS_MEMORY_MAPPED_COUNTERS: ULONG = 0x00000001;
pub const NDIS_GFT_OFFLOAD_CAPS_MEMORY_MAPPED_PAKCET_AND_BYTE_COUNTERS: ULONG = 0x00000002;
pub const NDIS_GFT_OFFLOAD_CAPS_PER_FLOW_ENTRY_COUNTERS: ULONG = 0x00000004;
pub const NDIS_GFT_OFFLOAD_CAPS_PER_PACKET_COUNTER_UPDATE: ULONG = 0x00000008;
pub const NDIS_GFT_OFFLOAD_CAPS_CLIENT_SPECIFIED_MEMORY_MAPPED_COUNTERS: ULONG = 0x00000010;
pub const NDIS_GFT_OFFLOAD_CAPS_INGRESS_AGGREGATE_COUNTERS: ULONG = 0x00000020;
pub const NDIS_GFT_OFFLOAD_CAPS_EGRESS_AGGREGATE_COUNTERS: ULONG = 0x00000040;
pub const NDIS_GFT_OFFLOAD_CAPS_INGRESS_WILDCARD_MATCH: ULONG = 0x00000001;
pub const NDIS_GFT_OFFLOAD_CAPS_EGRESS_WILDCARD_MATCH: ULONG = 0x00000002;
pub const NDIS_GFT_OFFLOAD_CAPS_INGRESS_EXACT_MATCH: ULONG = 0x00000004;
pub const NDIS_GFT_OFFLOAD_CAPS_EGRESS_EXACT_MATCH: ULONG = 0x00000008;
pub const NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_INGRESS_WILDCARD_MATCH: ULONG = 0x00000010;
pub const NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_EGRESS_WILDCARD_MATCH: ULONG = 0x00000020;
pub const NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_INGRESS_EXACT_MATCH: ULONG = 0x00000040;
pub const NDIS_GFT_OFFLOAD_CAPS_EXT_VPORT_EGRESS_EXACT_MATCH: ULONG = 0x00000080;
pub const NDIS_GFT_OFFLOAD_CAPS_POP: ULONG = 0x00000001;
pub const NDIS_GFT_OFFLOAD_CAPS_PUSH: ULONG = 0x00000002;
pub const NDIS_GFT_OFFLOAD_CAPS_MODIFY: ULONG = 0x00000004;
pub const NDIS_GFT_OFFLOAD_CAPS_IGNORE_ACTION_SUPPORTED: ULONG = 0x00000008;
pub const NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT: ULONG = 0x00000010;
pub const NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT: ULONG = 0x00000020;
pub const NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_INGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE: ULONG = 0x00000040;
pub const NDIS_GFT_OFFLOAD_CAPS_REDIRECT_TO_EGRESS_QUEUE_OF_VPORT_IF_TTL_IS_ONE: ULONG = 0x00000080;
pub const NDIS_GFT_OFFLOAD_CAPS_COPY_ALL: ULONG = 0x00000100;
pub const NDIS_GFT_OFFLOAD_CAPS_COPY_FIRST: ULONG = 0x00000200;
pub const NDIS_GFT_OFFLOAD_CAPS_COPY_WHEN_TCP_FLAG_SET: ULONG = 0x00000400;
pub const NDIS_GFT_OFFLOAD_CAPS_SAMPLE: ULONG = 0x00000800;
pub const NDIS_GFT_OFFLOAD_CAPS_META_ACTION_BEFORE_HEADER_TRANSPOSITION: ULONG = 0x00001000;
pub const NDIS_GFT_OFFLOAD_CAPS_META_ACTION_AFTER_HEADER_TRANSPOSITION: ULONG = 0x00002000;
pub const NDIS_GFT_OFFLOAD_CAPS_PER_VPORT_EXCEPTION_VPORT: ULONG = 0x00004000;
pub const NDIS_GFT_OFFLOAD_CAPS_DESIGNATED_EXCEPTION_VPORT: ULONG = 0x00008000;
pub const NDIS_GFT_OFFLOAD_CAPS_DSCP_MASK: ULONG = 0x00010000;
pub const NDIS_GFT_OFFLOAD_CAPS_8021P_PRIORITY_MASK: ULONG = 0x00020000;
pub const NDIS_GFT_OFFLOAD_CAPS_ALLOW: ULONG = 0x00040000;
pub const NDIS_GFT_OFFLOAD_CAPS_DROP: ULONG = 0x00080000;
pub const NDIS_GFT_OFFLOAD_CAPABILITIES_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_OFFLOAD_CAPABILITIES {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    CounterCapabilities: ULONG,
    SupportedTableTypes: ULONG,
    SupportedEncapsulationTypes: ULONG,
    SupportedIngressExactMatchTableActions: ULONG,
    SupportedEgressExactMatchTableActions: ULONG,
    SoftwareSupportedIngressExactMatchTableActions: ULONG,
    SoftwareSupportedEgressExactMatchTableActions: ULONG,
    SupportedIngressWildcardMatchTableActions: ULONG,
    SupportedEgressWildcardMatchTableActions: ULONG,
    SoftwareSupportedIngressWildcardMatchTableActions: ULONG,
    SoftwareSupportedEgressWildcardMatchTableActions: ULONG,
    NumPacketCounterObjects: ULONG,
    NumByteCounterObjects: ULONG,
    NumPacketAndByteCounterObjects: ULONG,
    NumCounterObjectsPerIngressExactMatchFlowEntry: ULONG,
    NumCounterObjectsPerEgressExactMatchFlowEntry: ULONG,
    NumCounterObjectsPerIngressWildcardMatchFlowEntry: ULONG,
    NumCounterObjectsPerEgressWildcardMatchFlowEntry: ULONG,
}}
pub type PNDIS_GFT_OFFLOAD_CAPABILITIES = *mut NDIS_GFT_OFFLOAD_CAPABILITIES;
pub const NDIS_GFT_VPORT_ENABLE: ULONG = 0x00000001;
pub const NDIS_GFT_VPORT_ENABLE_STATE_CHANGED: ULONG = 0x00100000;
pub const NDIS_GFT_VPORT_EXCEPTION_VPORT_CHANGED: ULONG = 0x00200000;
pub const NDIS_GFT_VPORT_SAMPLING_RATE_CHANGED: ULONG = 0x00400000;
pub const NDIS_GFT_VPORT_DSCP_MASK_CHANGED: ULONG = 0x00800000;
pub const NDIS_GFT_VPORT_PRIORITY_MASK_CHANGED: ULONG = 0x01000000;
pub const NDIS_GFT_VPORT_PARAMS_CHANGE_MASK: ULONG = 0xFFF00000;
pub const NDIS_GFT_VPORT_MAX_DSCP_MASK_COUNTER_OBJECTS: usize = 64;
pub const NDIS_GFT_VPORT_MAX_PRIORITY_MASK_COUNTER_OBJECTS: usize = 8;
pub const NDIS_GFT_VPORT_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_GFT_VPORT_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    VPortId: NDIS_NIC_SWITCH_VPORT_ID,
    ExceptionVPortId: NDIS_NIC_SWITCH_VPORT_ID,
    SamplingRate: ULONG,
    DscpMask: ULONG64,
    NumDscpMaskCounterObjects: ULONG,
    DscpMaskCounterIdArray: [NDIS_GFT_COUNTER_ID; NDIS_GFT_VPORT_MAX_DSCP_MASK_COUNTER_OBJECTS],
    PriorityMask: ULONG64,
    NumPriorityMaskCounterObjects: ULONG,
    PriorityMaskCounterIdArray:
        [NDIS_GFT_COUNTER_ID; NDIS_GFT_VPORT_MAX_PRIORITY_MASK_COUNTER_OBJECTS],
}}
pub type PNDIS_GFT_VPORT_PARAMETERS = *mut NDIS_GFT_VPORT_PARAMETERS;
pub const NDIS_QOS_DEFAULT_SQ_ID: NDIS_QOS_SQ_ID = 0;
ENUM!{enum NDIS_QOS_SQ_TYPE {
    NdisQosSqTypeUndefined,
    NdisQosSqTypeStandard,
    NdisQosSqTypeGFT,
    NdisQosSqTypeMax,
}}
pub type PNDIS_QOS_SQ_TYPE = *mut NDIS_QOS_SQ_TYPE;
pub const NDIS_QOS_SQ_PARAMETERS_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_QOS_SQ_PARAMETERS {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SqId: NDIS_QOS_SQ_ID,
    SqType: NDIS_QOS_SQ_TYPE,
    TcEnabledTable: [BOOLEAN; NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES],
    TcTransmitBandwidthCapTable: [ULONG; NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES],
    TcTransmitBandwidthReservationTable: [ULONG; NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES],
    TcReceiveBandwidthCapTable: [ULONG; NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES],
}}
pub type PNDIS_QOS_SQ_PARAMETERS = *mut NDIS_QOS_SQ_PARAMETERS;
pub const NDIS_QOS_SQ_TRANSMIT_CAP_ENABLED: ULONG = 0x00000001;
pub const NDIS_QOS_SQ_TRANSMIT_RESERVATION_ENABLED: ULONG = 0x00000002;
pub const NDIS_QOS_SQ_RECEIVE_CAP_ENABLED: ULONG = 0x00000004;
pub const NDIS_QOS_SQ_PARAMETERS_ARRAY_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SqType: NDIS_QOS_SQ_TYPE,
    FirstSqId: NDIS_QOS_SQ_ID,
    MaxSqsToReturn: ULONG,
    SqParamsArrayOffset: ULONG,
    SqParamsArrayNumElements: ULONG,
    SqParamsArrayElementSize: ULONG,
}}
pub type PNDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY = *mut NDIS_QOS_SQ_PARAMETERS_ENUM_ARRAY;
pub const NDIS_QOS_OFFLOAD_CAPABILITIES_REVISION_1: UCHAR = 1;
STRUCT!{struct NDIS_QOS_OFFLOAD_CAPABILITIES {
    Header: NDIS_OBJECT_HEADER,
    Flags: ULONG,
    SupportedSqTypes: ULONG,
    TransmitCapSupported: [BOOLEAN; NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES],
    TransmitReservationSupported: [BOOLEAN; NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES],
    ReceiveCapSupported: [BOOLEAN; NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES],
    TransmitGftCapSupported: [BOOLEAN; NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES],
    ReceiveGftCapSupported: [BOOLEAN; NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES],
    TcSupportedTable: [BOOLEAN; NDIS_QOS_MAXIMUM_TRAFFIC_CLASSES],
    NumStandardSqsSupported: ULONG,
    NumGftSqsSupported: ULONG,
    ReservationGranularitySupported: ULONG,
    MaxNumSqInputs: ULONG,
}}
pub type PNDIS_QOS_OFFLOAD_CAPABILITIES = *mut NDIS_QOS_OFFLOAD_CAPABILITIES;
pub const NDIS_QOS_OFFLOAD_CAPS_STANDARD_SQ: ULONG = 0x00000001;
pub const NDIS_QOS_OFFLOAD_CAPS_GFT_SQ: ULONG = 0x00000002;

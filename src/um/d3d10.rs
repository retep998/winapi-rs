// Licensed under the Apache License, Version 2.0
// <LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your option.
// All files in the project carrying such notice may not be copied, modified, or distributed
// except according to those terms.
use ctypes::{c_long, c_void};
use shared::basetsd::{SIZE_T, UINT64, UINT8};
use shared::dxgiformat::DXGI_FORMAT;
use shared::dxgitype::DXGI_SAMPLE_DESC;
use shared::guiddef::{REFGUID, REFIID};
use shared::minwindef::{BOOL, BYTE, DWORD, FLOAT, UINT};
use shared::windef::RECT;
use um::d3dcommon::{D3D_PRIMITIVE, D3D_PRIMITIVE_TOPOLOGY, D3D_SRV_DIMENSION};
use um::unknwnbase::{IUnknown, IUnknownVtbl};
use um::winnt::{HANDLE, HRESULT, INT, LPCSTR, LPSTR};
pub const D3D10_16BIT_INDEX_STRIP_CUT_VALUE: DWORD = 0xffff;
pub const D3D10_32BIT_INDEX_STRIP_CUT_VALUE: DWORD = 0xffffffff;
pub const D3D10_8BIT_INDEX_STRIP_CUT_VALUE: DWORD = 0xff;
pub const D3D10_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT: DWORD = 9;
pub const D3D10_CLIP_OR_CULL_DISTANCE_COUNT: DWORD = 8;
pub const D3D10_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT: DWORD = 2;
pub const D3D10_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT: DWORD = 14;
pub const D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS: DWORD = 4;
pub const D3D10_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT: DWORD = 32;
pub const D3D10_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT: DWORD = 15;
pub const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS: DWORD = 4;
pub const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT: DWORD = 15;
pub const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST: DWORD = 1;
pub const D3D10_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS: DWORD = 1;
pub const D3D10_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT: DWORD = 64;
pub const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS: DWORD = 4;
pub const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT: DWORD = 1;
pub const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST: DWORD = 1;
pub const D3D10_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS: DWORD = 1;
pub const D3D10_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT: DWORD = 32;
pub const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS: DWORD = 1;
pub const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT: DWORD = 128;
pub const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST: DWORD = 1;
pub const D3D10_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS: DWORD = 1;
pub const D3D10_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT: DWORD = 128;
pub const D3D10_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS: DWORD = 1;
pub const D3D10_COMMONSHADER_SAMPLER_REGISTER_COUNT: DWORD = 16;
pub const D3D10_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST: DWORD = 1;
pub const D3D10_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS: DWORD = 1;
pub const D3D10_COMMONSHADER_SAMPLER_SLOT_COUNT: DWORD = 16;
pub const D3D10_COMMONSHADER_SUBROUTINE_NESTING_LIMIT: DWORD = 32;
pub const D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENTS: DWORD = 4;
pub const D3D10_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT: DWORD = 32;
pub const D3D10_COMMONSHADER_TEMP_REGISTER_COUNT: DWORD = 4096;
pub const D3D10_COMMONSHADER_TEMP_REGISTER_READS_PER_INST: DWORD = 3;
pub const D3D10_COMMONSHADER_TEMP_REGISTER_READ_PORTS: DWORD = 3;
pub const D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX: DWORD = 10;
pub const D3D10_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN: c_long = -10;
pub const D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE: c_long = -8;
pub const D3D10_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE: DWORD = 7;
pub const D3D10_DEFAULT_BLEND_FACTOR_ALPHA: FLOAT = 1.0;
pub const D3D10_DEFAULT_BLEND_FACTOR_BLUE: FLOAT = 1.0;
pub const D3D10_DEFAULT_BLEND_FACTOR_GREEN: FLOAT = 1.0;
pub const D3D10_DEFAULT_BLEND_FACTOR_RED: FLOAT = 1.0;
pub const D3D10_DEFAULT_BORDER_COLOR_COMPONENT: FLOAT = 0.0;
pub const D3D10_DEFAULT_DEPTH_BIAS: DWORD = 0;
pub const D3D10_DEFAULT_DEPTH_BIAS_CLAMP: FLOAT = 0.0;
pub const D3D10_DEFAULT_MAX_ANISOTROPY: FLOAT = 16.0;
pub const D3D10_DEFAULT_MIP_LOD_BIAS: FLOAT = 0.0;
pub const D3D10_DEFAULT_RENDER_TARGET_ARRAY_INDEX: DWORD = 0;
pub const D3D10_DEFAULT_SAMPLE_MASK: DWORD = 0xffffffff;
pub const D3D10_DEFAULT_SCISSOR_ENDX: DWORD = 0;
pub const D3D10_DEFAULT_SCISSOR_ENDY: DWORD = 0;
pub const D3D10_DEFAULT_SCISSOR_STARTX: DWORD = 0;
pub const D3D10_DEFAULT_SCISSOR_STARTY: DWORD = 0;
pub const D3D10_DEFAULT_SLOPE_SCALED_DEPTH_BIAS: FLOAT = 0.0;
pub const D3D10_DEFAULT_STENCIL_READ_MASK: DWORD = 0xff;
pub const D3D10_DEFAULT_STENCIL_REFERENCE: DWORD = 0;
pub const D3D10_DEFAULT_STENCIL_WRITE_MASK: DWORD = 0xff;
pub const D3D10_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX: DWORD = 0;
pub const D3D10_DEFAULT_VIEWPORT_HEIGHT: DWORD = 0;
pub const D3D10_DEFAULT_VIEWPORT_MAX_DEPTH: FLOAT = 0.0;
pub const D3D10_DEFAULT_VIEWPORT_MIN_DEPTH: FLOAT = 0.0;
pub const D3D10_DEFAULT_VIEWPORT_TOPLEFTX: DWORD = 0;
pub const D3D10_DEFAULT_VIEWPORT_TOPLEFTY: DWORD = 0;
pub const D3D10_DEFAULT_VIEWPORT_WIDTH: DWORD = 0;
pub const D3D10_FLOAT16_FUSED_TOLERANCE_IN_ULP: FLOAT = 0.6;
pub const D3D10_FLOAT32_MAX: FLOAT = 3.402823466e+38;
pub const D3D10_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP: FLOAT = 0.6;
pub const D3D10_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR: FLOAT = 2.4;
pub const D3D10_FLOAT_TO_SRGB_EXPONENT_NUMERATOR: FLOAT = 1.0;
pub const D3D10_FLOAT_TO_SRGB_OFFSET: FLOAT = 0.055;
pub const D3D10_FLOAT_TO_SRGB_SCALE_1: FLOAT = 12.92;
pub const D3D10_FLOAT_TO_SRGB_SCALE_2: FLOAT = 1.055;
pub const D3D10_FLOAT_TO_SRGB_THRESHOLD: FLOAT = 0.0031308;
pub const D3D10_FTOI_INSTRUCTION_MAX_INPUT: FLOAT = 2147483647.999;
pub const D3D10_FTOI_INSTRUCTION_MIN_INPUT: FLOAT = -2147483648.999;
pub const D3D10_FTOU_INSTRUCTION_MAX_INPUT: FLOAT = 4294967295.999;
pub const D3D10_FTOU_INSTRUCTION_MIN_INPUT: FLOAT = 0.0;
pub const D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS: DWORD = 1;
pub const D3D10_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT: DWORD = 32;
pub const D3D10_GS_INPUT_PRIM_CONST_REGISTER_COUNT: DWORD = 1;
pub const D3D10_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST: DWORD = 2;
pub const D3D10_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS: DWORD = 1;
pub const D3D10_GS_INPUT_REGISTER_COMPONENTS: DWORD = 4;
pub const D3D10_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT: DWORD = 32;
pub const D3D10_GS_INPUT_REGISTER_COUNT: DWORD = 16;
pub const D3D10_GS_INPUT_REGISTER_READS_PER_INST: DWORD = 2;
pub const D3D10_GS_INPUT_REGISTER_READ_PORTS: DWORD = 1;
pub const D3D10_GS_INPUT_REGISTER_VERTICES: DWORD = 6;
pub const D3D10_GS_OUTPUT_ELEMENTS: DWORD = 32;
pub const D3D10_GS_OUTPUT_REGISTER_COMPONENTS: DWORD = 4;
pub const D3D10_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT: DWORD = 32;
pub const D3D10_GS_OUTPUT_REGISTER_COUNT: DWORD = 32;
pub const D3D10_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES: DWORD = 0;
pub const D3D10_IA_DEFAULT_PRIMITIVE_TOPOLOGY: DWORD = 0;
pub const D3D10_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES: DWORD = 0;
pub const D3D10_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT: DWORD = 1;
pub const D3D10_IA_INSTANCE_ID_BIT_COUNT: DWORD = 32;
pub const D3D10_IA_INTEGER_ARITHMETIC_BIT_COUNT: DWORD = 32;
pub const D3D10_IA_PRIMITIVE_ID_BIT_COUNT: DWORD = 32;
pub const D3D10_IA_VERTEX_ID_BIT_COUNT: DWORD = 32;
pub const D3D10_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT: DWORD = 16;
pub const D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS: DWORD = 64;
pub const D3D10_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT: DWORD = 16;
pub const D3D10_INTEGER_DIVIDE_BY_ZERO_QUOTIENT: DWORD = 0xffffffff;
pub const D3D10_INTEGER_DIVIDE_BY_ZERO_REMAINDER: DWORD = 0xffffffff;
pub const D3D10_LINEAR_GAMMA: FLOAT = 1.0;
pub const D3D10_MAX_BORDER_COLOR_COMPONENT: FLOAT = 1.0;
pub const D3D10_MAX_DEPTH: FLOAT = 1.0;
pub const D3D10_MAX_MAXANISOTROPY: DWORD = 16;
pub const D3D10_MAX_MULTISAMPLE_SAMPLE_COUNT: DWORD = 32;
pub const D3D10_MAX_POSITION_VALUE: FLOAT = 3.402823466e+34;
pub const D3D10_MAX_TEXTURE_DIMENSION_2_TO_EXP: DWORD = 17;
pub const D3D10_MIN_BORDER_COLOR_COMPONENT: FLOAT = 0.0;
pub const D3D10_MIN_DEPTH: FLOAT = 0.0;
pub const D3D10_MIN_MAXANISOTROPY: DWORD = 0;
pub const D3D10_MIP_LOD_BIAS_MAX: FLOAT = 15.99;
pub const D3D10_MIP_LOD_BIAS_MIN: FLOAT = -16.0;
pub const D3D10_MIP_LOD_FRACTIONAL_BIT_COUNT: DWORD = 6;
pub const D3D10_MIP_LOD_RANGE_BIT_COUNT: DWORD = 8;
pub const D3D10_MULTISAMPLE_ANTIALIAS_LINE_WIDTH: FLOAT = 1.4;
pub const D3D10_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT: DWORD = 0;
pub const D3D10_PIXEL_ADDRESS_RANGE_BIT_COUNT: DWORD = 13;
pub const D3D10_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT: DWORD = 15;
pub const D3D10_PS_FRONTFACING_DEFAULT_VALUE: DWORD = 0xffffffff;
pub const D3D10_PS_FRONTFACING_FALSE_VALUE: DWORD = 0;
pub const D3D10_PS_FRONTFACING_TRUE_VALUE: DWORD = 0xffffffff;
pub const D3D10_PS_INPUT_REGISTER_COMPONENTS: DWORD = 4;
pub const D3D10_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT: DWORD = 32;
pub const D3D10_PS_INPUT_REGISTER_COUNT: DWORD = 32;
pub const D3D10_PS_INPUT_REGISTER_READS_PER_INST: DWORD = 2;
pub const D3D10_PS_INPUT_REGISTER_READ_PORTS: DWORD = 1;
pub const D3D10_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT: FLOAT = 0.0;
pub const D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS: DWORD = 1;
pub const D3D10_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT: DWORD = 32;
pub const D3D10_PS_OUTPUT_DEPTH_REGISTER_COUNT: DWORD = 1;
pub const D3D10_PS_OUTPUT_REGISTER_COMPONENTS: DWORD = 4;
pub const D3D10_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT: DWORD = 32;
pub const D3D10_PS_OUTPUT_REGISTER_COUNT: DWORD = 8;
pub const D3D10_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT: FLOAT = 0.5;
pub const D3D10_REQ_BLEND_OBJECT_COUNT_PER_CONTEXT: DWORD = 4096;
pub const D3D10_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP: DWORD = 27;
pub const D3D10_REQ_CONSTANT_BUFFER_ELEMENT_COUNT: DWORD = 4096;
pub const D3D10_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_CONTEXT: DWORD = 4096;
pub const D3D10_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP: DWORD = 32;
pub const D3D10_REQ_DRAW_VERTEX_COUNT_2_TO_EXP: DWORD = 32;
pub const D3D10_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION: DWORD = 8192;
pub const D3D10_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT: DWORD = 1024;
pub const D3D10_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT: DWORD = 4096;
pub const D3D10_REQ_MAXANISOTROPY: DWORD = 16;
pub const D3D10_REQ_MIP_LEVELS: DWORD = 14;
pub const D3D10_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES: DWORD = 2048;
pub const D3D10_REQ_RASTERIZER_OBJECT_COUNT_PER_CONTEXT: DWORD = 4096;
pub const D3D10_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH: DWORD = 8192;
pub const D3D10_REQ_RESOURCE_SIZE_IN_MEGABYTES: DWORD = 128;
pub const D3D10_REQ_RESOURCE_VIEW_COUNT_PER_CONTEXT_2_TO_EXP: DWORD = 20;
pub const D3D10_REQ_SAMPLER_OBJECT_COUNT_PER_CONTEXT: DWORD = 4096;
pub const D3D10_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION: DWORD = 512;
pub const D3D10_REQ_TEXTURE1D_U_DIMENSION: DWORD = 8192;
pub const D3D10_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION: DWORD = 512;
pub const D3D10_REQ_TEXTURE2D_U_OR_V_DIMENSION: DWORD = 8192;
pub const D3D10_REQ_TEXTURE3D_U_V_OR_W_DIMENSION: DWORD = 2048;
pub const D3D10_REQ_TEXTURECUBE_DIMENSION: DWORD = 8192;
pub const D3D10_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL: DWORD = 0;
pub const D3D10_SHADER_MAJOR_VERSION: DWORD = 4;
pub const D3D10_SHADER_MINOR_VERSION: DWORD = 0;
pub const D3D10_SHIFT_INSTRUCTION_PAD_VALUE: DWORD = 0;
pub const D3D10_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT: DWORD = 5;
pub const D3D10_SIMULTANEOUS_RENDER_TARGET_COUNT: DWORD = 8;
pub const D3D10_SO_BUFFER_MAX_STRIDE_IN_BYTES: DWORD = 2048;
pub const D3D10_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES: DWORD = 256;
pub const D3D10_SO_BUFFER_SLOT_COUNT: DWORD = 4;
pub const D3D10_SO_DDI_REGISTER_INDEX_DENOTING_GAP: DWORD = 0xffffffff;
pub const D3D10_SO_MULTIPLE_BUFFER_ELEMENTS_PER_BUFFER: DWORD = 1;
pub const D3D10_SO_SINGLE_BUFFER_COMPONENT_LIMIT: DWORD = 64;
pub const D3D10_SRGB_GAMMA: FLOAT = 2.2;
pub const D3D10_SRGB_TO_FLOAT_DENOMINATOR_1: FLOAT = 12.92;
pub const D3D10_SRGB_TO_FLOAT_DENOMINATOR_2: FLOAT = 1.055;
pub const D3D10_SRGB_TO_FLOAT_EXPONENT: FLOAT = 2.4;
pub const D3D10_SRGB_TO_FLOAT_OFFSET: FLOAT = 0.055;
pub const D3D10_SRGB_TO_FLOAT_THRESHOLD: FLOAT = 0.04045;
pub const D3D10_SRGB_TO_FLOAT_TOLERANCE_IN_ULP: FLOAT = 0.5;
pub const D3D10_STANDARD_COMPONENT_BIT_COUNT: DWORD = 32;
pub const D3D10_STANDARD_COMPONENT_BIT_COUNT_DOUBLED: DWORD = 64;
pub const D3D10_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE: DWORD = 4;
pub const D3D10_STANDARD_PIXEL_COMPONENT_COUNT: DWORD = 128;
pub const D3D10_STANDARD_PIXEL_ELEMENT_COUNT: DWORD = 32;
pub const D3D10_STANDARD_VECTOR_SIZE: DWORD = 4;
pub const D3D10_STANDARD_VERTEX_ELEMENT_COUNT: DWORD = 16;
pub const D3D10_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT: DWORD = 64;
pub const D3D10_SUBPIXEL_FRACTIONAL_BIT_COUNT: DWORD = 8;
pub const D3D10_SUBTEXEL_FRACTIONAL_BIT_COUNT: DWORD = 6;
pub const D3D10_TEXEL_ADDRESS_RANGE_BIT_COUNT: DWORD = 18;
pub const D3D10_UNBOUND_MEMORY_ACCESS_RESULT: DWORD = 0;
pub const D3D10_VIEWPORT_AND_SCISSORRECT_MAX_INDEX: DWORD = 15;
pub const D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE: DWORD = 16;
pub const D3D10_VIEWPORT_BOUNDS_MAX: DWORD = 16383;
pub const D3D10_VIEWPORT_BOUNDS_MIN: c_long = -16384;
pub const D3D10_VS_INPUT_REGISTER_COMPONENTS: DWORD = 4;
pub const D3D10_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT: DWORD = 32;
pub const D3D10_VS_INPUT_REGISTER_COUNT: DWORD = 16;
pub const D3D10_VS_INPUT_REGISTER_READS_PER_INST: DWORD = 2;
pub const D3D10_VS_INPUT_REGISTER_READ_PORTS: DWORD = 1;
pub const D3D10_VS_OUTPUT_REGISTER_COMPONENTS: DWORD = 4;
pub const D3D10_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT: DWORD = 32;
pub const D3D10_VS_OUTPUT_REGISTER_COUNT: DWORD = 16;
pub const D3D10_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT: DWORD = 10;
pub const D3D10_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP: DWORD = 25;
pub const D3D10_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP: DWORD = 25;
pub const D3D_MAJOR_VERSION: DWORD = 10;
pub const D3D_MINOR_VERSION: DWORD = 0;
pub const D3D_SPEC_DATE_DAY: DWORD = 8;
pub const D3D_SPEC_DATE_MONTH: DWORD = 8;
pub const D3D_SPEC_DATE_YEAR: DWORD = 2006;
pub const D3D_SPEC_VERSION: FLOAT = 1.050005;
ENUM!{enum D3D10_INPUT_CLASSIFICATION {
    D3D10_INPUT_PER_VERTEX_DATA = 0,
    D3D10_INPUT_PER_INSTANCE_DATA = 1,
}}
pub const D3D10_APPEND_ALIGNED_ELEMENT: DWORD = 0xffffffff;
STRUCT!{struct D3D10_INPUT_ELEMENT_DESC {
    SemanticName: LPCSTR,
    SemanticIndex: UINT,
    Format: DXGI_FORMAT,
    InputSlot: UINT,
    AlignedByteOffset: UINT,
    InputSlotClass: D3D10_INPUT_CLASSIFICATION,
    InstanceDataStepRate: UINT,
}}
ENUM!{enum D3D10_FILL_MODE {
    D3D10_FILL_WIREFRAME = 2,
    D3D10_FILL_SOLID = 3,
}}
pub type D3D10_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY;
pub type D3D10_PRIMITIVE = D3D_PRIMITIVE;
ENUM!{enum D3D10_CULL_MODE {
    D3D10_CULL_NONE = 1,
    D3D10_CULL_FRONT = 2,
    D3D10_CULL_BACK = 3,
}}
STRUCT!{struct D3D10_SO_DECLARATION_ENTRY {
    SemanticName: LPCSTR,
    SemanticIndex: UINT,
    StartComponent: BYTE,
    ComponentCount: BYTE,
    OutputSlot: BYTE,
}}
STRUCT!{struct D3D10_VIEWPORT {
    TopLeftX: INT,
    TopLeftY: INT,
    Width: UINT,
    Height: UINT,
    MinDepth: FLOAT,
    MaxDepth: FLOAT,
}}
ENUM!{enum D3D10_RESOURCE_DIMENSION {
    D3D10_RESOURCE_DIMENSION_UNKNOWN = 0,
    D3D10_RESOURCE_DIMENSION_BUFFER = 1,
    D3D10_RESOURCE_DIMENSION_TEXTURE1D = 2,
    D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3,
    D3D10_RESOURCE_DIMENSION_TEXTURE3D = 4,
}}
pub type D3D10_SRV_DIMENSION = D3D_SRV_DIMENSION;
ENUM!{enum D3D10_DSV_DIMENSION {
    D3D10_DSV_DIMENSION_UNKNOWN = 0,
    D3D10_DSV_DIMENSION_TEXTURE1D = 1,
    D3D10_DSV_DIMENSION_TEXTURE1DARRAY = 2,
    D3D10_DSV_DIMENSION_TEXTURE2D = 3,
    D3D10_DSV_DIMENSION_TEXTURE2DARRAY = 4,
    D3D10_DSV_DIMENSION_TEXTURE2DMS = 5,
    D3D10_DSV_DIMENSION_TEXTURE2DMSARRAY = 6,
}}
ENUM!{enum D3D10_RTV_DIMENSION {
    D3D10_RTV_DIMENSION_UNKNOWN = 0,
    D3D10_RTV_DIMENSION_BUFFER = 1,
    D3D10_RTV_DIMENSION_TEXTURE1D = 2,
    D3D10_RTV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D10_RTV_DIMENSION_TEXTURE2D = 4,
    D3D10_RTV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D10_RTV_DIMENSION_TEXTURE2DMS = 6,
    D3D10_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D10_RTV_DIMENSION_TEXTURE3D = 8,
}}
ENUM!{enum D3D10_USAGE {
    D3D10_USAGE_DEFAULT = 0,
    D3D10_USAGE_IMMUTABLE = 1,
    D3D10_USAGE_DYNAMIC = 2,
    D3D10_USAGE_STAGING = 3,
}}
ENUM!{enum D3D10_BIND_FLAG {
    D3D10_BIND_VERTEX_BUFFER = 0x1,
    D3D10_BIND_INDEX_BUFFER = 0x2,
    D3D10_BIND_CONSTANT_BUFFER = 0x4,
    D3D10_BIND_SHADER_RESOURCE = 0x8,
    D3D10_BIND_STREAM_OUTPUT = 0x10,
    D3D10_BIND_RENDER_TARGET = 0x20,
    D3D10_BIND_DEPTH_STENCIL = 0x40,
}}
ENUM!{enum D3D10_CPU_ACCESS_FLAG {
    D3D10_CPU_ACCESS_WRITE = 0x10000,
    D3D10_CPU_ACCESS_READ = 0x20000,
}}
ENUM!{enum D3D10_MAP {
    D3D10_MAP_READ = 1,
    D3D10_MAP_WRITE = 2,
    D3D10_MAP_READ_WRITE = 3,
    D3D10_MAP_WRITE_DISCARD = 4,
    D3D10_MAP_WRITE_NO_OVERWRITE = 5,
}}
ENUM!{enum D3D10_MAP_FLAG {
    D3D10_MAP_FLAG_DO_NOT_WAIT = 0x100000,
}}
ENUM!{enum D3D10_RAISE_FLAG {
    D3D10_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 0x1,
}}
ENUM!{enum D3D10_CLEAR_FLAG {
    D3D10_CLEAR_DEPTH = 0x1,
    D3D10_CLEAR_STENCIL = 0x2,
}}
pub type D3D10_RECT = RECT;
STRUCT!{struct D3D10_BOX {
    left: UINT,
    top: UINT,
    front: UINT,
    right: UINT,
    bottom: UINT,
    back: UINT,
}}
RIDL!{#[uuid(0x9b7e4c00, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10DeviceChild(ID3D10DeviceChildVtbl): IUnknown(IUnknownVtbl) {
    fn GetDevice(
        ppDevice: *mut *mut ID3D10Device,
    ) -> (),
    fn GetPrivateData(
        guid: REFGUID,
        pDataSize: *mut UINT,
        pData: *mut c_void,
    ) -> HRESULT,
    fn SetPrivateData(
        guid: REFGUID,
        DataSize: UINT,
        pData: *const c_void,
    ) -> HRESULT,
    fn SetPrivateDataInterface(
        guid: REFGUID,
        pData: *const IUnknown,
    ) -> HRESULT,
}}
ENUM!{enum D3D10_COMPARISON_FUNC {
    D3D10_COMPARISON_NEVER = 1,
    D3D10_COMPARISON_LESS = 2,
    D3D10_COMPARISON_EQUAL = 3,
    D3D10_COMPARISON_LESS_EQUAL = 4,
    D3D10_COMPARISON_GREATER = 5,
    D3D10_COMPARISON_NOT_EQUAL = 6,
    D3D10_COMPARISON_GREATER_EQUAL = 7,
    D3D10_COMPARISON_ALWAYS = 8,
}}
ENUM!{enum D3D10_DEPTH_WRITE_MASK {
    D3D10_DEPTH_WRITE_MASK_ZERO = 0,
    D3D10_DEPTH_WRITE_MASK_ALL = 1,
}}
ENUM!{enum D3D10_STENCIL_OP {
    D3D10_STENCIL_OP_KEEP = 1,
    D3D10_STENCIL_OP_ZERO = 2,
    D3D10_STENCIL_OP_REPLACE = 3,
    D3D10_STENCIL_OP_INCR_SAT = 4,
    D3D10_STENCIL_OP_DECR_SAT = 5,
    D3D10_STENCIL_OP_INVERT = 6,
    D3D10_STENCIL_OP_INCR = 7,
    D3D10_STENCIL_OP_DECR = 8,
}}
STRUCT!{struct D3D10_DEPTH_STENCILOP_DESC
{
    StencilFailOp: D3D10_STENCIL_OP,
    StencilDepthFailOp: D3D10_STENCIL_OP,
    StencilPassOp: D3D10_STENCIL_OP,
    StencilFunc: D3D10_COMPARISON_FUNC,
}}
STRUCT!{struct D3D10_DEPTH_STENCIL_DESC {
    DepthEnable: BOOL,
    DepthWriteMask: D3D10_DEPTH_WRITE_MASK,
    DepthFunc: D3D10_COMPARISON_FUNC,
    StencilEnable: BOOL,
    StencilReadMask: UINT8,
    StencilWriteMask: UINT8,
    FrontFace: D3D10_DEPTH_STENCILOP_DESC,
    BackFace: D3D10_DEPTH_STENCILOP_DESC,
}}
RIDL!{#[uuid(0x2b4b1cc8, 0xa4ad, 0x41f8, 0x83, 0x22, 0xca, 0x86, 0xfc, 0x3e, 0xc6, 0x75)]
interface ID3D10DepthStencilState(ID3D10DepthStencilStateVtbl):
    ID3D10DeviceChild(ID3D10DeviceChildVtbl) {
    fn GetDesc(
        pDesc: *mut D3D10_DEPTH_STENCIL_DESC,
    ) -> (),
}}
ENUM!{enum D3D10_BLEND {
    D3D10_BLEND_ZERO = 1,
    D3D10_BLEND_ONE = 2,
    D3D10_BLEND_SRC_COLOR = 3,
    D3D10_BLEND_INV_SRC_COLOR = 4,
    D3D10_BLEND_SRC_ALPHA = 5,
    D3D10_BLEND_INV_SRC_ALPHA = 6,
    D3D10_BLEND_DEST_ALPHA = 7,
    D3D10_BLEND_INV_DEST_ALPHA = 8,
    D3D10_BLEND_DEST_COLOR = 9,
    D3D10_BLEND_INV_DEST_COLOR = 10,
    D3D10_BLEND_SRC_ALPHA_SAT = 11,
    D3D10_BLEND_BLEND_FACTOR = 14,
    D3D10_BLEND_INV_BLEND_FACTOR = 15,
    D3D10_BLEND_SRC1_COLOR = 16,
    D3D10_BLEND_INV_SRC1_COLOR = 17,
    D3D10_BLEND_SRC1_ALPHA = 18,
    D3D10_BLEND_INV_SRC1_ALPHA = 19,
}}
ENUM!{enum D3D10_BLEND_OP {
    D3D10_BLEND_OP_ADD = 1,
    D3D10_BLEND_OP_SUBTRACT = 2,
    D3D10_BLEND_OP_REV_SUBTRACT = 3,
    D3D10_BLEND_OP_MIN = 4,
    D3D10_BLEND_OP_MAX = 5,
}}
ENUM!{enum D3D10_COLOR_WRITE_ENABLE {
    D3D10_COLOR_WRITE_ENABLE_RED = 1,
    D3D10_COLOR_WRITE_ENABLE_GREEN = 2,
    D3D10_COLOR_WRITE_ENABLE_BLUE = 4,
    D3D10_COLOR_WRITE_ENABLE_ALPHA = 8,
    D3D10_COLOR_WRITE_ENABLE_ALL = D3D10_COLOR_WRITE_ENABLE_RED | D3D10_COLOR_WRITE_ENABLE_GREEN
        | D3D10_COLOR_WRITE_ENABLE_BLUE | D3D10_COLOR_WRITE_ENABLE_ALPHA,
}}
STRUCT!{struct D3D10_BLEND_DESC {
    AlphaToCoverageEnable: BOOL,
    BlendEnable: [BOOL; 8],
    SrcBlend: D3D10_BLEND,
    DestBlend: D3D10_BLEND,
    BlendOp: D3D10_BLEND_OP,
    SrcBlendAlpha: D3D10_BLEND,
    DestBlendAlpha: D3D10_BLEND,
    BlendOpAlpha: D3D10_BLEND_OP,
    RenderTargetWriteMask: [UINT8; 8],
}}
RIDL!{#[uuid(0xedad8d19, 0x8a35, 0x4d6d, 0x85, 0x66, 0x2e, 0xa2, 0x76, 0xcd, 0xe1, 0x61)]
interface ID3D10BlendState(ID3D10BlendStateVtbl): ID3D10DeviceChild(ID3D10DeviceChildVtbl) {
    fn GetDesc(
        pDesc: *mut D3D10_BLEND_DESC,
    ) -> (),
}}
STRUCT!{struct D3D10_RASTERIZER_DESC {
    FillMode: D3D10_FILL_MODE,
    CullMode: D3D10_CULL_MODE,
    FrontCounterClockwise: BOOL,
    DepthBias: INT,
    DepthBiasClamp: FLOAT,
    SlopeScaledDepthBias: FLOAT,
    DepthClipEnable: BOOL,
    ScissorEnable: BOOL,
    MultisampleEnable: BOOL,
    AntialiasedLineEnable: BOOL,
}}
RIDL!{#[uuid(0xa2a07292, 0x89af, 0x4345, 0xbe, 0x2e, 0xc5, 0x3d, 0x9f, 0xbb, 0x6e, 0x9f)]
interface ID3D10RasterizerState(ID3D10RasterizerStateVtbl):
    ID3D10DeviceChild(ID3D10DeviceChildVtbl) {
    fn GetDesc(
        pDesc: *mut D3D10_RASTERIZER_DESC,
    ) -> (),
}}
STRUCT!{struct D3D10_SUBRESOURCE_DATA {
    pSysMem: *mut c_void,
    SysMemPitch: UINT,
    SysMemSlicePitch: UINT,
}}
RIDL!{#[uuid(0x9b7e4c01, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10Resource(ID3D10ResourceVtbl): ID3D10DeviceChild(ID3D10DeviceChildVtbl) {
    fn GetType(
        rType: *mut D3D10_RESOURCE_DIMENSION,
    ) -> (),
    fn SetEvictionPriority(
        EvictionPriority: UINT,
    ) -> (),
    fn GetEvictionPriority() -> UINT,
}}
STRUCT!{struct D3D10_BUFFER_DESC {
    ByteWidth: UINT,
    Usage: D3D10_USAGE,
    BindFlags: UINT,
    CPUAccessFlags: UINT,
    MiscFlags: UINT,
}}
RIDL!{#[uuid(0x9b7e4c02, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10Buffer(ID3D10BufferVtbl): ID3D10Resource(ID3D10ResourceVtbl) {
    fn Map(
        MapType: D3D10_MAP,
        MapFlags: UINT,
        ppData: *mut *mut c_void,
    ) -> HRESULT,
    fn Unmap() -> (),
    fn GetDesc(
        pDesc: *mut D3D10_BUFFER_DESC,
    ) -> (),
}}
STRUCT!{struct D3D10_TEXTURE1D_DESC {
    Width: UINT,
    MipLevels: UINT,
    ArraySize: UINT,
    Format: DXGI_FORMAT,
    Usage: D3D10_USAGE,
    BindFlags: UINT,
    CPUAccessFlags: UINT,
    MiscFlags: UINT,
}}
RIDL!{#[uuid(0x9b7e4c03, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10Texture1D(ID3D10Texture1DVtbl): ID3D10Resource(ID3D10ResourceVtbl) {
    fn Map(
        Subresource: UINT,
        MapType: D3D10_MAP,
        MapFlags: UINT,
        ppData: *mut *mut c_void,
    ) -> (),
    fn Unmap() -> (),
    fn GetDesc(
        pDesc: *mut D3D10_TEXTURE1D_DESC,
    ) -> (),
}}
STRUCT!{struct D3D10_TEXTURE2D_DESC  {
    Width: UINT,
    Height: UINT,
    ArraySize: UINT,
    Format: DXGI_FORMAT,
    SampleDesc: DXGI_SAMPLE_DESC,
    Usage: D3D10_USAGE,
    BindFlags: UINT,
    CPUAccessFlags: UINT,
    MiscFlags: UINT,
}}
STRUCT!{struct D3D10_MAPPED_TEXTURE2D {
    pData: *mut c_void,
    RowPitch: UINT,
}}
RIDL!{#[uuid(0x9b7e4c04, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10Texture2D(ID3D10Texture2DVtbl): ID3D10Resource(ID3D10ResourceVtbl) {
    fn Map(
        Subresource: UINT,
        MapType: D3D10_MAP,
        MapFlags: UINT,
        pMappedTex2D: *mut D3D10_MAPPED_TEXTURE2D,
    ) -> (),
    fn Unmap() -> (),
    fn GetDesc(
        pDesc: *mut D3D10_TEXTURE2D_DESC,
    ) -> (),
}}
STRUCT!{struct D3D10_TEXTURE3D_DESC {
    Width: UINT,
    Height: UINT,
    Depth: UINT,
    MipLevels: UINT,
    Format: DXGI_FORMAT,
    Usage: D3D10_USAGE,
    BindFlags: UINT,
    CPUAccessFlags: UINT,
    MiscFlags: UINT,
}}
STRUCT!{struct D3D10_MAPPED_TEXTURE3D {
    pData: *mut c_void,
    RowPitch: UINT,
    DepthPitch: UINT,
}}
RIDL!{#[uuid(0x9b7e4c05, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10Texture3D(ID3D10Texture3DVtbl): ID3D10Resource(ID3D10ResourceVtbl) {
    fn Map(
        Subresource: UINT,
        MapType: D3D10_MAP,
        MapFlags: UINT,
        pMappedTex3D: *mut D3D10_MAPPED_TEXTURE3D,
    ) -> (),
    fn Unmap() -> (),
    fn GetDesc(
        pDesc: *mut D3D10_TEXTURE3D_DESC,
    ) -> (),
}}
ENUM!{enum D3D10_TEXTURECUBE_FACE {
    D3D10_TEXTURECUBE_FACE_POSITIVE_X = 0,
    D3D10_TEXTURECUBE_FACE_NEGATIVE_X = 1,
    D3D10_TEXTURECUBE_FACE_POSITIVE_Y = 2,
    D3D10_TEXTURECUBE_FACE_NEGATIVE_Y = 3,
    D3D10_TEXTURECUBE_FACE_POSITIVE_Z = 4,
    D3D10_TEXTURECUBE_FACE_NEGATIVE_Z = 5,
}}
RIDL!{#[uuid(0xc902b03f, 0x60a7, 0x49ba, 0x99, 0x36, 0x2a, 0x3a, 0xb3, 0x7a, 0x7e, 0x33)]
interface ID3D10View(ID3D10ViewVtbl): ID3D10DeviceChild(ID3D10DeviceChildVtbl) {
    fn GetResource(
        ppResource: *mut *mut ID3D10Resource,
    ) -> (),
}}
UNION!{union D3D10_BUFFER_SRV_u1 {
    [u32; 1],
    FirstElement FirstElement_mut: UINT,
    ElementOffset ElementOffset_mut: UINT,
}}
UNION!{union D3D10_BUFFER_SRV_u2 {
    [u32; 1],
    NumElements NumElements_mut: UINT,
    ElementWidth ElementWidth_mut: UINT,
}}
STRUCT!{struct D3D10_BUFFER_SRV {
    u1: D3D10_BUFFER_SRV_u1,
    u2: D3D10_BUFFER_SRV_u2,
}}
STRUCT!{struct D3D10_TEX1D_SRV {
    MostDetailedMip: UINT,
    MipLevels: UINT,
}}
STRUCT!{struct D3D10_TEX1D_ARRAY_SRV {
    MostDetailedMip: UINT,
    MipLevels: UINT,
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}
STRUCT!{struct D3D10_TEX2D_SRV{
    MostDetailedMip: UINT,
    MipLevels: UINT,
}}
STRUCT!{struct D3D10_TEX2D_ARRAY_SRV{
    MostDetailedMip: UINT,
    MipLevels: UINT,
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}
STRUCT!{struct D3D10_TEX3D_SRV {
    MostDetailedMip: UINT,
    MipLevels: UINT,
}}
STRUCT!{struct D3D10_TEXCUBE_SRV {
    MostDetailedMip: UINT,
    MipLevels: UINT,
}}
STRUCT!{struct D3D10_TEX2DMS_SRV {
    UnusedField_NothingToDefine: UINT,
}}
STRUCT!{struct D3D10_TEX2DMS_ARRAY_SRV {
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}
UNION!{union D3D10_SHADER_RESOURCE_VIEW_DESC_u {
    [u32; 4],
    Buffer Buffer_mut: D3D10_BUFFER_SRV,
    Texture1D Texture1D_mut: D3D10_TEX1D_SRV,
    Texture1DArray Texture1DArray_mut: D3D10_TEX1D_ARRAY_SRV,
    Texture2D Texture2D_mut: D3D10_TEX2D_SRV,
    Texture2DArray Texture2DArray_mut: D3D10_TEX2D_ARRAY_SRV,
    Texture2DMS Texture2DMS_mut: D3D10_TEX2DMS_SRV,
    Texture2DMSArray Texture2DMSArray_mut: D3D10_TEX2DMS_ARRAY_SRV,
    Texture3D Texture3D_mut: D3D10_TEX3D_SRV,
    TextureCube TextureCube_mut: D3D10_TEXCUBE_SRV,
}}
STRUCT!{struct D3D10_SHADER_RESOURCE_VIEW_DESC {
    Format: DXGI_FORMAT,
    ViewDimension: D3D10_SRV_DIMENSION,
    u: D3D10_SHADER_RESOURCE_VIEW_DESC_u ,
}}
RIDL!{#[uuid(0x9b7e4c07, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10ShaderResourceView(ID3D10ShaderResourceViewVtbl): ID3D10View(ID3D10ViewVtbl) {
    fn GetDesc(
        pDesc: *mut D3D10_SHADER_RESOURCE_VIEW_DESC,
    ) -> (),
}}
UNION!{union D3D10_BUFFER_RTV_u1 {
    [u32; 1],
    FirstElement FirstElement_mut: UINT,
    ElementOffset ElementOffset_mut: UINT,
}}
UNION!{union D3D10_BUFFER_RTV_u2 {
    [u32; 1],
    NumElements NumElements_mut: UINT,
    ElementWidth ElementWidth_mut: UINT,
}}
STRUCT!{struct D3D10_BUFFER_RTV {
    u1: D3D10_BUFFER_RTV_u1,
    u2: D3D10_BUFFER_RTV_u2,
}}
STRUCT!{struct D3D10_TEX1D_RTV {
    MipSlice: UINT,
}}
STRUCT!{struct D3D10_TEX1D_ARRAY_RTV {
    MipSlice: UINT,
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}
STRUCT!{struct D3D10_TEX2D_RTV {
    MipSlice: UINT,
}}
STRUCT!{struct D3D10_TEX2DMS_RTV {
    UnusedField_NothingToDefine: UINT,
}}
STRUCT!{struct D3D10_TEX2D_ARRAY_RTV {
    MipSlice: UINT,
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}
STRUCT!{struct D3D10_TEX2DMS_ARRAY_RTV {
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}
STRUCT!{struct D3D10_TEX3D_RTV {
    MipSlice: UINT,
    FirstWSlice: UINT,
    WSize: UINT,
}}
UNION!{union D3D10_RENDER_TARGET_VIEW_DESC_u {
    [u32; 3],
    Buffer Buffer_mut: D3D10_BUFFER_RTV,
    Texture1D Texture1D_mut: D3D10_TEX1D_RTV,
    Texture1DArray Texture1DArray_mut: D3D10_TEX1D_ARRAY_RTV,
    Texture2D Texture2D_mut: D3D10_TEX2D_RTV,
    Texture2DArray Texture2DArray_mut: D3D10_TEX2D_ARRAY_RTV,
    Texture2DMS Texture2DMS_mut: D3D10_TEX2DMS_RTV,
    Texture2DMSArray Texture2DMSArray_mut: D3D10_TEX2DMS_ARRAY_RTV,
    Texture3D Texture3D_mut: D3D10_TEX3D_RTV,
}}
STRUCT!{struct D3D10_RENDER_TARGET_VIEW_DESC {
    Format: DXGI_FORMAT,
    ViewDimension: D3D10_RTV_DIMENSION,
    u: D3D10_RENDER_TARGET_VIEW_DESC_u,
}}
RIDL!{#[uuid(0x9b7e4c08, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10RenderTargetView(ID3D10RenderTargetViewVtbl): ID3D10View(ID3D10ViewVtbl) {
    fn GetDesc(
        pDesc: *mut D3D10_RENDER_TARGET_VIEW_DESC,
    ) -> (),
}}
STRUCT!{struct D3D10_TEX1D_DSV {
    MipSlice: UINT,
}}
STRUCT!{struct D3D10_TEX1D_ARRAY_DSV {
    MipSlice: UINT,
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}
STRUCT!{struct D3D10_TEX2D_DSV {
    MipSlice: UINT,
}}
STRUCT!{struct D3D10_TEX2D_ARRAY_DSV {
    MipSlice: UINT,
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}
STRUCT!{struct D3D10_TEX2DMS_DSV {
    UnusedField_NothingToDefine: UINT,
}}
STRUCT!{struct D3D10_TEX2DMS_ARRAY_DSV {
    FirstArraySlice: UINT,
    ArraySize: UINT,
}}
UNION!{union D3D10_DEPTH_STENCIL_VIEW_DESC_u {
    [u32; 3],
    Texture1D Texture1D_mut: D3D10_TEX1D_DSV,
    Texture1DArray Texture1DArray_mut: D3D10_TEX1D_ARRAY_DSV,
    Texture2D Texture2D_mut: D3D10_TEX2D_DSV,
    Texture2DArray Texture2DArray_mut: D3D10_TEX2D_ARRAY_DSV,
    Texture2DMS Texture2DMS_mut: D3D10_TEX2DMS_DSV,
    Texture2DMSArray Texture2DMSArray_mut: D3D10_TEX2DMS_ARRAY_DSV,
}}
STRUCT!{struct D3D10_DEPTH_STENCIL_VIEW_DESC {
    Format: DXGI_FORMAT,
    ViewDimension: D3D10_DSV_DIMENSION,
    u: D3D10_DEPTH_STENCIL_VIEW_DESC_u,
}}
RIDL!{#[uuid(0x9b7e4c09, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10DepthStencilView(ID3D10DepthStencilViewVtbl): ID3D10View(ID3D10ViewVtbl) {
    fn GetDesc(
        pDesc: *mut D3D10_DEPTH_STENCIL_VIEW_DESC,
    ) -> (),
}}
RIDL!{#[uuid(0x9b7e4c0a, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10VertexShader(ID3D10VertexShaderVtbl): ID3D10DeviceChild(ID3D10DeviceChildVtbl) {}}
RIDL!{#[uuid(0x6316be88, 0x54cd, 0x4040, 0xab, 0x44, 0x20, 0x46, 0x1b, 0xc8, 0x1f, 0x68)]
interface ID3D10GeometryShader(ID3D10GeometryShaderVtbl):
    ID3D10DeviceChild(ID3D10DeviceChildVtbl) {}}
RIDL!{#[uuid(0x4968b601, 0x9d00, 0x4cde, 0x83, 0x46, 0x8e, 0x7f, 0x67, 0x58, 0x19, 0xb6)]
interface ID3D10PixelShader(ID3D10PixelShaderVtbl): ID3D10DeviceChild(ID3D10DeviceChildVtbl) {}}
RIDL!{#[uuid(0x9b7e4c0b, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10InputLayout(ID3D10InputLayoutVtbl): ID3D10DeviceChild(ID3D10DeviceChildVtbl) {}}
ENUM!{enum D3D10_FILTER {
    D3D10_FILTER_MIN_MAG_MIP_POINT = 0,
    D3D10_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
    D3D10_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
    D3D10_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
    D3D10_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
    D3D10_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
    D3D10_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
    D3D10_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
    D3D10_FILTER_ANISOTROPIC = 0x55,
    D3D10_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
    D3D10_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
    D3D10_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
    D3D10_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
    D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
    D3D10_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
    D3D10_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
    D3D10_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
    D3D10_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
    D3D10_FILTER_TEXT_1BIT = 0x80000000,
}}
ENUM!{enum D3D10_FILTER_TYPE {
    D3D10_FILTER_TYPE_POINT = 0,
    D3D10_FILTER_TYPE_LINEAR = 1,
}}
pub const D3D10_FILTER_TYPE_MASK: DWORD = 0x3;
pub const D3D10_MIN_FILTER_SHIFT: DWORD = 4;
pub const D3D10_MAG_FILTER_SHIFT: DWORD = 2;
pub const D3D10_MIP_FILTER_SHIFT: DWORD = 0;
pub const D3D10_COMPARISON_FILTERING_BIT: DWORD = 0x80;
pub const D3D10_ANISOTROPIC_FILTERING_BIT: DWORD = 0x40;
pub const D3D10_TEXT_1BIT_BIT: DWORD = 0x80000000;
ENUM!{enum D3D10_TEXTURE_ADDRESS_MODE {
    D3D10_TEXTURE_ADDRESS_WRAP = 1,
    D3D10_TEXTURE_ADDRESS_MIRROR = 2,
    D3D10_TEXTURE_ADDRESS_CLAMP = 3,
    D3D10_TEXTURE_ADDRESS_BORDER = 4,
    D3D10_TEXTURE_ADDRESS_MIRROR_ONCE = 5,
}}
STRUCT!{struct D3D10_SAMPLER_DESC {
    Filter: D3D10_FILTER,
    AddressU: D3D10_TEXTURE_ADDRESS_MODE,
    AddressV: D3D10_TEXTURE_ADDRESS_MODE,
    AddressW: D3D10_TEXTURE_ADDRESS_MODE,
    MipLODBias: FLOAT,
    MaxAnisotropy: UINT,
    ComparisonFunc: D3D10_COMPARISON_FUNC,
    BorderColor: [FLOAT; 4],
    MinLOD: FLOAT,
    MaxLOD: FLOAT,
}}
RIDL!{#[uuid(0x9b7e4c0c, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10SamplerState(ID3D10SamplerStateVtbl): ID3D10DeviceChild(ID3D10DeviceChildVtbl) {
    fn GetDesc(
        pDesc: *mut D3D10_SAMPLER_DESC,
    ) -> (),
}}
ENUM!{enum D3D10_FORMAT_SUPPORT {
    D3D10_FORMAT_SUPPORT_BUFFER = 0x1,
    D3D10_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 0x2,
    D3D10_FORMAT_SUPPORT_IA_INDEX_BUFFER = 0x4,
    D3D10_FORMAT_SUPPORT_SO_BUFFER = 0x8,
    D3D10_FORMAT_SUPPORT_TEXTURE1D = 0x10,
    D3D10_FORMAT_SUPPORT_TEXTURE2D = 0x20,
    D3D10_FORMAT_SUPPORT_TEXTURE3D = 0x40,
    D3D10_FORMAT_SUPPORT_TEXTURECUBE = 0x80,
    D3D10_FORMAT_SUPPORT_SHADER_LOAD = 0x100,
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE = 0x200,
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 0x400,
    D3D10_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 0x800,
    D3D10_FORMAT_SUPPORT_MIP = 0x1000,
    D3D10_FORMAT_SUPPORT_MIP_AUTOGEN = 0x2000,
    D3D10_FORMAT_SUPPORT_RENDER_TARGET = 0x4000,
    D3D10_FORMAT_SUPPORT_BLENDABLE = 0x8000,
    D3D10_FORMAT_SUPPORT_DEPTH_STENCIL = 0x10000,
    D3D10_FORMAT_SUPPORT_CPU_LOCKABLE = 0x20000,
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 0x40000,
    D3D10_FORMAT_SUPPORT_DISPLAY = 0x80000,
    D3D10_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 0x100000,
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 0x200000,
    D3D10_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 0x400000,
    D3D10_FORMAT_SUPPORT_SHADER_GATHER = 0x800000,
    D3D10_FORMAT_SUPPORT_BACK_BUFFER_CAST = 0x1000000,
}}
RIDL!{#[uuid(0x9b7e4c0d, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10Asynchronous(ID3D10AsynchronousVtbl): ID3D10DeviceChild(ID3D10DeviceChildVtbl) {
    fn Begin() -> (),
    fn End() -> (),
    fn GetData(
        pData: *mut c_void,
        DataSize: UINT,
        GetDataFlags: UINT,
    ) -> HRESULT,
    fn GetDataSize() -> UINT,
}}
ENUM!{enum D3D10_ASYNC_GETDATA_FLAG {
    D3D10_ASYNC_GETDATA_DONOTFLUSH = 0x1,
}}
ENUM!{enum D3D10_QUERY {
    D3D10_QUERY_EVENT = 0,
    D3D10_QUERY_OCCLUSION = D3D10_QUERY_EVENT + 1,
    D3D10_QUERY_TIMESTAMP = D3D10_QUERY_OCCLUSION + 1,
    D3D10_QUERY_TIMESTAMP_DISJOINT = D3D10_QUERY_TIMESTAMP + 1,
    D3D10_QUERY_PIPELINE_STATISTICS = D3D10_QUERY_TIMESTAMP_DISJOINT + 1,
    D3D10_QUERY_OCCLUSION_PREDICATE = D3D10_QUERY_PIPELINE_STATISTICS + 1,
    D3D10_QUERY_SO_STATISTICS = D3D10_QUERY_OCCLUSION_PREDICATE + 1,
    D3D10_QUERY_SO_OVERFLOW_PREDICATE = D3D10_QUERY_SO_STATISTICS + 1,
}}
ENUM!{enum D3D10_QUERY_MISC_FLAG {
    D3D10_QUERY_MISC_PREDICATEHINT = 0x1,
}}
STRUCT!{struct D3D10_QUERY_DESC {
    Query: D3D10_QUERY,
    MiscFlags: UINT,
}}
RIDL!{#[uuid(0x9b7e4c0e, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10Query(ID3D10QueryVtbl): ID3D10Asynchronous(ID3D10AsynchronousVtbl) {
    fn GetDesc(
        pDesc: *mut D3D10_QUERY_DESC,
    ) -> (),
}}
RIDL!{#[uuid(0x9b7e4c10, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10Predicate(ID3D10PredicateVtbl): ID3D10Query(ID3D10QueryVtbl) {}}
STRUCT!{struct D3D10_QUERY_DATA_TIMESTAMP_DISJOINT {
    Frequency: UINT64,
    Disjoint: BOOL,
}}
STRUCT!{struct D3D10_QUERY_DATA_PIPELINE_STATISTICS {
    IAVertices: UINT64,
    IAPrimitives: UINT64,
    VSInvocations: UINT64,
    GSInvocations: UINT64,
    GSPrimitives: UINT64,
    CInvocations: UINT64,
    CPrimitives: UINT64,
    PSInvocations: UINT64,
}}
STRUCT!{struct D3D10_QUERY_DATA_SO_STATISTICS {
    NumPrimitivesWritten: UINT64,
    PrimitivesStorageNeeded: UINT64,
}}
ENUM!{enum D3D10_COUNTER {
    D3D10_COUNTER_GPU_IDLE,
    D3D10_COUNTER_VERTEX_PROCESSING,
    D3D10_COUNTER_GEOMETRY_PROCESSING,
    D3D10_COUNTER_PIXEL_PROCESSING,
    D3D10_COUNTER_OTHER_GPU_PROCESSING,
    D3D10_COUNTER_HOST_ADAPTER_BANDWIDTH_UTILIZATION,
    D3D10_COUNTER_LOCAL_VIDMEM_BANDWIDTH_UTILIZATION,
    D3D10_COUNTER_VERTEX_THROUGHPUT_UTILIZATION,
    D3D10_COUNTER_TRIANGLE_SETUP_THROUGHPUT_UTILIZATION,
    D3D10_COUNTER_FILLRATE_THROUGHPUT_UTILIZATION,
    D3D10_COUNTER_VS_MEMORY_LIMITED,
    D3D10_COUNTER_VS_COMPUTATION_LIMITED,
    D3D10_COUNTER_GS_MEMORY_LIMITED,
    D3D10_COUNTER_GS_COMPUTATION_LIMITED,
    D3D10_COUNTER_PS_MEMORY_LIMITED,
    D3D10_COUNTER_PS_COMPUTATION_LIMITED,
    D3D10_COUNTER_POST_TRANSFORM_CACHE_HIT_RATE,
    D3D10_COUNTER_TEXTURE_CACHE_HIT_RATE,
    D3D10_COUNTER_DEVICE_DEPENDENT_0,
}}
ENUM!{enum D3D10_COUNTER_TYPE {
    D3D10_COUNTER_TYPE_FLOAT32 = 0,
    D3D10_COUNTER_TYPE_UINT16 = D3D10_COUNTER_TYPE_FLOAT32 + 1,
    D3D10_COUNTER_TYPE_UINT32 = D3D10_COUNTER_TYPE_UINT16 + 1,
    D3D10_COUNTER_TYPE_UINT64 = D3D10_COUNTER_TYPE_UINT32 + 1,
}}
STRUCT!{struct D3D10_COUNTER_DESC {
    Counter: D3D10_COUNTER,
    MiscFlags: UINT,
}}
STRUCT!{struct D3D10_COUNTER_INFO {
    LastDeviceDependentCounter: D3D10_COUNTER,
    NumSimultaneousCounters: UINT,
    NumDetectableParallelUnits: UINT8,
}}
RIDL!{#[uuid(0x9b7e4c11, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10Counter(ID3D10CounterVtbl): ID3D10Asynchronous(ID3D10AsynchronousVtbl) {
    fn GetDesc(
        pDesc: *mut D3D10_COUNTER_DESC,
    ) -> (),
}}
RIDL!{#[uuid(0x9b7e4c0f, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10Device(ID3D10DeviceVtbl): IUnknown(IUnknownVtbl) {
    fn VSSetConstantBuffers(
        StartSlot: UINT,
        NumBuffers: UINT,
        ppConstantBuffers: *const *mut ID3D10Buffer,
    ) -> (),
    fn PSSetShaderResources(
        StartSlot: UINT,
        NumViews: UINT,
        ppShaderResourceViews: *const *mut ID3D10ShaderResourceView,
    ) -> (),
    fn PSSetShader(
        pPixelShader: *mut ID3D10PixelShader,
    ) -> (),
    fn PSSetSamplers(
        StartSlot: UINT,
        NumSamplers: UINT,
        ppSamplers: *const *mut ID3D10SamplerState,
    ) -> (),
    fn VSSetShader(
        pVertexShader: *mut ID3D10VertexShader,
    ) -> (),
    fn DrawIndexed(
        IndexCount: UINT,
        StartIndexLocation: UINT,
        BaseVertexLocation: INT,
    ) -> (),
    fn Draw(
        VertexCount: UINT,
        StartVertexLocation: UINT,
    ) -> (),
    fn PSSetConstantBuffers(
        StartSlot: UINT,
        NumBuffers: UINT,
        ppConstantBuffers: *const *mut ID3D10Buffer,
    ) -> (),
    fn IASetInputLayout(
        pInputLayout: *mut ID3D10InputLayout,
    ) -> (),
    fn IASetVertexBuffers(
        StartSlot: UINT,
        NumBuffers: UINT,
        ppVertexBuffers: *const *mut ID3D10Buffer,
        pStrides: *const UINT,
        pOffsets: *const UINT,
    ) -> (),
    fn IASetIndexBuffer(
        pIndexBuffer: *mut ID3D10Buffer,
        Format: DXGI_FORMAT,
        Offset: UINT,
    ) -> (),
    fn DrawIndexedInstanced(
        IndexCountPerInstance: UINT,
        InstanceCount: UINT,
        StartIndexLocation: UINT,
        BaseVertexLocation: INT,
        StartInstanceLocation: UINT,
    ) -> (),
    fn DrawInstanced(
        VertexCountPerInstance: UINT,
        InstanceCount: UINT,
        StartVertexLocation: UINT,
        StartInstanceLocation: UINT,
    ) -> (),
    fn GSSetConstantBuffers(
        StartSlot: UINT,
        NumBuffers: UINT,
        ppConstantBuffers: *const *mut ID3D10Buffer,
    ) -> (),
    fn GSSetShader(
        pShader: *mut ID3D10GeometryShader,
    ) -> (),
    fn IASetPrimitiveTopology(
        Topology: D3D10_PRIMITIVE_TOPOLOGY,
    ) -> (),
    fn VSSetShaderResources(
        StartSlot: UINT,
        NumViews: UINT,
        ppShaderResourceViews: *const *mut ID3D10ShaderResourceView,
    ) -> (),
    fn VSSetSamplers(
        StartSlot: UINT,
        NumSamplers: UINT,
        ppSamplers: *const *mut ID3D10SamplerState,
    ) -> (),
    fn SetPredication(
        pPredicate: *mut ID3D10Predicate,
        PredicateValue: BOOL,
    ) -> (),
    fn GSSetShaderResources(
        StartSlot: UINT,
        NumViews: UINT,
        ppShaderResourceViews: *const *mut ID3D10ShaderResourceView,
    ) -> (),
    fn GSSetSamplers(
        StartSlot: UINT,
        NumSamplers: UINT,
        ppSamplers: *const *mut ID3D10SamplerState,
    ) -> (),
    fn OMSetRenderTargets(
        NumViews: UINT,
        ppRenderTargetViews: *const *mut ID3D10RenderTargetView,
        pDepthStencilView: *mut ID3D10DepthStencilView,
    ) -> (),
    fn OMSetBlendState(
        pBlendState: *mut ID3D10BlendState,
        BlendFactor: &[FLOAT; 4],
        SampleMask: UINT,
    ) -> (),
    fn OMSetDepthStencilState(
        pDepthStencilState: *mut ID3D10DepthStencilState,
        StencilRef: UINT,
    ) -> (),
    fn SOSetTargets(
        NumBuffers: UINT,
        ppSOTargets: *const *mut ID3D10Buffer,
        pOffsets: *const UINT,
    ) -> (),
    fn DrawAuto() -> (),
    fn RSSetState(
        pRasterizerState: *mut ID3D10RasterizerState,
    ) -> (),
    fn RSSetViewports(
        NumViewports: UINT,
        pViewports: *const D3D10_VIEWPORT,
    ) -> (),
    fn RSSetScissorRects(
        NumRects: UINT,
        pRects: *const D3D10_RECT,
    ) -> (),
    fn CopySubresourceRegion(
        pDstResource: *mut ID3D10Resource,
        DstSubresource: UINT,
        DstX: UINT,
        DstY: UINT,
        DstZ: UINT,
        pSrcResource: *mut ID3D10Resource,
        SrcSubresource: UINT,
        pSrcBox: *const D3D10_BOX,
    ) -> (),
    fn CopyResource(
        pDstResource: *mut ID3D10Resource,
        pSrcResource: *mut ID3D10Resource,
    ) -> (),
    fn UpdateSubresource(
        pDstResource: *mut ID3D10Resource,
        DstSubresource: UINT,
        pDstBox: *const D3D10_BOX,
        pSrcData: *const c_void,
        SrcRowPitch: UINT,
        SrcDepthPitch: UINT,
    ) -> (),
    fn ClearRenderTargetView(
        pRenderTargetView: *mut ID3D10RenderTargetView,
        ColorRGBA: &[FLOAT; 4],
    ) -> (),
    fn ClearDepthStencilView(
        pDepthStencilView: *mut ID3D10DepthStencilView,
        ClearFlags: UINT,
        Depth: FLOAT,
        Stencil: UINT8,
    ) -> (),
    fn GenerateMips(
        pShaderResourceView: *mut ID3D10ShaderResourceView,
    ) -> (),
    fn ResolveSubresource(
        pDstResource: *mut ID3D10Resource,
        DstSubresource: UINT,
        pSrcResource: *mut ID3D10Resource,
        SrcSubresource: UINT,
        Format: DXGI_FORMAT,
    ) -> (),
    fn VSGetConstantBuffers(
        StartSlot: UINT,
        NumBuffers: UINT,
        ppConstantBuffers: *mut *mut ID3D10Buffer,
    ) -> (),
    fn PSGetShaderResources(
        StartSlot: UINT,
        NumViews: UINT,
        ppShaderResourceViews: *mut *mut ID3D10ShaderResourceView,
    ) -> (),
    fn PSGetShader(
        ppPixelShader: *mut *mut ID3D10PixelShader,
    ) -> (),
    fn PSGetSamplers(
        StartSlot: UINT,
        NumSamplers: UINT,
        ppSamplers: *mut *mut ID3D10SamplerState,
    ) -> (),
    fn VSGetShader(
        ppVertexShader: *mut *mut ID3D10VertexShader,
    ) -> (),
    fn PSGetConstantBuffers(
        StartSlot: UINT,
        NumBuffers: UINT,
        ppConstantBuffers: *mut *mut ID3D10Buffer,
    ) -> (),
    fn IAGetInputLayout(
        ppInputLayout: *mut *mut ID3D10InputLayout,
    ) -> (),
    fn IAGetVertexBuffers(
        StartSlot: UINT,
        NumBuffers: UINT,
        ppVertexBuffers: *mut *mut ID3D10Buffer,
        pStrides: *mut UINT,
        pOffsets: *mut UINT,
    ) -> (),
    fn IAGetIndexBuffer(
        pIndexBuffer: *mut *mut ID3D10Buffer,
        Format: *mut DXGI_FORMAT,
        Offset: *mut UINT,
    ) -> (),
    fn GSGetConstantBuffers(
        StartSlot: UINT,
        NumBuffers: UINT,
        ppConstantBuffers: *mut *mut ID3D10Buffer,
    ) -> (),
    fn GSGetShader(
        ppGeometryShader: *mut *mut ID3D10GeometryShader,
    ) -> (),
    fn IAGetPrimitiveTopology(
        pTopology: *mut D3D10_PRIMITIVE_TOPOLOGY,
    ) -> (),
    fn VSGetShaderResources(
        StartSlot: UINT,
        NumViews: UINT,
        ppShaderResourceViews: *mut *mut ID3D10ShaderResourceView,
    ) -> (),
    fn VSGetSamplers(
        StartSlot: UINT,
        NumSamplers: UINT,
        ppSamplers: *mut *mut ID3D10SamplerState,
    ) -> (),
    fn GetPredication(
        ppPredicate: *mut *mut ID3D10Predicate,
        pPredicateValue: *mut BOOL,
    ) -> (),
    fn GSGetShaderResources(
        StartSlot: UINT,
        NumViews: UINT,
        ppShaderResourceViews: *mut *mut ID3D10ShaderResourceView,
    ) -> (),
    fn GSGetSamplers(
        StartSlot: UINT,
        NumSamplers: UINT,
        ppSamplers: *mut *mut ID3D10SamplerState,
    ) -> (),
    fn OMGetRenderTargets(
        NumViews: UINT,
        ppRenderTargetViews: *mut *mut ID3D10RenderTargetView,
        ppDepthStencilView: *mut *mut ID3D10DepthStencilView,
    ) -> (),
    fn OMGetBlendState(
        ppBlendState: *mut *mut ID3D10BlendState,
        BlendFactor: &mut [FLOAT; 4],
        pSampleMask: *mut UINT,
    ) -> (),
    fn OMGetDepthStencilState(
        ppDepthStencilState: *mut *mut ID3D10DepthStencilState,
        pStencilRef: *mut UINT,
    ) -> (),
    fn SOGetTargets(
        NumBuffers: UINT,
        ppSOTargets: *mut *mut ID3D10Buffer,
    ) -> (),
    fn RSGetState(
        ppRasterizerState: *mut *mut ID3D10RasterizerState,
    ) -> (),
    fn RSGetViewports(
        pNumViewports: *mut UINT,
        pViewports: *mut D3D10_VIEWPORT,
    ) -> (),
    fn RSGetScissorRects(
        pNumRects: *mut UINT,
        pRects: *mut D3D10_RECT,
    ) -> (),
    fn GetDeviceRemovedReason() -> HRESULT,
    fn SetExceptionMode(
        RaiseFlags: UINT,
    ) -> HRESULT,
    fn GetExceptionMode() -> UINT,
    fn GetPrivateData(
        guid: REFGUID,
        pDataSize: *mut UINT,
        pData: *mut c_void,
    ) -> HRESULT,
    fn SetPrivateData(
        guid: REFGUID,
        DataSize: UINT,
        pData: *const c_void,
    ) -> HRESULT,
    fn SetPrivateDataInterface(
        guid: REFGUID,
        pData: *const IUnknown,
    ) -> HRESULT,
    fn ClearState() -> (),
    fn Flush() -> (),
    fn CreateBuffer(
        pDesc: *const D3D10_BUFFER_DESC,
        pInitialData: *const D3D10_SUBRESOURCE_DATA,
        ppBuffer: *mut *mut ID3D10Buffer,
    ) -> HRESULT,
    fn CreateTexture1D(
        pDesc: *const D3D10_TEXTURE1D_DESC,
        pInitialData: *const D3D10_SUBRESOURCE_DATA,
        ppTexture1D: *mut *mut ID3D10Texture1D,
    ) -> HRESULT,
    fn CreateTexture2D(
        pDesc: *const D3D10_TEXTURE2D_DESC,
        pInitialData: *const D3D10_SUBRESOURCE_DATA,
        ppTexture2D: *mut *mut ID3D10Texture2D,
    ) -> HRESULT,
    fn CreateTexture3D(
        pDesc: *const D3D10_TEXTURE3D_DESC,
        pInitialData: *const D3D10_SUBRESOURCE_DATA,
        ppTexture3D: *mut *mut ID3D10Texture3D,
    ) -> HRESULT,
    fn CreateShaderResourceView(
        pResource: *mut ID3D10Resource,
        pDesc: *const D3D10_SHADER_RESOURCE_VIEW_DESC,
        ppSRView: *mut *mut ID3D10ShaderResourceView,
    ) -> HRESULT,
    fn CreateRenderTargetView(
        pResource: *mut ID3D10Resource,
        pDesc: *const D3D10_RENDER_TARGET_VIEW_DESC,
        ppRTView: *mut *mut ID3D10RenderTargetView,
    ) -> HRESULT,
    fn CreateDepthStencilView(
        pResource: *mut ID3D10Resource,
        pDesc: *const D3D10_DEPTH_STENCIL_VIEW_DESC,
        ppDepthStencilView: *mut *mut ID3D10DepthStencilView,
    ) -> HRESULT,
    fn CreateInputLayout(
        pInputElementDescs: *const D3D10_INPUT_ELEMENT_DESC,
        NumElements: UINT,
        pShaderBytecodeWithInputSignature: *const c_void,
        BytecodeLength: SIZE_T,
        ppInputLayout: *mut *mut ID3D10InputLayout,
    ) -> HRESULT,
    fn CreateVertexShader(
        pShaderBytecode: *const c_void,
        BytecodeLength: SIZE_T,
        ppVertexShader: *mut *mut ID3D10VertexShader,
    ) -> HRESULT,
    fn CreateGeometryShader(
        pShaderBytecode: *const c_void,
        BytecodeLength: SIZE_T,
        ppGeometryShader: *mut *mut ID3D10GeometryShader,
    ) -> HRESULT,
    fn CreateGeometryShaderWithStreamOutput(
        pShaderBytecode: *const c_void,
        BytecodeLength: SIZE_T,
        pSODeclaration: *const D3D10_SO_DECLARATION_ENTRY,
        NumEntries: UINT,
        OutputStreamStride: UINT,
        ppGeometryShader: *mut *mut ID3D10GeometryShader,
    ) -> HRESULT,
    fn CreatePixelShader(
        pShaderBytecode: *const c_void,
        BytecodeLength: SIZE_T,
        ppPixelShader: *mut *mut ID3D10PixelShader,
    ) -> HRESULT,
    fn CreateBlendState(
        pBlendStateDesc: *const D3D10_BLEND_DESC,
        ppBlendState: *mut *mut ID3D10BlendState,
    ) -> HRESULT,
    fn CreateDepthStencilState(
        pDepthStencilDesc: *const D3D10_DEPTH_STENCIL_DESC,
        ppDepthStencilState: *mut *mut ID3D10DepthStencilState,
    ) -> HRESULT,
    fn CreateRasterizerState(
        pRasterizerDesc: *const D3D10_RASTERIZER_DESC,
        ppRasterizerState: *mut *mut ID3D10RasterizerState,
    ) -> HRESULT,
    fn CreateSamplerState(
        pSamplerDesc: *const D3D10_SAMPLER_DESC,
        ppSamplerState: *mut *mut ID3D10SamplerState,
    ) -> HRESULT,
    fn CreateQuery(
        pQueryDesc: *const D3D10_QUERY_DESC,
        ppQuery: *mut *mut ID3D10Query,
    ) -> HRESULT,
    fn CreatePredicate(
        pPredicateDesc: *const D3D10_QUERY_DESC,
        ppPredicate: *mut *mut ID3D10Predicate,
    ) -> HRESULT,
    fn CreateCounter(
        pCounterDesc: *const D3D10_COUNTER_DESC,
        ppCounter: *mut *mut ID3D10Counter,
    ) -> HRESULT,
    fn CheckFormatSupport(
        Format: DXGI_FORMAT,
        pFormatSupport: *mut UINT,
    ) -> HRESULT,
    fn CheckMultisampleQualityLevels(
        Format: DXGI_FORMAT,
        SampleCount: UINT,
        pNumQualityLevels: *mut UINT,
    ) -> HRESULT,
    fn CheckCounterInfo(
        pCounterInfo: *mut D3D10_COUNTER_INFO,
    ) -> (),
    fn CheckCounter(
        pDesc: *const D3D10_COUNTER_DESC,
        pType: *mut D3D10_COUNTER_TYPE,
        pActiveCounters: *mut UINT,
        szName: LPSTR,
        pNameLength: *mut UINT,
        szUnits: LPSTR,
        pUnitsLength: *mut UINT,
        szDescription: LPSTR,
        pDescriptionLength: *mut UINT,
    ) -> HRESULT,
    fn GetCreationFlags() -> UINT,
    fn OpenSharedResource(
        hResource: HANDLE,
        ReturnedInterface: REFIID,
        ppResource: *mut *mut c_void,
    ) -> HRESULT,
    fn SetTextFilterSize(
        Width: UINT,
        Height: UINT,
    ) -> (),
    fn GetTextFilterSize(
        pWidth: *mut UINT,
        pHeight: *mut UINT,
    ) -> (),
}}
RIDL!{#[uuid(0x9b7e4e00, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0)]
interface ID3D10Multithread(ID3D10MultithreadVtbl): IUnknown(IUnknownVtbl) {
    fn Enter() -> (),
    fn Leave() -> (),
    fn SetMultithreadProtected(
        bMTProtect: BOOL,
    ) -> BOOL,
    fn GetMultithreadProtected() -> BOOL,
}}
ENUM!{enum D3D10_CREATE_DEVICE_FLAG {
    D3D10_CREATE_DEVICE_SINGLETHREADED = 0x1,
    D3D10_CREATE_DEVICE_DEBUG = 0x2,
    D3D10_CREATE_DEVICE_SWITCH_TO_REF = 0x4,
    D3D10_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x8,
    D3D10_CREATE_DEVICE_ALLOW_NULL_FROM_MAP = 0x10,
    D3D10_CREATE_DEVICE_BGRA_SUPPORT = 0x20,
    D3D10_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 0x80,
    D3D10_CREATE_DEVICE_STRICT_VALIDATION = 0x200,
    D3D10_CREATE_DEVICE_DEBUGGABLE = 0x400,
}}
pub const D3D10_SDK_VERSION: DWORD = 29;
#[inline]
pub fn D3D10CalcSubresource(MipSlice: UINT, ArraySlice: UINT, MipLevels: UINT) -> UINT {
    MipSlice + ArraySlice * MipLevels
}
DEFINE_GUID!{IID_ID3D10DeviceChild,
    0x9b7e4c00, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10DepthStencilState,
    0x2b4b1cc8, 0xa4ad, 0x41f8, 0x83, 0x22, 0xca, 0x86, 0xfc, 0x3e, 0xc6, 0x75}
DEFINE_GUID!{IID_ID3D10BlendState,
    0xedad8d19, 0x8a35, 0x4d6d, 0x85, 0x66, 0x2e, 0xa2, 0x76, 0xcd, 0xe1, 0x61}
DEFINE_GUID!{IID_ID3D10RasterizerState,
    0xa2a07292, 0x89af, 0x4345, 0xbe, 0x2e, 0xc5, 0x3d, 0x9f, 0xbb, 0x6e, 0x9f}
DEFINE_GUID!{IID_ID3D10Resource,
    0x9b7e4c01, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10Buffer,
    0x9b7e4c02, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10Texture1D,
    0x9b7e4c03, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10Texture2D,
    0x9b7e4c04, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10Texture3D,
    0x9b7e4c05, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10View,
    0xc902b03f, 0x60a7, 0x49ba, 0x99, 0x36, 0x2a, 0x3a, 0xb3, 0x7a, 0x7e, 0x33}
DEFINE_GUID!{IID_ID3D10ShaderResourceView,
    0x9b7e4c07, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10RenderTargetView,
    0x9b7e4c08, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10DepthStencilView,
    0x9b7e4c09, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10VertexShader,
    0x9b7e4c0a, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10GeometryShader,
    0x6316be88, 0x54cd, 0x4040, 0xab, 0x44, 0x20, 0x46, 0x1b, 0xc8, 0x1f, 0x68}
DEFINE_GUID!{IID_ID3D10PixelShader,
    0x4968b601, 0x9d00, 0x4cde, 0x83, 0x46, 0x8e, 0x7f, 0x67, 0x58, 0x19, 0xb6}
DEFINE_GUID!{IID_ID3D10InputLayout,
    0x9b7e4c0b, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10SamplerState,
    0x9b7e4c0c, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10Asynchronous,
    0x9b7e4c0d, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10Query,
    0x9b7e4c0e, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10Predicate,
    0x9b7e4c10, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10Counter,
    0x9b7e4c11, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10Device,
    0x9b7e4c0f, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}
DEFINE_GUID!{IID_ID3D10Multithread,
    0x9b7e4e00, 0x342c, 0x4106, 0xa1, 0x9f, 0x4f, 0x27, 0x04, 0xf6, 0x89, 0xf0}

// Licensed under the Apache License, Version 2.0
// <LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your option.
// All files in the project carrying such notice may not be copied, modified, or distributed
// except according to those terms.
//! this ALWAYS GENERATED file contains the definitions for the interfaces
use ctypes::{c_char, c_int};
use shared::guiddef::GUID;
use shared::minwindef::{BYTE, DWORD, UINT, USHORT};
use shared::wtypes::PROPERTYKEY;
use shared::wtypesbase::BYTE_BLOB;
use um::winnt::{LPCWSTR, LPWSTR};
STRUCT!{#[repr(packed)] struct SHITEMID {
    cb: USHORT,
    abID: [BYTE; 1],
}}
pub type LPSHITEMID = *mut SHITEMID;
pub type LPCSHITEMID = *const SHITEMID;
STRUCT!{#[repr(packed)] struct ITEMIDLIST {
    mkid: SHITEMID,
}}
pub type ITEMIDLIST_RELATIVE = ITEMIDLIST;
pub type ITEMID_CHILD = ITEMIDLIST;
pub type ITEMIDLIST_ABSOLUTE = ITEMIDLIST;
pub type wirePIDL = *mut BYTE_BLOB;
pub type LPITEMIDLIST = *mut ITEMIDLIST;
pub type LPCITEMIDLIST = *const ITEMIDLIST;
pub type PIDLIST_ABSOLUTE = *mut ITEMIDLIST_ABSOLUTE;
pub type PCIDLIST_ABSOLUTE = *const ITEMIDLIST_ABSOLUTE;
pub type PCUIDLIST_ABSOLUTE = *const ITEMIDLIST_ABSOLUTE;
pub type PIDLIST_RELATIVE = *mut ITEMIDLIST_RELATIVE;
pub type PCIDLIST_RELATIVE = *const ITEMIDLIST_RELATIVE;
pub type PUIDLIST_RELATIVE = *mut ITEMIDLIST_RELATIVE;
pub type PCUIDLIST_RELATIVE = *const ITEMIDLIST_RELATIVE;
pub type PITEMID_CHILD = *mut ITEMID_CHILD;
pub type PCITEMID_CHILD = *const ITEMID_CHILD;
pub type PUITEMID_CHILD = *mut ITEMID_CHILD;
pub type PCUITEMID_CHILD = *const ITEMID_CHILD;
pub type PCUITEMID_CHILD_ARRAY = *const PCUITEMID_CHILD;
pub type PCUIDLIST_RELATIVE_ARRAY = *const PCUIDLIST_RELATIVE;
pub type PCIDLIST_ABSOLUTE_ARRAY = *const PCIDLIST_ABSOLUTE;
pub type PCUIDLIST_ABSOLUTE_ARRAY = *const PCUIDLIST_ABSOLUTE;
ENUM!{enum STRRET_TYPE {
    STRRET_WSTR = 0,
    STRRET_OFFSET = 0x1,
    STRRET_CSTR = 0x2,
}}
UNION!{union STRRET_u {
    [u32; 65] [u64; 33],
    pOleStr pOleStr_mut: LPWSTR,
    uOffset uOffset_mut: UINT,
    cStr cStr_mut: [c_char; 260],
}}
STRUCT!{struct STRRET {
    uType: UINT,
    u: STRRET_u,
}}
pub type LPSTRRET = *mut STRRET;
STRUCT!{#[repr(packed)] struct SHELLDETAILS {
    fmt: c_int,
    cxChar: c_int,
    str: STRRET,
}}
pub type LPSHELLDETAILS = *mut SHELLDETAILS;
ENUM!{enum PERCEIVED {
    PERCEIVED_TYPE_FIRST = -3i32 as u32,
    PERCEIVED_TYPE_CUSTOM = -3i32 as u32,
    PERCEIVED_TYPE_UNSPECIFIED = -2i32 as u32,
    PERCEIVED_TYPE_FOLDER = -1i32 as u32,
    PERCEIVED_TYPE_UNKNOWN = 0,
    PERCEIVED_TYPE_TEXT = 1,
    PERCEIVED_TYPE_IMAGE = 2,
    PERCEIVED_TYPE_AUDIO = 3,
    PERCEIVED_TYPE_VIDEO = 4,
    PERCEIVED_TYPE_COMPRESSED = 5,
    PERCEIVED_TYPE_DOCUMENT = 6,
    PERCEIVED_TYPE_SYSTEM = 7,
    PERCEIVED_TYPE_APPLICATION = 8,
    PERCEIVED_TYPE_GAMEMEDIA = 9,
    PERCEIVED_TYPE_CONTACTS = 10,
    PERCEIVED_TYPE_LAST = 10,
}}
pub const PERCEIVEDFLAG_UNDEFINED: DWORD = 0x0000;
pub const PERCEIVEDFLAG_SOFTCODED: DWORD = 0x0001;
pub const PERCEIVEDFLAG_HARDCODED: DWORD = 0x0002;
pub const PERCEIVEDFLAG_NATIVESUPPORT: DWORD = 0x0004;
pub const PERCEIVEDFLAG_GDIPLUS: DWORD = 0x0010;
pub const PERCEIVEDFLAG_WMSDK: DWORD = 0x0020;
pub const PERCEIVEDFLAG_ZIPFOLDER: DWORD = 0x0040;
pub type PERCEIVEDFLAG = DWORD;
STRUCT!{struct COMDLG_FILTERSPEC {
    pszName: LPCWSTR,
    pszSpec: LPCWSTR,
}}
pub type KNOWNFOLDERID = GUID;
pub type REFKNOWNFOLDERID = *const KNOWNFOLDERID;
pub type KF_REDIRECT_FLAGS = DWORD;
pub type FOLDERTYPEID = GUID;
pub type REFFOLDERTYPEID = *const FOLDERTYPEID;
pub type TASKOWNERID = GUID;
pub type REFTASKOWNERID = *const TASKOWNERID;
pub type ELEMENTID = GUID;
pub type REFELEMENTID = *const ELEMENTID;
ENUM!{enum SHCOLSTATE {
    SHCOLSTATE_DEFAULT = 0,
    SHCOLSTATE_TYPE_STR = 0x1,
    SHCOLSTATE_TYPE_INT = 0x2,
    SHCOLSTATE_TYPE_DATE = 0x3,
    SHCOLSTATE_TYPEMASK = 0xf,
    SHCOLSTATE_ONBYDEFAULT = 0x10,
    SHCOLSTATE_SLOW = 0x20,
    SHCOLSTATE_EXTENDED = 0x40,
    SHCOLSTATE_SECONDARYUI = 0x80,
    SHCOLSTATE_HIDDEN = 0x100,
    SHCOLSTATE_PREFER_VARCMP = 0x200,
    SHCOLSTATE_PREFER_FMTCMP = 0x400,
    SHCOLSTATE_NOSORTBYFOLDERNESS = 0x800,
    SHCOLSTATE_VIEWONLY = 0x10000,
    SHCOLSTATE_BATCHREAD = 0x20000,
    SHCOLSTATE_NO_GROUPBY = 0x40000,
    SHCOLSTATE_FIXED_WIDTH = 0x1000,
    SHCOLSTATE_NODPISCALE = 0x2000,
    SHCOLSTATE_FIXED_RATIO = 0x4000,
    SHCOLSTATE_DISPLAYMASK = 0xf000,
}}
pub type SHCOLSTATEF = DWORD;
pub type SHCOLUMNID = PROPERTYKEY;
pub type LPCSHCOLUMNID = *const SHCOLUMNID;
ENUM!{enum DEVICE_SCALE_FACTOR {
    DEVICE_SCALE_FACTOR_INVALID = 0,
    SCALE_100_PERCENT = 100,
    SCALE_120_PERCENT = 120,
    SCALE_125_PERCENT = 125,
    SCALE_140_PERCENT = 140,
    SCALE_150_PERCENT = 150,
    SCALE_160_PERCENT = 160,
    SCALE_175_PERCENT = 175,
    SCALE_180_PERCENT = 180,
    SCALE_200_PERCENT = 200,
    SCALE_225_PERCENT = 225,
    SCALE_250_PERCENT = 250,
    SCALE_300_PERCENT = 300,
    SCALE_350_PERCENT = 350,
    SCALE_400_PERCENT = 400,
    SCALE_450_PERCENT = 450,
    SCALE_500_PERCENT = 500,
}}
// extern RPC_IF_HANDLE __MIDL_itf_shtypes_0000_0000_v0_0_c_ifspec;
// extern RPC_IF_HANDLE __MIDL_itf_shtypes_0000_0000_v0_0_s_ifspec;

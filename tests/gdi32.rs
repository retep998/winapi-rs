// Copyright Â© 2015, Peter Atashian
// Licensed under the MIT License <LICENSE.md>
#![cfg(windows)]
extern crate gdi32;
use gdi32::*;
#[inline(never)] fn bb<T>(_: T) {}
#[test]
fn functions() {
    bb(Chord);
    bb(CreateBitmap);
    bb(CreateBitmapIndirect);
    bb(CreateDIBitmap);
    bb(CreateDIBSection);
    bb(Ellipse);
    bb(GetDIBits);
    // Not in MingGW yet
    // bb(Pie);
    bb(Polygon);
    bb(PolyPolygon);
    bb(RoundRect);
    bb(AngleArc);
    bb(Arc);
    bb(ArcTo);
    bb(GetArcDirection);
    bb(LineDDA);
    bb(LineTo);
    bb(MoveToEx);
    bb(PolyBezier);
    bb(PolyBezierTo);
    bb(PolyDraw);
    bb(PolyPolygon);
    bb(PolyPolyline);
    bb(Polyline);
    bb(PolylineTo);
    bb(SetArcDirection);
    bb(AbortDoc);
    bb(AbortPath);
    bb(AddFontMemResourceEx);
    bb(AddFontResourceA);
    bb(AddFontResourceExA);
    bb(AddFontResourceExW);
    bb(AddFontResourceW);
    bb(AnimatePalette);
    bb(BeginPath);
    bb(CancelDC);
    bb(CheckColorsInGamut);
    bb(CloseEnhMetaFile);
    bb(CloseFigure);
    bb(CloseMetaFile);
    bb(ColorCorrectPalette);
    bb(ColorMatchToTarget);
    bb(CombineTransform);
    bb(CopyEnhMetaFileA);
    bb(CopyEnhMetaFileW);
    bb(CopyMetaFileA);
    bb(CopyMetaFileW);
    bb(CreateBrushIndirect);
    bb(CreateColorSpaceA);
    bb(CreateColorSpaceW);
    bb(CreateDIBPatternBrush);
    bb(CreateDIBPatternBrushPt);
    bb(CreateDiscardableBitmap);
    bb(CreateEllipticRgn);
    bb(CreateEllipticRgnIndirect);
    bb(CreateEnhMetaFileA);
    bb(CreateEnhMetaFileW);
    bb(CreateFontA);
    bb(CreateFontIndirectA);
    bb(CreateFontIndirectExA);
    bb(CreateFontIndirectExW);
    bb(CreateFontIndirectW);
    bb(CreateFontW);
    bb(CreateHalftonePalette);
    bb(CreateHatchBrush);
    bb(CreateICA);
    bb(CreateICW);
    bb(CreateMetaFileA);
    bb(CreateMetaFileW);
    bb(CreatePalette);
    bb(CreatePatternBrush);
    bb(CreatePen);
    bb(CreatePenIndirect);
    bb(CreatePolyPolygonRgn);
    bb(CreatePolygonRgn);
    bb(CreateRectRgn);
    bb(CreateSolidBrush);
    bb(DeleteDC);
    bb(DeleteObject);
    bb(DescribePixelFormat);
    bb(ExtSelectClipRgn);
    bb(GetStockObject);
    bb(PatBlt);
    bb(Rectangle);
    bb(SelectClipRgn);
    bb(SelectObject);
    bb(SetBkColor);
    bb(SetDCBrushColor);
    bb(SetPixel);
    bb(SetPixelFormat);
    bb(SetRectRgn);
    bb(SetTextColor);
    bb(StretchDIBits);
    bb(SwapBuffers);
    bb(TextOutA);
    bb(TextOutW);
    bb(DPtoLP);
    bb(SetBkMode);
    bb(SetMapMode);
    bb(SetTextAlign);
    bb(SetViewportExtEx);
    bb(SetViewportOrgEx);
    bb(SetWindowExtEx);
    bb(SetROP2);
}
